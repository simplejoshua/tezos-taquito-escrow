{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subject,_Observable,_Subscriber,_Subscription,_operators_refCount PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { SubjectSubscriber } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n\nvar ConnectableObservable = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(ConnectableObservable, _super);\n\n  function ConnectableObservable(source, subjectFactory) {\n    var _this = _super.call(this) || this;\n\n    _this.source = source;\n    _this.subjectFactory = subjectFactory;\n    _this._refCount = 0;\n    _this._isComplete = false;\n    return _this;\n  }\n\n  ConnectableObservable.prototype._subscribe = function (subscriber) {\n    return this.getSubject().subscribe(subscriber);\n  };\n\n  ConnectableObservable.prototype.getSubject = function () {\n    var subject = this._subject;\n\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n\n    return this._subject;\n  };\n\n  ConnectableObservable.prototype.connect = function () {\n    var connection = this._connection;\n\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription();\n      connection.add(this.source.subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      }\n    }\n\n    return connection;\n  };\n\n  ConnectableObservable.prototype.refCount = function () {\n    return higherOrderRefCount()(this);\n  };\n\n  return ConnectableObservable;\n}(Observable);\n\nexport { ConnectableObservable };\nexport var connectableObservableDescriptor = /*@__PURE__*/function () {\n  var connectableProto = ConnectableObservable.prototype;\n  return {\n    operator: {\n      value: null\n    },\n    _refCount: {\n      value: 0,\n      writable: true\n    },\n    _subject: {\n      value: null,\n      writable: true\n    },\n    _connection: {\n      value: null,\n      writable: true\n    },\n    _subscribe: {\n      value: connectableProto._subscribe\n    },\n    _isComplete: {\n      value: connectableProto._isComplete,\n      writable: true\n    },\n    getSubject: {\n      value: connectableProto.getSubject\n    },\n    connect: {\n      value: connectableProto.connect\n    },\n    refCount: {\n      value: connectableProto.refCount\n    }\n  };\n}();\n\nvar ConnectableSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(ConnectableSubscriber, _super);\n\n  function ConnectableSubscriber(destination, connectable) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.connectable = connectable;\n    return _this;\n  }\n\n  ConnectableSubscriber.prototype._error = function (err) {\n    this._unsubscribe();\n\n    _super.prototype._error.call(this, err);\n  };\n\n  ConnectableSubscriber.prototype._complete = function () {\n    this.connectable._isComplete = true;\n\n    this._unsubscribe();\n\n    _super.prototype._complete.call(this);\n  };\n\n  ConnectableSubscriber.prototype._unsubscribe = function () {\n    var connectable = this.connectable;\n\n    if (connectable) {\n      this.connectable = null;\n      var connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  };\n\n  return ConnectableSubscriber;\n}(SubjectSubscriber);\n\nvar RefCountOperator = /*@__PURE__*/function () {\n  function RefCountOperator(connectable) {\n    this.connectable = connectable;\n  }\n\n  RefCountOperator.prototype.call = function (subscriber, source) {\n    var connectable = this.connectable;\n    connectable._refCount++;\n    var refCounter = new RefCountSubscriber(subscriber, connectable);\n    var subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      refCounter.connection = connectable.connect();\n    }\n\n    return subscription;\n  };\n\n  return RefCountOperator;\n}();\n\nvar RefCountSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(RefCountSubscriber, _super);\n\n  function RefCountSubscriber(destination, connectable) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.connectable = connectable;\n    return _this;\n  }\n\n  RefCountSubscriber.prototype._unsubscribe = function () {\n    var connectable = this.connectable;\n\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    var refCount = connectable._refCount;\n\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    connectable._refCount = refCount - 1;\n\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    var connection = this.connection;\n    var sharedConnection = connectable._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  };\n\n  return RefCountSubscriber;\n}(Subscriber);","map":{"version":3,"sources":["../../../src/internal/observable/ConnectableObservable.ts"],"names":[],"mappings":"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","sourcesContent":["/** PURE_IMPORTS_START tslib,_Subject,_Observable,_Subscriber,_Subscription,_operators_refCount PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { SubjectSubscriber } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nvar ConnectableObservable = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ConnectableObservable, _super);\n    function ConnectableObservable(source, subjectFactory) {\n        var _this = _super.call(this) || this;\n        _this.source = source;\n        _this.subjectFactory = subjectFactory;\n        _this._refCount = 0;\n        _this._isComplete = false;\n        return _this;\n    }\n    ConnectableObservable.prototype._subscribe = function (subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    };\n    ConnectableObservable.prototype.getSubject = function () {\n        var subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    };\n    ConnectableObservable.prototype.connect = function () {\n        var connection = this._connection;\n        if (!connection) {\n            this._isComplete = false;\n            connection = this._connection = new Subscription();\n            connection.add(this.source\n                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription.EMPTY;\n            }\n        }\n        return connection;\n    };\n    ConnectableObservable.prototype.refCount = function () {\n        return higherOrderRefCount()(this);\n    };\n    return ConnectableObservable;\n}(Observable));\nexport { ConnectableObservable };\nexport var connectableObservableDescriptor = /*@__PURE__*/ (function () {\n    var connectableProto = ConnectableObservable.prototype;\n    return {\n        operator: { value: null },\n        _refCount: { value: 0, writable: true },\n        _subject: { value: null, writable: true },\n        _connection: { value: null, writable: true },\n        _subscribe: { value: connectableProto._subscribe },\n        _isComplete: { value: connectableProto._isComplete, writable: true },\n        getSubject: { value: connectableProto.getSubject },\n        connect: { value: connectableProto.connect },\n        refCount: { value: connectableProto.refCount }\n    };\n})();\nvar ConnectableSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ConnectableSubscriber, _super);\n    function ConnectableSubscriber(destination, connectable) {\n        var _this = _super.call(this, destination) || this;\n        _this.connectable = connectable;\n        return _this;\n    }\n    ConnectableSubscriber.prototype._error = function (err) {\n        this._unsubscribe();\n        _super.prototype._error.call(this, err);\n    };\n    ConnectableSubscriber.prototype._complete = function () {\n        this.connectable._isComplete = true;\n        this._unsubscribe();\n        _super.prototype._complete.call(this);\n    };\n    ConnectableSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (connectable) {\n            this.connectable = null;\n            var connection = connectable._connection;\n            connectable._refCount = 0;\n            connectable._subject = null;\n            connectable._connection = null;\n            if (connection) {\n                connection.unsubscribe();\n            }\n        }\n    };\n    return ConnectableSubscriber;\n}(SubjectSubscriber));\nvar RefCountOperator = /*@__PURE__*/ (function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        var _this = _super.call(this, destination) || this;\n        _this.connectable = connectable;\n        return _this;\n    }\n    RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=ConnectableObservable.js.map\n"]},"metadata":{},"sourceType":"module"}