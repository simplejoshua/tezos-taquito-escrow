{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber,_util_EmptyError PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nexport function single(predicate) {\n  return function (source) {\n    return source.lift(new SingleOperator(predicate, source));\n  };\n}\n\nvar SingleOperator = /*@__PURE__*/function () {\n  function SingleOperator(predicate, source) {\n    this.predicate = predicate;\n    this.source = source;\n  }\n\n  SingleOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  };\n\n  return SingleOperator;\n}();\n\nvar SingleSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(SingleSubscriber, _super);\n\n  function SingleSubscriber(destination, predicate, source) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.predicate = predicate;\n    _this.source = source;\n    _this.seenValue = false;\n    _this.index = 0;\n    return _this;\n  }\n\n  SingleSubscriber.prototype.applySingleValue = function (value) {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  };\n\n  SingleSubscriber.prototype._next = function (value) {\n    var index = this.index++;\n\n    if (this.predicate) {\n      this.tryNext(value, index);\n    } else {\n      this.applySingleValue(value);\n    }\n  };\n\n  SingleSubscriber.prototype.tryNext = function (value, index) {\n    try {\n      if (this.predicate(value, index, this.source)) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  };\n\n  SingleSubscriber.prototype._complete = function () {\n    var destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError());\n    }\n  };\n\n  return SingleSubscriber;\n}(Subscriber);","map":{"version":3,"sources":["../../../src/internal/operators/single.ts"],"names":[],"mappings":";AAEA,OAAO,KAAE,OAAT,MAAqB,OAArB;AACA,SAAS,UAAT,QAA2B,eAA3B;AAkDA,SAAM,UAAN,QAA0B,oBAA1B;AACE,OAAA,SAAO,MAAP,CAAQ,SAAR,EAAkC;EACnC,OAAA,UAAA,MAAA,EAAA;IAAA,OAAA,MAAA,CAAA,IAAA,CAAA,IAAA,cAAA,CAAA,SAAA,EAAA,MAAA,CAAA,CAAA;EAAA,CAAA;AAED;;IACE,cAAA,GAAA,aAAoB,YACsB;EADtB,SAAA,cAAA,CAAA,SAAA,EAAuE,MAAvE,EAAuE;IACvE,KAAA,SAAA,GAAA,SAAA;IACnB,KAAA,MAAA,GAAA,MAAA;EAED;;EACE,cAAO,CAAA,SAAP,CAAc,IAAd,GAA4B,UAAA,UAAA,EAAiB,MAAjB,EAA6B;IAC1D,OAAA,MAAA,CAAA,SAAA,CAAA,IAAA,gBAAA,CAAA,UAAA,EAAA,KAAA,SAAA,EAAA,KAAA,MAAA,CAAA,CAAA;EACH,CAFI;;EAEH,OAAA,cAAA;AAOD,CAdsB,E;;IAcY,gBAAA,GAAA,aAAA,UAAa,MAAb,EAAa;EAK7C,OAAA,CAAA,SAAA,CAAA,gBAAA,EAAY,MAAZ;;EAAA,SAAA,gBAAA,CAGE,WAHF,EAGQ,SAHR,EAGoB,MAHpB,EAIC;IAHmB,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAuE,WAAvE,KAAuE,IAAvE;;IACA,KAAA,CAAA,SAAA,GAAA,SAAA;IANZ,KAAA,CAAA,MAAA,GAAS,MAAT;IAEA,KAAA,CAAA,SAAA,GAAkB,KAAlB;;IAMP,OAAA,KAAA;EAED;;EACE,gBAAS,CAAA,SAAT,CAAoB,gBAApB,GAAoB,UAAA,KAAA,EAAA;QAClB,KAAK,S,EAAW;MACjB,KAAA,WAAA,CAAA,KAAA,CAAA,yCAAA;IAAM,C,MACL;MACA,KAAK,SAAL,GAAgB,IAAhB;MACD,KAAA,WAAA,GAAA,KAAA;IACF;EAED,CARE;;EASA,gBAAc,CAAA,SAAd,CAAwB,KAAxB,GAA2B,UAAA,KAAA,EAAA;IAE3B,IAAI,KAAK,GAAA,KAAA,KAAA,EAAT;;QACE,KAAK,S,EAAQ;MACd,KAAA,OAAA,CAAA,KAAA,EAAA,KAAA;IAAM,C,MACL;MACD,KAAA,gBAAA,CAAA,KAAA;IACF;EAED,CATE;;EAUA,gBAAI,CAAA,SAAJ,CAAI,OAAJ,GAAI,UAAA,KAAA,EAAA,KAAA,EAAA;QACF;UACE,KAAK,SAAL,CAAK,KAAL,EAAsB,KAAtB,EAA6B,KAAA,MAA7B,C,EAA6B;QAC9B,KAAA,gBAAA,CAAA,KAAA;MACF;IAAC,C,CACA,OAAA,GAAA,EAAK;MACN,KAAA,WAAA,CAAA,KAAA,CAAA,GAAA;IACF;EAED,CATE;;EAUA,gBAAM,CAAA,SAAN,CAAyB,SAAzB,GAAqC,YAAA;IAErC,IAAI,WAAU,GAAI,KAAE,WAApB;;QACE,KAAA,KAAA,GAAY,C,EAAI;MAChB,WAAW,CAAC,IAAZ,CAAY,KAAU,SAAV,GAAW,KAAA,WAAX,GAAW,SAAvB;MACD,WAAA,CAAA,QAAA;IAAM,C,MACL;MACD,WAAA,CAAA,KAAA,CAAA,IAAA,UAAA,EAAA;IACF;EACH,CATI;;EAzC8B,OAAA,gBAAA;CAAA,C,UAAA,C","sourcesContent":["/** PURE_IMPORTS_START tslib,_Subscriber,_util_EmptyError PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nexport function single(predicate) {\n    return function (source) { return source.lift(new SingleOperator(predicate, source)); };\n}\nvar SingleOperator = /*@__PURE__*/ (function () {\n    function SingleOperator(predicate, source) {\n        this.predicate = predicate;\n        this.source = source;\n    }\n    SingleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n    };\n    return SingleOperator;\n}());\nvar SingleSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SingleSubscriber, _super);\n    function SingleSubscriber(destination, predicate, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.source = source;\n        _this.seenValue = false;\n        _this.index = 0;\n        return _this;\n    }\n    SingleSubscriber.prototype.applySingleValue = function (value) {\n        if (this.seenValue) {\n            this.destination.error('Sequence contains more than one element');\n        }\n        else {\n            this.seenValue = true;\n            this.singleValue = value;\n        }\n    };\n    SingleSubscriber.prototype._next = function (value) {\n        var index = this.index++;\n        if (this.predicate) {\n            this.tryNext(value, index);\n        }\n        else {\n            this.applySingleValue(value);\n        }\n    };\n    SingleSubscriber.prototype.tryNext = function (value, index) {\n        try {\n            if (this.predicate(value, index, this.source)) {\n                this.applySingleValue(value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    SingleSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (this.index > 0) {\n            destination.next(this.seenValue ? this.singleValue : undefined);\n            destination.complete();\n        }\n        else {\n            destination.error(new EmptyError);\n        }\n    };\n    return SingleSubscriber;\n}(Subscriber));\n//# sourceMappingURL=single.js.map\n"]},"metadata":{},"sourceType":"module"}