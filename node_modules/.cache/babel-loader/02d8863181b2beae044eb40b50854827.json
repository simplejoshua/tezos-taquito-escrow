{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber,_Subscription,_Observable,_Subject PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nexport function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {\n  return function (source) {\n    return source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n  };\n}\n\nvar GroupByOperator = /*@__PURE__*/function () {\n  function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {\n    this.keySelector = keySelector;\n    this.elementSelector = elementSelector;\n    this.durationSelector = durationSelector;\n    this.subjectSelector = subjectSelector;\n  }\n\n  GroupByOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));\n  };\n\n  return GroupByOperator;\n}();\n\nvar GroupBySubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(GroupBySubscriber, _super);\n\n  function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.keySelector = keySelector;\n    _this.elementSelector = elementSelector;\n    _this.durationSelector = durationSelector;\n    _this.subjectSelector = subjectSelector;\n    _this.groups = null;\n    _this.attemptedToUnsubscribe = false;\n    _this.count = 0;\n    return _this;\n  }\n\n  GroupBySubscriber.prototype._next = function (value) {\n    var key;\n\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  };\n\n  GroupBySubscriber.prototype._group = function (value, key) {\n    var groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = new Map();\n    }\n\n    var group = groups.get(key);\n    var element;\n\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = value;\n    }\n\n    if (!group) {\n      group = this.subjectSelector ? this.subjectSelector() : new Subject();\n      groups.set(key, group);\n      var groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n\n      if (this.durationSelector) {\n        var duration = void 0;\n\n        try {\n          duration = this.durationSelector(new GroupedObservable(key, group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  };\n\n  GroupBySubscriber.prototype._error = function (err) {\n    var groups = this.groups;\n\n    if (groups) {\n      groups.forEach(function (group, key) {\n        group.error(err);\n      });\n      groups.clear();\n    }\n\n    this.destination.error(err);\n  };\n\n  GroupBySubscriber.prototype._complete = function () {\n    var groups = this.groups;\n\n    if (groups) {\n      groups.forEach(function (group, key) {\n        group.complete();\n      });\n      groups.clear();\n    }\n\n    this.destination.complete();\n  };\n\n  GroupBySubscriber.prototype.removeGroup = function (key) {\n    this.groups.delete(key);\n  };\n\n  GroupBySubscriber.prototype.unsubscribe = function () {\n    if (!this.closed) {\n      this.attemptedToUnsubscribe = true;\n\n      if (this.count === 0) {\n        _super.prototype.unsubscribe.call(this);\n      }\n    }\n  };\n\n  return GroupBySubscriber;\n}(Subscriber);\n\nvar GroupDurationSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(GroupDurationSubscriber, _super);\n\n  function GroupDurationSubscriber(key, group, parent) {\n    var _this = _super.call(this, group) || this;\n\n    _this.key = key;\n    _this.group = group;\n    _this.parent = parent;\n    return _this;\n  }\n\n  GroupDurationSubscriber.prototype._next = function (value) {\n    this.complete();\n  };\n\n  GroupDurationSubscriber.prototype._unsubscribe = function () {\n    var _a = this,\n        parent = _a.parent,\n        key = _a.key;\n\n    this.key = this.parent = null;\n\n    if (parent) {\n      parent.removeGroup(key);\n    }\n  };\n\n  return GroupDurationSubscriber;\n}(Subscriber);\n\nvar GroupedObservable = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(GroupedObservable, _super);\n\n  function GroupedObservable(key, groupSubject, refCountSubscription) {\n    var _this = _super.call(this) || this;\n\n    _this.key = key;\n    _this.groupSubject = groupSubject;\n    _this.refCountSubscription = refCountSubscription;\n    return _this;\n  }\n\n  GroupedObservable.prototype._subscribe = function (subscriber) {\n    var subscription = new Subscription();\n\n    var _a = this,\n        refCountSubscription = _a.refCountSubscription,\n        groupSubject = _a.groupSubject;\n\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  };\n\n  return GroupedObservable;\n}(Observable);\n\nexport { GroupedObservable };\n\nvar InnerRefCountSubscription = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(InnerRefCountSubscription, _super);\n\n  function InnerRefCountSubscription(parent) {\n    var _this = _super.call(this) || this;\n\n    _this.parent = parent;\n    parent.count++;\n    return _this;\n  }\n\n  InnerRefCountSubscription.prototype.unsubscribe = function () {\n    var parent = this.parent;\n\n    if (!parent.closed && !this.closed) {\n      _super.prototype.unsubscribe.call(this);\n\n      parent.count -= 1;\n\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  };\n\n  return InnerRefCountSubscription;\n}(Subscription);","map":{"version":3,"sources":["../../../src/internal/operators/groupBy.ts"],"names":[],"mappings":"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","sourcesContent":["/** PURE_IMPORTS_START tslib,_Subscriber,_Subscription,_Observable,_Subject PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nexport function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {\n    return function (source) {\n        return source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n    };\n}\nvar GroupByOperator = /*@__PURE__*/ (function () {\n    function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {\n        this.keySelector = keySelector;\n        this.elementSelector = elementSelector;\n        this.durationSelector = durationSelector;\n        this.subjectSelector = subjectSelector;\n    }\n    GroupByOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));\n    };\n    return GroupByOperator;\n}());\nvar GroupBySubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(GroupBySubscriber, _super);\n    function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.keySelector = keySelector;\n        _this.elementSelector = elementSelector;\n        _this.durationSelector = durationSelector;\n        _this.subjectSelector = subjectSelector;\n        _this.groups = null;\n        _this.attemptedToUnsubscribe = false;\n        _this.count = 0;\n        return _this;\n    }\n    GroupBySubscriber.prototype._next = function (value) {\n        var key;\n        try {\n            key = this.keySelector(value);\n        }\n        catch (err) {\n            this.error(err);\n            return;\n        }\n        this._group(value, key);\n    };\n    GroupBySubscriber.prototype._group = function (value, key) {\n        var groups = this.groups;\n        if (!groups) {\n            groups = this.groups = new Map();\n        }\n        var group = groups.get(key);\n        var element;\n        if (this.elementSelector) {\n            try {\n                element = this.elementSelector(value);\n            }\n            catch (err) {\n                this.error(err);\n            }\n        }\n        else {\n            element = value;\n        }\n        if (!group) {\n            group = (this.subjectSelector ? this.subjectSelector() : new Subject());\n            groups.set(key, group);\n            var groupedObservable = new GroupedObservable(key, group, this);\n            this.destination.next(groupedObservable);\n            if (this.durationSelector) {\n                var duration = void 0;\n                try {\n                    duration = this.durationSelector(new GroupedObservable(key, group));\n                }\n                catch (err) {\n                    this.error(err);\n                    return;\n                }\n                this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n            }\n        }\n        if (!group.closed) {\n            group.next(element);\n        }\n    };\n    GroupBySubscriber.prototype._error = function (err) {\n        var groups = this.groups;\n        if (groups) {\n            groups.forEach(function (group, key) {\n                group.error(err);\n            });\n            groups.clear();\n        }\n        this.destination.error(err);\n    };\n    GroupBySubscriber.prototype._complete = function () {\n        var groups = this.groups;\n        if (groups) {\n            groups.forEach(function (group, key) {\n                group.complete();\n            });\n            groups.clear();\n        }\n        this.destination.complete();\n    };\n    GroupBySubscriber.prototype.removeGroup = function (key) {\n        this.groups.delete(key);\n    };\n    GroupBySubscriber.prototype.unsubscribe = function () {\n        if (!this.closed) {\n            this.attemptedToUnsubscribe = true;\n            if (this.count === 0) {\n                _super.prototype.unsubscribe.call(this);\n            }\n        }\n    };\n    return GroupBySubscriber;\n}(Subscriber));\nvar GroupDurationSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(GroupDurationSubscriber, _super);\n    function GroupDurationSubscriber(key, group, parent) {\n        var _this = _super.call(this, group) || this;\n        _this.key = key;\n        _this.group = group;\n        _this.parent = parent;\n        return _this;\n    }\n    GroupDurationSubscriber.prototype._next = function (value) {\n        this.complete();\n    };\n    GroupDurationSubscriber.prototype._unsubscribe = function () {\n        var _a = this, parent = _a.parent, key = _a.key;\n        this.key = this.parent = null;\n        if (parent) {\n            parent.removeGroup(key);\n        }\n    };\n    return GroupDurationSubscriber;\n}(Subscriber));\nvar GroupedObservable = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(GroupedObservable, _super);\n    function GroupedObservable(key, groupSubject, refCountSubscription) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.groupSubject = groupSubject;\n        _this.refCountSubscription = refCountSubscription;\n        return _this;\n    }\n    GroupedObservable.prototype._subscribe = function (subscriber) {\n        var subscription = new Subscription();\n        var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;\n        if (refCountSubscription && !refCountSubscription.closed) {\n            subscription.add(new InnerRefCountSubscription(refCountSubscription));\n        }\n        subscription.add(groupSubject.subscribe(subscriber));\n        return subscription;\n    };\n    return GroupedObservable;\n}(Observable));\nexport { GroupedObservable };\nvar InnerRefCountSubscription = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(InnerRefCountSubscription, _super);\n    function InnerRefCountSubscription(parent) {\n        var _this = _super.call(this) || this;\n        _this.parent = parent;\n        parent.count++;\n        return _this;\n    }\n    InnerRefCountSubscription.prototype.unsubscribe = function () {\n        var parent = this.parent;\n        if (!parent.closed && !this.closed) {\n            _super.prototype.unsubscribe.call(this);\n            parent.count -= 1;\n            if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n                parent.unsubscribe();\n            }\n        }\n    };\n    return InnerRefCountSubscription;\n}(Subscription));\n//# sourceMappingURL=groupBy.js.map\n"]},"metadata":{},"sourceType":"module"}