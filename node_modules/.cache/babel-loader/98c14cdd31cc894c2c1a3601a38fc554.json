{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function takeWhile(predicate, inclusive) {\n  if (inclusive === void 0) {\n    inclusive = false;\n  }\n\n  return function (source) {\n    return source.lift(new TakeWhileOperator(predicate, inclusive));\n  };\n}\n\nvar TakeWhileOperator = /*@__PURE__*/function () {\n  function TakeWhileOperator(predicate, inclusive) {\n    this.predicate = predicate;\n    this.inclusive = inclusive;\n  }\n\n  TakeWhileOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate, this.inclusive));\n  };\n\n  return TakeWhileOperator;\n}();\n\nvar TakeWhileSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(TakeWhileSubscriber, _super);\n\n  function TakeWhileSubscriber(destination, predicate, inclusive) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.predicate = predicate;\n    _this.inclusive = inclusive;\n    _this.index = 0;\n    return _this;\n  }\n\n  TakeWhileSubscriber.prototype._next = function (value) {\n    var destination = this.destination;\n    var result;\n\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    this.nextOrComplete(value, result);\n  };\n\n  TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {\n    var destination = this.destination;\n\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      if (this.inclusive) {\n        destination.next(value);\n      }\n\n      destination.complete();\n    }\n  };\n\n  return TakeWhileSubscriber;\n}(Subscriber);","map":{"version":3,"sources":["../../../src/internal/operators/takeWhile.ts"],"names":[],"mappings":";AAEA,OAAO,KAAE,OAAT,MAAqB,OAArB;AAmDA,SAAM,UAAN,QACI,eADJ;AAEI,OAAA,SAAA,SAAA,CAAA,SAAA,EAAA,SAAA,EAAA;EACF,IAAA,SAAO,KAAC,KAAqB,CAA7B,EAA6B;IAClB,SAAA,GAAA,KAAA;EAAwD;;EACpE,OAAA,UAAA,MAAA,EAAA;IAED,OAAA,MAAA,CAAA,IAAA,CAAA,IAAA,iBAAA,CAAA,SAAA,EAAA,SAAA,CAAA,CAAA;EACE,CAHD;AAIa;;IACA,iBAAA,GAAA,aAAkB,YAAA;EAAG,SAAC,iBAAD,CAAC,SAAD,EAAC,SAAD,EAAC;IAElC,KAAA,SAAA,GAAA,SAAA;IACE,KAAA,SAAA,GAAc,SAAd;EAED;;EACH,iBAAA,CAAA,SAAA,CAAC,IAAD,GAAC,UAAA,UAAA,EAAA,MAAA,EAAA;IAAA,OAAA,MAAA,CAAA,SAAA,CAAA,IAAA,mBAAA,CAAA,UAAA,EAAA,KAAA,SAAA,EAAA,KAAA,SAAA,CAAA,CAAA;EAOD,CAPA;;EAOqC,OAAA,iBAAA;AAGnC,CAhB8B,E;;IAgB9B,mBAIE,GAAA,aAAM,UAAY,MAAZ,EACP;EAHW,OAAA,CAAA,SAAA,CAAA,mBAAA,EAA+C,MAA/C;;EACA,SAAA,mBAAA,CAAA,WAAA,EAAkB,SAAlB,EAAkB,SAAlB,EAAkB;IALtB,IAAA,KAAA,GAAK,MAAa,CAAA,IAAb,CAAa,IAAb,EAAa,WAAb,KAAa,IAAlB;;;IAOP,KAAA,CAAA,SAAA,GAAA,SAAA;IAES,KAAA,CAAA,KAAA,GAAV,CAAU;IACR,OAAM,KAAN;EACA;;EACA,mBAAI,CAAA,SAAJ,CAAI,KAAJ,GAAI,UAAA,KAAA,EAAA;QACF,WAAS,GAAK,KAAA,W;IACf,IAAA,MAAA;;IAAC,IAAA;MACA,MAAA,GAAA,KAAY,SAAZ,CAAuB,KAAvB,EAAuB,KAAA,KAAA,EAAvB,CAAA;IACA,CAFA,CAGD,OAAA,GAAA,EAAA;MACG,WAAC,CAAA,KAAD,CAAgB,GAAhB;MACL;IAED;;IACE,KAAM,cAAN,CAAoB,KAApB,EAAyB,MAAzB;EACA,CAXA;;EAYE,mBAAW,CAAC,SAAZ,CAAsB,cAAtB,GAAwB,UAAA,KAAA,EAAA,eAAA,EAAA;IACzB,IAAA,WAAA,GAAA,KAAA,WAAA;;QAAM,OAAA,CAAA,eAAA,C,EAAA;MACL,WAAS,CAAA,IAAT,CAAS,KAAT;IACE,C,MACD;MACD,IAAA,KAAA,SAAA,EAAoB;QACrB,WAAA,CAAA,IAAA,CAAA,KAAA;MACF;;MACH,WAAA,CAAA,QAAA;IAjCqC;GAyB/B;;;CAlBI,C,UAAA,C","sourcesContent":["/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function takeWhile(predicate, inclusive) {\n    if (inclusive === void 0) {\n        inclusive = false;\n    }\n    return function (source) {\n        return source.lift(new TakeWhileOperator(predicate, inclusive));\n    };\n}\nvar TakeWhileOperator = /*@__PURE__*/ (function () {\n    function TakeWhileOperator(predicate, inclusive) {\n        this.predicate = predicate;\n        this.inclusive = inclusive;\n    }\n    TakeWhileOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate, this.inclusive));\n    };\n    return TakeWhileOperator;\n}());\nvar TakeWhileSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(TakeWhileSubscriber, _super);\n    function TakeWhileSubscriber(destination, predicate, inclusive) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.inclusive = inclusive;\n        _this.index = 0;\n        return _this;\n    }\n    TakeWhileSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        var result;\n        try {\n            result = this.predicate(value, this.index++);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        this.nextOrComplete(value, result);\n    };\n    TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {\n        var destination = this.destination;\n        if (Boolean(predicateResult)) {\n            destination.next(value);\n        }\n        else {\n            if (this.inclusive) {\n                destination.next(value);\n            }\n            destination.complete();\n        }\n    };\n    return TakeWhileSubscriber;\n}(Subscriber));\n//# sourceMappingURL=takeWhile.js.map\n"]},"metadata":{},"sourceType":"module"}