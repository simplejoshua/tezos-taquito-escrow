{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function count(predicate) {\n  return function (source) {\n    return source.lift(new CountOperator(predicate, source));\n  };\n}\n\nvar CountOperator = /*@__PURE__*/function () {\n  function CountOperator(predicate, source) {\n    this.predicate = predicate;\n    this.source = source;\n  }\n\n  CountOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  };\n\n  return CountOperator;\n}();\n\nvar CountSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(CountSubscriber, _super);\n\n  function CountSubscriber(destination, predicate, source) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.predicate = predicate;\n    _this.source = source;\n    _this.count = 0;\n    _this.index = 0;\n    return _this;\n  }\n\n  CountSubscriber.prototype._next = function (value) {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  };\n\n  CountSubscriber.prototype._tryPredicate = function (value) {\n    var result;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  };\n\n  CountSubscriber.prototype._complete = function () {\n    this.destination.next(this.count);\n    this.destination.complete();\n  };\n\n  return CountSubscriber;\n}(Subscriber);","map":{"version":3,"sources":["../../../src/internal/operators/count.ts"],"names":[],"mappings":";AAGA,OAAO,KAAE,OAAT,MAAqB,OAArB;AA6DA,SAAM,UAAN,QAAyB,eAAzB;AACE,OAAA,SAAO,KAAP,CAAQ,SAAR,EAAkC;EACnC,OAAA,UAAA,MAAA,EAAA;IAAA,OAAA,MAAA,CAAA,IAAA,CAAA,IAAA,aAAA,CAAA,SAAA,EAAA,MAAA,CAAA,CAAA;EAAA,CAAA;AAED;;IACE,aAAA,GAAA,aAAoB,YACsB;EADtB,SAAA,aAAA,CAAA,SAAA,EAAuE,MAAvE,EAAuE;IACvE,KAAA,SAAA,GAAA,SAAA;IACnB,KAAA,MAAA,GAAA,MAAA;EAED;;EACE,aAAO,CAAA,SAAP,CAAc,IAAd,GAAwB,UAAI,UAAJ,EAAoB,MAApB,EAAgC;IACzD,OAAA,MAAA,CAAA,SAAA,CAAA,IAAA,eAAA,CAAA,UAAA,EAAA,KAAA,SAAA,EAAA,KAAA,MAAA,CAAA,CAAA;EACH,CAFI;;EAEH,OAAA,aAAA;AAOD,CAdsB,E;;IAcW,eAAA,GAAA,aAAA,UAAa,MAAb,EAAa;EAI5C,OAAA,CAAA,SAAA,CAAA,eAAA,EAAY,MAAZ;;EAAA,SAAA,eAAA,CAGE,WAHF,EAGQ,SAHR,EAGoB,MAHpB,EAIC;IAHmB,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAuE,WAAvE,KAAuE,IAAvE;;IACA,KAAA,CAAA,SAAA,GAAA,SAAA;IALZ,KAAA,CAAA,MAAA,GAAiB,MAAjB;IACA,KAAA,CAAA,KAAA,GAAgB,CAAhB;;IAMP,OAAA,KAAA;EAED;;EACE,eAAS,CAAA,SAAT,CAAoB,KAApB,GAAoB,UAAA,KAAA,EAAA;QAClB,KAAK,S,EAAA;MACN,KAAA,aAAA,CAAA,KAAA;IAAM,C,MACL;MACD,KAAA,KAAA;IACF;EAED,CAPE;;EAQA,eAAgB,CAAA,SAAhB,CAAgB,aAAhB,GAAgB,UAAA,KAAA,EAAA;IAEhB,IAAI,MAAJ;;QACE;MACD,MAAA,GAAA,KAAA,SAAA,CAAA,KAAA,EAAA,KAAA,KAAA,EAAA,EAAA,KAAA,MAAA,CAAA;IAAC,C,CACA,OAAA,GAAA,EAAK;MACL,KAAA,WAAA,CAAO,KAAP,CAAO,GAAP;MACD;IAED;;QACE,M,EAAK;MACN,KAAA,KAAA;IACF;EAED,CAdE;;EAeA,eAAK,CAAA,SAAL,CAAsB,SAAtB,GAAkC,YAAA;IAClC,KAAK,WAAL,CAAiB,IAAjB,CAAiB,KAAU,KAA3B;IACD,KAAA,WAAA,CAAA,QAAA;EACH,CAHI;;EAlC6B,OAAA,eAAA;CAAA,C,UAAA,C","sourcesContent":["/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function count(predicate) {\n    return function (source) { return source.lift(new CountOperator(predicate, source)); };\n}\nvar CountOperator = /*@__PURE__*/ (function () {\n    function CountOperator(predicate, source) {\n        this.predicate = predicate;\n        this.source = source;\n    }\n    CountOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n    };\n    return CountOperator;\n}());\nvar CountSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(CountSubscriber, _super);\n    function CountSubscriber(destination, predicate, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.source = source;\n        _this.count = 0;\n        _this.index = 0;\n        return _this;\n    }\n    CountSubscriber.prototype._next = function (value) {\n        if (this.predicate) {\n            this._tryPredicate(value);\n        }\n        else {\n            this.count++;\n        }\n    };\n    CountSubscriber.prototype._tryPredicate = function (value) {\n        var result;\n        try {\n            result = this.predicate(value, this.index++, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.count++;\n        }\n    };\n    CountSubscriber.prototype._complete = function () {\n        this.destination.next(this.count);\n        this.destination.complete();\n    };\n    return CountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=count.js.map\n"]},"metadata":{},"sourceType":"module"}