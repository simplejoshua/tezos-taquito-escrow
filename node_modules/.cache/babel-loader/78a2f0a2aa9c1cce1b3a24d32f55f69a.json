{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function scan(accumulator, seed) {\n  var hasSeed = false;\n\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return function scanOperatorFunction(source) {\n    return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n  };\n}\n\nvar ScanOperator = /*@__PURE__*/function () {\n  function ScanOperator(accumulator, seed, hasSeed) {\n    if (hasSeed === void 0) {\n      hasSeed = false;\n    }\n\n    this.accumulator = accumulator;\n    this.seed = seed;\n    this.hasSeed = hasSeed;\n  }\n\n  ScanOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  };\n\n  return ScanOperator;\n}();\n\nvar ScanSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(ScanSubscriber, _super);\n\n  function ScanSubscriber(destination, accumulator, _seed, hasSeed) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.accumulator = accumulator;\n    _this._seed = _seed;\n    _this.hasSeed = hasSeed;\n    _this.index = 0;\n    return _this;\n  }\n\n  Object.defineProperty(ScanSubscriber.prototype, \"seed\", {\n    get: function () {\n      return this._seed;\n    },\n    set: function (value) {\n      this.hasSeed = true;\n      this._seed = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ScanSubscriber.prototype._next = function (value) {\n    if (!this.hasSeed) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  };\n\n  ScanSubscriber.prototype._tryNext = function (value) {\n    var index = this.index++;\n    var result;\n\n    try {\n      result = this.accumulator(this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n\n    this.seed = result;\n    this.destination.next(result);\n  };\n\n  return ScanSubscriber;\n}(Subscriber);","map":{"version":3,"sources":["../../../src/internal/operators/scan.ts"],"names":[],"mappings":";AAEA,OAAO,KAAE,OAAT,MAAqB,OAArB;AAoDA,SAAM,UAAN,QAA2B,eAA3B;AACE,OAAA,SAAW,IAAX,CAAc,WAAd,EAAoB,IAApB,EAAoB;EAMpB,IAAI,OAAA,GAAU,KAAd;;MACE,SAAO,CAAG,MAAV,IAAe,C,EAAA;IAChB,OAAA,GAAA,IAAA;EAED;;EACE,OAAA,SAAO,oBAAP,CAAuB,MAAvB,EAAoC;IACpC,OAAA,MAAA,CAAA,IAAA,CAAA,IAAA,YAAA,CAAA,WAAA,EAAA,IAAA,EAAA,OAAA,CAAA,CAAA;EACH,CAFG;AAIJ;;IACE,YAAA,GAAA,aAAoB,YAAmF;EAAA,SAAA,YAAA,CAAA,WAAA,EAAA,IAAA,EAAA,OAAA,EAAwB;IAA3G,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA;MAA6D,OAAA,GAAA,KAAA;IAAsB;;IAA4B,KAAA,WAAA,GAAA,WAAA;IAEnI,KAAA,IAAA,GAAA,IAAA;IACE,KAAA,OAAA,GAAc,OAAd;EACD;;EACH,YAAA,CAAA,SAAA,CAAC,IAAD,GAAC,UAAA,UAAA,EAAA,MAAA,EAAA;IAAA,OAAA,MAAA,CAAA,SAAA,CAAA,IAAA,cAAA,CAAA,UAAA,EAAA,KAAA,WAAA,EAAA,KAAA,IAAA,EAAA,KAAA,OAAA,CAAA,CAAA;EAOD,CAPA;;EAOmC,OAAA,YAAA;AAYjC,CAxBoB,E;;IAwBpB,cAAA,GAEE,aAAA,UAAM,MAAN,EAAkB;EAF4B,OAAA,CAAA,SAAA,CAAA,cAAA,EAAA,MAAA;;EAA6D,SAAA,cAAA,CAAY,WAAZ,EAAY,WAAZ,EAAY,KAAZ,EAAY,OAAZ,EAAY;IACrG,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAgB,IAAhB,EAAgB,WAAhB,KAAgB,IAAhB;;IAZZ,KAAA,CAAA,WAAA,GAAkB,WAAlB;;IAcP,KAAA,CAAA,OAAA,GAAA,OAAA;IAZD,KAAA,CAAA,KAAA,GAAA,CAAA;IAAA,OAAA,KAAA;EACE;;EACF,MAAC,CAAA,cAAD,CAAC,cAAA,CAAA,SAAD,EAAC,MAAD,EAAC;SAED,YAAS;MACP,OAAK,KAAO,KAAZ;IACA,CAJD;IAKD,GAAC,EAAA,UAAA,KAAA,EAAA;;;IALA,CAAA;IAYS,UAAA,EAAV,IAZC;IAaC,YAAU,EAAA;EAbX,CAAD;;EAeI,cAAK,CAAA,SAAL,CAAiB,KAAjB,GAAsB,UAAO,KAAP,EAAO;IAC9B,IAAA,CAAA,KAAA,OAAA,EAAA;MAAM,KAAA,IAAA,GAAA,KAAA;MACL,KAAA,WAAA,CAAY,IAAZ,CAAqB,KAArB;IACD,CAFA,MAGF;MAEO,OAAA,KAAA,QAAA,CAAR,KAAQ,CAAA;IACN;EACA,CARE;;EASF,cAAI,CAAA,SAAJ,CAAI,QAAJ,GAAI,UAAA,KAAA,EAAA;QACF,KAAA,GAAM,KAAO,KAAP,E;IACP,IAAA,MAAA;;IAAC,IAAA;MACA,MAAK,GAAA,KAAA,WAAA,CAAqB,KAAE,IAAvB,EAAuB,KAAvB,EAAuB,KAAvB,CAAL;IACD,CAFC,CAGF,OAAK,GAAL,EAAY;MACR,KAAC,WAAD,CAAiB,KAAjB,CAAkB,GAAlB;IACL;;IACH,KAAA,IAAA,GAAA,MAAA;IArCmC,KAAU,WAAV,CAqClC,IArCkC,CAqClC,MArCkC;GA6B/B;;;CAfA,C,UAAA,C","sourcesContent":["/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function scan(accumulator, seed) {\n    var hasSeed = false;\n    if (arguments.length >= 2) {\n        hasSeed = true;\n    }\n    return function scanOperatorFunction(source) {\n        return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n    };\n}\nvar ScanOperator = /*@__PURE__*/ (function () {\n    function ScanOperator(accumulator, seed, hasSeed) {\n        if (hasSeed === void 0) {\n            hasSeed = false;\n        }\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.hasSeed = hasSeed;\n    }\n    ScanOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n    };\n    return ScanOperator;\n}());\nvar ScanSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ScanSubscriber, _super);\n    function ScanSubscriber(destination, accumulator, _seed, hasSeed) {\n        var _this = _super.call(this, destination) || this;\n        _this.accumulator = accumulator;\n        _this._seed = _seed;\n        _this.hasSeed = hasSeed;\n        _this.index = 0;\n        return _this;\n    }\n    Object.defineProperty(ScanSubscriber.prototype, \"seed\", {\n        get: function () {\n            return this._seed;\n        },\n        set: function (value) {\n            this.hasSeed = true;\n            this._seed = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ScanSubscriber.prototype._next = function (value) {\n        if (!this.hasSeed) {\n            this.seed = value;\n            this.destination.next(value);\n        }\n        else {\n            return this._tryNext(value);\n        }\n    };\n    ScanSubscriber.prototype._tryNext = function (value) {\n        var index = this.index++;\n        var result;\n        try {\n            result = this.accumulator(this.seed, value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n        this.seed = result;\n        this.destination.next(result);\n    };\n    return ScanSubscriber;\n}(Subscriber));\n//# sourceMappingURL=scan.js.map\n"]},"metadata":{},"sourceType":"module"}