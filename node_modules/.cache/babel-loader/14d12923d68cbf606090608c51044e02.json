{"ast":null,"code":"import { presetPrimaryColors } from '@ant-design/colors';\nimport warning from '../_util/warning';\nexport function validProgress(progress) {\n  if (!progress || progress < 0) {\n    return 0;\n  }\n\n  if (progress > 100) {\n    return 100;\n  }\n\n  return progress;\n}\nexport function getSuccessPercent(_ref) {\n  let {\n    success,\n    successPercent\n  } = _ref;\n  let percent = successPercent;\n  /** @deprecated Use `percent` instead */\n\n  if (success && 'progress' in success) {\n    process.env.NODE_ENV !== \"production\" ? warning(false, 'Progress', '`success.progress` is deprecated. Please use `success.percent` instead.') : void 0;\n    percent = success.progress;\n  }\n\n  if (success && 'percent' in success) {\n    percent = success.percent;\n  }\n\n  return percent;\n}\nexport const getPercentage = _ref2 => {\n  let {\n    percent,\n    success,\n    successPercent\n  } = _ref2;\n  const realSuccessPercent = validProgress(getSuccessPercent({\n    success,\n    successPercent\n  }));\n  return [realSuccessPercent, validProgress(validProgress(percent) - realSuccessPercent)];\n};\nexport const getStrokeColor = _ref3 => {\n  let {\n    success = {},\n    strokeColor\n  } = _ref3;\n  const {\n    strokeColor: successColor\n  } = success;\n  return [successColor || presetPrimaryColors.green, strokeColor || null];\n};\nexport const getSize = (size, type, extra) => {\n  var _a, _b, _c, _d;\n\n  let width = -1;\n  let height = -1;\n\n  if (type === 'step') {\n    const steps = extra.steps;\n    const strokeWidth = extra.strokeWidth;\n\n    if (typeof size === 'string' || typeof size === 'undefined') {\n      width = size === 'small' ? 2 : 14;\n      height = strokeWidth !== null && strokeWidth !== void 0 ? strokeWidth : 8;\n    } else if (typeof size === 'number') {\n      [width, height] = [size, size];\n    } else {\n      [width = 14, height = 8] = size;\n    }\n\n    width *= steps;\n  } else if (type === 'line') {\n    const strokeWidth = extra === null || extra === void 0 ? void 0 : extra.strokeWidth;\n\n    if (typeof size === 'string' || typeof size === 'undefined') {\n      height = strokeWidth || (size === 'small' ? 6 : 8);\n    } else if (typeof size === 'number') {\n      [width, height] = [size, size];\n    } else {\n      [width = -1, height = 8] = size;\n    }\n  } else if (type === 'circle' || type === 'dashboard') {\n    if (typeof size === 'string' || typeof size === 'undefined') {\n      [width, height] = size === 'small' ? [60, 60] : [120, 120];\n    } else if (typeof size === 'number') {\n      [width, height] = [size, size];\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        process.env.NODE_ENV !== \"production\" ? warning(false, 'Progress', 'Type \"circle\" and \"dashbord\" do not accept array as `size`, please use number or preset size instead.') : void 0;\n      }\n\n      width = (_b = (_a = size[0]) !== null && _a !== void 0 ? _a : size[1]) !== null && _b !== void 0 ? _b : 120;\n      height = (_d = (_c = size[0]) !== null && _c !== void 0 ? _c : size[1]) !== null && _d !== void 0 ? _d : 120;\n    }\n  }\n\n  return [width, height];\n};","map":{"version":3,"names":["presetPrimaryColors","warning","validProgress","progress","getSuccessPercent","_ref","success","successPercent","percent","process","env","NODE_ENV","getPercentage","_ref2","realSuccessPercent","getStrokeColor","_ref3","strokeColor","successColor","green","getSize","size","type","extra","_a","_b","_c","_d","width","height","steps","strokeWidth"],"sources":["C:/Users/Joshua Doros/Desktop/Tezos/tezos-taquito-escrow/node_modules/antd/es/progress/utils.js"],"sourcesContent":["import { presetPrimaryColors } from '@ant-design/colors';\nimport warning from '../_util/warning';\nexport function validProgress(progress) {\n  if (!progress || progress < 0) {\n    return 0;\n  }\n  if (progress > 100) {\n    return 100;\n  }\n  return progress;\n}\nexport function getSuccessPercent(_ref) {\n  let {\n    success,\n    successPercent\n  } = _ref;\n  let percent = successPercent;\n  /** @deprecated Use `percent` instead */\n  if (success && 'progress' in success) {\n    process.env.NODE_ENV !== \"production\" ? warning(false, 'Progress', '`success.progress` is deprecated. Please use `success.percent` instead.') : void 0;\n    percent = success.progress;\n  }\n  if (success && 'percent' in success) {\n    percent = success.percent;\n  }\n  return percent;\n}\nexport const getPercentage = _ref2 => {\n  let {\n    percent,\n    success,\n    successPercent\n  } = _ref2;\n  const realSuccessPercent = validProgress(getSuccessPercent({\n    success,\n    successPercent\n  }));\n  return [realSuccessPercent, validProgress(validProgress(percent) - realSuccessPercent)];\n};\nexport const getStrokeColor = _ref3 => {\n  let {\n    success = {},\n    strokeColor\n  } = _ref3;\n  const {\n    strokeColor: successColor\n  } = success;\n  return [successColor || presetPrimaryColors.green, strokeColor || null];\n};\nexport const getSize = (size, type, extra) => {\n  var _a, _b, _c, _d;\n  let width = -1;\n  let height = -1;\n  if (type === 'step') {\n    const steps = extra.steps;\n    const strokeWidth = extra.strokeWidth;\n    if (typeof size === 'string' || typeof size === 'undefined') {\n      width = size === 'small' ? 2 : 14;\n      height = strokeWidth !== null && strokeWidth !== void 0 ? strokeWidth : 8;\n    } else if (typeof size === 'number') {\n      [width, height] = [size, size];\n    } else {\n      [width = 14, height = 8] = size;\n    }\n    width *= steps;\n  } else if (type === 'line') {\n    const strokeWidth = extra === null || extra === void 0 ? void 0 : extra.strokeWidth;\n    if (typeof size === 'string' || typeof size === 'undefined') {\n      height = strokeWidth || (size === 'small' ? 6 : 8);\n    } else if (typeof size === 'number') {\n      [width, height] = [size, size];\n    } else {\n      [width = -1, height = 8] = size;\n    }\n  } else if (type === 'circle' || type === 'dashboard') {\n    if (typeof size === 'string' || typeof size === 'undefined') {\n      [width, height] = size === 'small' ? [60, 60] : [120, 120];\n    } else if (typeof size === 'number') {\n      [width, height] = [size, size];\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        process.env.NODE_ENV !== \"production\" ? warning(false, 'Progress', 'Type \"circle\" and \"dashbord\" do not accept array as `size`, please use number or preset size instead.') : void 0;\n      }\n      width = (_b = (_a = size[0]) !== null && _a !== void 0 ? _a : size[1]) !== null && _b !== void 0 ? _b : 120;\n      height = (_d = (_c = size[0]) !== null && _c !== void 0 ? _c : size[1]) !== null && _d !== void 0 ? _d : 120;\n    }\n  }\n  return [width, height];\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}