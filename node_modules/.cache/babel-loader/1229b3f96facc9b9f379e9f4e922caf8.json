{"ast":null,"code":"/** PURE_IMPORTS_START _Observable,_AsyncSubject,_operators_map,_util_canReportError,_util_isScheduler,_util_isArray PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { map } from '../operators/map';\nimport { canReportError } from '../util/canReportError';\nimport { isScheduler } from '../util/isScheduler';\nimport { isArray } from '../util/isArray';\nexport function bindNodeCallback(callbackFunc, resultSelector, scheduler) {\n  if (resultSelector) {\n    if (isScheduler(resultSelector)) {\n      scheduler = resultSelector;\n    } else {\n      return function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        return bindNodeCallback(callbackFunc, scheduler).apply(void 0, args).pipe(map(function (args) {\n          return isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args);\n        }));\n      };\n    }\n  }\n\n  return function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var params = {\n      subject: undefined,\n      args: args,\n      callbackFunc: callbackFunc,\n      scheduler: scheduler,\n      context: this\n    };\n    return new Observable(function (subscriber) {\n      var context = params.context;\n      var subject = params.subject;\n\n      if (!scheduler) {\n        if (!subject) {\n          subject = params.subject = new AsyncSubject();\n\n          var handler = function () {\n            var innerArgs = [];\n\n            for (var _i = 0; _i < arguments.length; _i++) {\n              innerArgs[_i] = arguments[_i];\n            }\n\n            var err = innerArgs.shift();\n\n            if (err) {\n              subject.error(err);\n              return;\n            }\n\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          };\n\n          try {\n            callbackFunc.apply(context, args.concat([handler]));\n          } catch (err) {\n            if (canReportError(subject)) {\n              subject.error(err);\n            } else {\n              console.warn(err);\n            }\n          }\n        }\n\n        return subject.subscribe(subscriber);\n      } else {\n        return scheduler.schedule(dispatch, 0, {\n          params: params,\n          subscriber: subscriber,\n          context: context\n        });\n      }\n    });\n  };\n}\n\nfunction dispatch(state) {\n  var _this = this;\n\n  var params = state.params,\n      subscriber = state.subscriber,\n      context = state.context;\n  var callbackFunc = params.callbackFunc,\n      args = params.args,\n      scheduler = params.scheduler;\n  var subject = params.subject;\n\n  if (!subject) {\n    subject = params.subject = new AsyncSubject();\n\n    var handler = function () {\n      var innerArgs = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        innerArgs[_i] = arguments[_i];\n      }\n\n      var err = innerArgs.shift();\n\n      if (err) {\n        _this.add(scheduler.schedule(dispatchError, 0, {\n          err: err,\n          subject: subject\n        }));\n      } else {\n        var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n\n        _this.add(scheduler.schedule(dispatchNext, 0, {\n          value: value,\n          subject: subject\n        }));\n      }\n    };\n\n    try {\n      callbackFunc.apply(context, args.concat([handler]));\n    } catch (err) {\n      this.add(scheduler.schedule(dispatchError, 0, {\n        err: err,\n        subject: subject\n      }));\n    }\n  }\n\n  this.add(subject.subscribe(subscriber));\n}\n\nfunction dispatchNext(arg) {\n  var value = arg.value,\n      subject = arg.subject;\n  subject.next(value);\n  subject.complete();\n}\n\nfunction dispatchError(arg) {\n  var err = arg.err,\n      subject = arg.subject;\n  subject.error(err);\n}","map":{"version":3,"sources":["../../../src/internal/observable/bindNodeCallback.ts"],"names":[],"mappings":"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","sourcesContent":["/** PURE_IMPORTS_START _Observable,_AsyncSubject,_operators_map,_util_canReportError,_util_isScheduler,_util_isArray PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { map } from '../operators/map';\nimport { canReportError } from '../util/canReportError';\nimport { isScheduler } from '../util/isScheduler';\nimport { isArray } from '../util/isArray';\nexport function bindNodeCallback(callbackFunc, resultSelector, scheduler) {\n    if (resultSelector) {\n        if (isScheduler(resultSelector)) {\n            scheduler = resultSelector;\n        }\n        else {\n            return function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                return bindNodeCallback(callbackFunc, scheduler).apply(void 0, args).pipe(map(function (args) { return isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));\n            };\n        }\n    }\n    return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var params = {\n            subject: undefined,\n            args: args,\n            callbackFunc: callbackFunc,\n            scheduler: scheduler,\n            context: this,\n        };\n        return new Observable(function (subscriber) {\n            var context = params.context;\n            var subject = params.subject;\n            if (!scheduler) {\n                if (!subject) {\n                    subject = params.subject = new AsyncSubject();\n                    var handler = function () {\n                        var innerArgs = [];\n                        for (var _i = 0; _i < arguments.length; _i++) {\n                            innerArgs[_i] = arguments[_i];\n                        }\n                        var err = innerArgs.shift();\n                        if (err) {\n                            subject.error(err);\n                            return;\n                        }\n                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n                        subject.complete();\n                    };\n                    try {\n                        callbackFunc.apply(context, args.concat([handler]));\n                    }\n                    catch (err) {\n                        if (canReportError(subject)) {\n                            subject.error(err);\n                        }\n                        else {\n                            console.warn(err);\n                        }\n                    }\n                }\n                return subject.subscribe(subscriber);\n            }\n            else {\n                return scheduler.schedule(dispatch, 0, { params: params, subscriber: subscriber, context: context });\n            }\n        });\n    };\n}\nfunction dispatch(state) {\n    var _this = this;\n    var params = state.params, subscriber = state.subscriber, context = state.context;\n    var callbackFunc = params.callbackFunc, args = params.args, scheduler = params.scheduler;\n    var subject = params.subject;\n    if (!subject) {\n        subject = params.subject = new AsyncSubject();\n        var handler = function () {\n            var innerArgs = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                innerArgs[_i] = arguments[_i];\n            }\n            var err = innerArgs.shift();\n            if (err) {\n                _this.add(scheduler.schedule(dispatchError, 0, { err: err, subject: subject }));\n            }\n            else {\n                var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n                _this.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));\n            }\n        };\n        try {\n            callbackFunc.apply(context, args.concat([handler]));\n        }\n        catch (err) {\n            this.add(scheduler.schedule(dispatchError, 0, { err: err, subject: subject }));\n        }\n    }\n    this.add(subject.subscribe(subscriber));\n}\nfunction dispatchNext(arg) {\n    var value = arg.value, subject = arg.subject;\n    subject.next(value);\n    subject.complete();\n}\nfunction dispatchError(arg) {\n    var err = arg.err, subject = arg.subject;\n    subject.error(err);\n}\n//# sourceMappingURL=bindNodeCallback.js.map\n"]},"metadata":{},"sourceType":"module"}