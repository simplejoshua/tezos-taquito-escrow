{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function retry(count) {\n  if (count === void 0) {\n    count = -1;\n  }\n\n  return function (source) {\n    return source.lift(new RetryOperator(count, source));\n  };\n}\n\nvar RetryOperator = /*@__PURE__*/function () {\n  function RetryOperator(count, source) {\n    this.count = count;\n    this.source = source;\n  }\n\n  RetryOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n  };\n\n  return RetryOperator;\n}();\n\nvar RetrySubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(RetrySubscriber, _super);\n\n  function RetrySubscriber(destination, count, source) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.count = count;\n    _this.source = source;\n    return _this;\n  }\n\n  RetrySubscriber.prototype.error = function (err) {\n    if (!this.isStopped) {\n      var _a = this,\n          source = _a.source,\n          count = _a.count;\n\n      if (count === 0) {\n        return _super.prototype.error.call(this, err);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  };\n\n  return RetrySubscriber;\n}(Subscriber);","map":{"version":3,"sources":["../../../src/internal/operators/retry.ts"],"names":[],"mappings":";AACA,OAAO,KAAE,OAAT,MAAqB,OAArB;AAmDA,SAAM,UAAN,QAA2C,eAA3C;AAAyB,OAAA,SAAA,KAAA,CAAA,KAAA,EAAA;EACvB,IAAA,KAAO,KAAA,KAAC,CAAR,EAAQ;IACT,KAAA,GAAA,CAAA,CAAA;EAED;;EACE,OAAA,UAAA,MAAA,EAAoB;IAAA,OACA,MAAqB,CAAA,IAArB,CAAqB,IAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAArB,CADA;EACqB,CADzC;AAAoB;;IACA,aAAA,GAAA,aAAqB,YAAA;EACzC,SAAC,aAAD,CAAC,KAAD,EAAC,MAAD,EAAC;IAED,KAAA,KAAA,GAAA,KAAA;IACE,KAAA,MAAA,GAAc,MAAd;EACD;;EACH,aAAA,CAAA,SAAA,CAAC,IAAD,GAAC,UAAA,UAAA,EAAA,MAAA,EAAA;IAAA,OAAA,MAAA,CAAA,SAAA,CAAA,IAAA,eAAA,CAAA,UAAA,EAAA,KAAA,KAAA,EAAA,KAAA,MAAA,CAAA,CAAA;EAOD,CAPA;;EAOiC,OAAA,aAAA;AAC/B,CAdyC,E;;IAczC,eAAA,GAGE,aAAA,UAAM,MAAN,EAAkB;EAFA,OAAA,CAAA,SAAA,CAAA,eAAA,EAAa,MAAb;;EACA,SAAA,eAAA,CAAM,WAAN,EAAqB,KAArB,EAAqB,MAArB,EAAqB;;;IAExC,KAAA,CAAA,KAAA,GAAA,KAAA;IACD,KAAA,CAAA,MAAA,GAAA,MAAA;IACE,OAAK,KAAL;EACQ;;EACN,eAAI,CAAA,SAAJ,CAAiB,KAAjB,GAAiB,UAAA,GAAA,EAAA;SACf,KAAA,S,EAAO;MACR,IAAA,EAAA,GAAA,IAAA;MAAA,IAAA,MAAA,GAAA,EAAA,CAAA,MAAA;MAAA,IAAA,KAAA,GAAA,EAAA,CAAA,KAAA;;UAAM,KAAI,KAAK,C,EAAG;QACjB,OAAK,MAAQ,CAAA,SAAR,CAAkB,KAAlB,CAAkB,IAAlB,CAAkB,IAAlB,EAAkB,GAAlB,CAAL;MACD,C,MACD,IAAO,KAAA,GAAU,CAAA,CAAjB,EAAqB;QACtB,KAAA,KAAA,GAAA,KAAA,GAAA,CAAA;MACF;;MACH,MAAA,CAAA,SAAA,CAAC,KAAA,sBAAA,EAAD;IAjBiC;GAS3B;;;CALF,C,UAAA,C","sourcesContent":["/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function retry(count) {\n    if (count === void 0) {\n        count = -1;\n    }\n    return function (source) { return source.lift(new RetryOperator(count, source)); };\n}\nvar RetryOperator = /*@__PURE__*/ (function () {\n    function RetryOperator(count, source) {\n        this.count = count;\n        this.source = source;\n    }\n    RetryOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n    };\n    return RetryOperator;\n}());\nvar RetrySubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RetrySubscriber, _super);\n    function RetrySubscriber(destination, count, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.count = count;\n        _this.source = source;\n        return _this;\n    }\n    RetrySubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _a = this, source = _a.source, count = _a.count;\n            if (count === 0) {\n                return _super.prototype.error.call(this, err);\n            }\n            else if (count > -1) {\n                this.count = count - 1;\n            }\n            source.subscribe(this._unsubscribeAndRecycle());\n        }\n    };\n    return RetrySubscriber;\n}(Subscriber));\n//# sourceMappingURL=retry.js.map\n"]},"metadata":{},"sourceType":"module"}