{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subject,_scheduler_queue,_Subscription,_operators_observeOn,_util_ObjectUnsubscribedError,_SubjectSubscription PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from './Subject';\nimport { queue } from './scheduler/queue';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n\nvar ReplaySubject = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(ReplaySubject, _super);\n\n  function ReplaySubject(bufferSize, windowTime, scheduler) {\n    if (bufferSize === void 0) {\n      bufferSize = Number.POSITIVE_INFINITY;\n    }\n\n    if (windowTime === void 0) {\n      windowTime = Number.POSITIVE_INFINITY;\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.scheduler = scheduler;\n    _this._events = [];\n    _this._infiniteTimeWindow = false;\n    _this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    _this._windowTime = windowTime < 1 ? 1 : windowTime;\n\n    if (windowTime === Number.POSITIVE_INFINITY) {\n      _this._infiniteTimeWindow = true;\n      _this.next = _this.nextInfiniteTimeWindow;\n    } else {\n      _this.next = _this.nextTimeWindow;\n    }\n\n    return _this;\n  }\n\n  ReplaySubject.prototype.nextInfiniteTimeWindow = function (value) {\n    if (!this.isStopped) {\n      var _events = this._events;\n\n      _events.push(value);\n\n      if (_events.length > this._bufferSize) {\n        _events.shift();\n      }\n    }\n\n    _super.prototype.next.call(this, value);\n  };\n\n  ReplaySubject.prototype.nextTimeWindow = function (value) {\n    if (!this.isStopped) {\n      this._events.push(new ReplayEvent(this._getNow(), value));\n\n      this._trimBufferThenGetEvents();\n    }\n\n    _super.prototype.next.call(this, value);\n  };\n\n  ReplaySubject.prototype._subscribe = function (subscriber) {\n    var _infiniteTimeWindow = this._infiniteTimeWindow;\n\n    var _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();\n\n    var scheduler = this.scheduler;\n    var len = _events.length;\n    var subscription;\n\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.isStopped || this.hasError) {\n      subscription = Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      subscription = new SubjectSubscription(this, subscriber);\n    }\n\n    if (scheduler) {\n      subscriber.add(subscriber = new ObserveOnSubscriber(subscriber, scheduler));\n    }\n\n    if (_infiniteTimeWindow) {\n      for (var i = 0; i < len && !subscriber.closed; i++) {\n        subscriber.next(_events[i]);\n      }\n    } else {\n      for (var i = 0; i < len && !subscriber.closed; i++) {\n        subscriber.next(_events[i].value);\n      }\n    }\n\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n    } else if (this.isStopped) {\n      subscriber.complete();\n    }\n\n    return subscription;\n  };\n\n  ReplaySubject.prototype._getNow = function () {\n    return (this.scheduler || queue).now();\n  };\n\n  ReplaySubject.prototype._trimBufferThenGetEvents = function () {\n    var now = this._getNow();\n\n    var _bufferSize = this._bufferSize;\n    var _windowTime = this._windowTime;\n    var _events = this._events;\n    var eventsCount = _events.length;\n    var spliceCount = 0;\n\n    while (spliceCount < eventsCount) {\n      if (now - _events[spliceCount].time < _windowTime) {\n        break;\n      }\n\n      spliceCount++;\n    }\n\n    if (eventsCount > _bufferSize) {\n      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n    }\n\n    if (spliceCount > 0) {\n      _events.splice(0, spliceCount);\n    }\n\n    return _events;\n  };\n\n  return ReplaySubject;\n}(Subject);\n\nexport { ReplaySubject };\n\nvar ReplayEvent = /*@__PURE__*/function () {\n  function ReplayEvent(time, value) {\n    this.time = time;\n    this.value = value;\n  }\n\n  return ReplayEvent;\n}();","map":{"version":3,"sources":["../../src/internal/ReplaySubject.ts"],"names":[],"mappings":"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","sourcesContent":["/** PURE_IMPORTS_START tslib,_Subject,_scheduler_queue,_Subscription,_operators_observeOn,_util_ObjectUnsubscribedError,_SubjectSubscription PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from './Subject';\nimport { queue } from './scheduler/queue';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nvar ReplaySubject = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ReplaySubject, _super);\n    function ReplaySubject(bufferSize, windowTime, scheduler) {\n        if (bufferSize === void 0) {\n            bufferSize = Number.POSITIVE_INFINITY;\n        }\n        if (windowTime === void 0) {\n            windowTime = Number.POSITIVE_INFINITY;\n        }\n        var _this = _super.call(this) || this;\n        _this.scheduler = scheduler;\n        _this._events = [];\n        _this._infiniteTimeWindow = false;\n        _this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n        _this._windowTime = windowTime < 1 ? 1 : windowTime;\n        if (windowTime === Number.POSITIVE_INFINITY) {\n            _this._infiniteTimeWindow = true;\n            _this.next = _this.nextInfiniteTimeWindow;\n        }\n        else {\n            _this.next = _this.nextTimeWindow;\n        }\n        return _this;\n    }\n    ReplaySubject.prototype.nextInfiniteTimeWindow = function (value) {\n        if (!this.isStopped) {\n            var _events = this._events;\n            _events.push(value);\n            if (_events.length > this._bufferSize) {\n                _events.shift();\n            }\n        }\n        _super.prototype.next.call(this, value);\n    };\n    ReplaySubject.prototype.nextTimeWindow = function (value) {\n        if (!this.isStopped) {\n            this._events.push(new ReplayEvent(this._getNow(), value));\n            this._trimBufferThenGetEvents();\n        }\n        _super.prototype.next.call(this, value);\n    };\n    ReplaySubject.prototype._subscribe = function (subscriber) {\n        var _infiniteTimeWindow = this._infiniteTimeWindow;\n        var _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();\n        var scheduler = this.scheduler;\n        var len = _events.length;\n        var subscription;\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else if (this.isStopped || this.hasError) {\n            subscription = Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            subscription = new SubjectSubscription(this, subscriber);\n        }\n        if (scheduler) {\n            subscriber.add(subscriber = new ObserveOnSubscriber(subscriber, scheduler));\n        }\n        if (_infiniteTimeWindow) {\n            for (var i = 0; i < len && !subscriber.closed; i++) {\n                subscriber.next(_events[i]);\n            }\n        }\n        else {\n            for (var i = 0; i < len && !subscriber.closed; i++) {\n                subscriber.next(_events[i].value);\n            }\n        }\n        if (this.hasError) {\n            subscriber.error(this.thrownError);\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n        }\n        return subscription;\n    };\n    ReplaySubject.prototype._getNow = function () {\n        return (this.scheduler || queue).now();\n    };\n    ReplaySubject.prototype._trimBufferThenGetEvents = function () {\n        var now = this._getNow();\n        var _bufferSize = this._bufferSize;\n        var _windowTime = this._windowTime;\n        var _events = this._events;\n        var eventsCount = _events.length;\n        var spliceCount = 0;\n        while (spliceCount < eventsCount) {\n            if ((now - _events[spliceCount].time) < _windowTime) {\n                break;\n            }\n            spliceCount++;\n        }\n        if (eventsCount > _bufferSize) {\n            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n        }\n        if (spliceCount > 0) {\n            _events.splice(0, spliceCount);\n        }\n        return _events;\n    };\n    return ReplaySubject;\n}(Subject));\nexport { ReplaySubject };\nvar ReplayEvent = /*@__PURE__*/ (function () {\n    function ReplayEvent(time, value) {\n        this.time = time;\n        this.value = value;\n    }\n    return ReplayEvent;\n}());\n//# sourceMappingURL=ReplaySubject.js.map\n"]},"metadata":{},"sourceType":"module"}