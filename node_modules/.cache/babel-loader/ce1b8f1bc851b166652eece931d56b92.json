{"ast":null,"code":"/** PURE_IMPORTS_START _observable_ConnectableObservable PURE_IMPORTS_END */\nimport { connectableObservableDescriptor } from '../observable/ConnectableObservable';\nexport function multicast(subjectOrSubjectFactory, selector) {\n  return function multicastOperatorFunction(source) {\n    var subjectFactory;\n\n    if (typeof subjectOrSubjectFactory === 'function') {\n      subjectFactory = subjectOrSubjectFactory;\n    } else {\n      subjectFactory = function subjectFactory() {\n        return subjectOrSubjectFactory;\n      };\n    }\n\n    if (typeof selector === 'function') {\n      return source.lift(new MulticastOperator(subjectFactory, selector));\n    }\n\n    var connectable = Object.create(source, connectableObservableDescriptor);\n    connectable.source = source;\n    connectable.subjectFactory = subjectFactory;\n    return connectable;\n  };\n}\n\nvar MulticastOperator = /*@__PURE__*/function () {\n  function MulticastOperator(subjectFactory, selector) {\n    this.subjectFactory = subjectFactory;\n    this.selector = selector;\n  }\n\n  MulticastOperator.prototype.call = function (subscriber, source) {\n    var selector = this.selector;\n    var subject = this.subjectFactory();\n    var subscription = selector(subject).subscribe(subscriber);\n    subscription.add(source.subscribe(subject));\n    return subscription;\n  };\n\n  return MulticastOperator;\n}();\n\nexport { MulticastOperator };","map":{"version":3,"sources":["../../../src/internal/operators/multicast.ts"],"names":[],"mappings":"AAIA;AA6BA,SAAM,+BAAN,QAAgC,qCAAhC;AAEE,OAAA,SAAO,SAAP,CAAgB,uBAAhB,EAA0C,QAA1C,EAA+D;EAC7D,OAAA,SAAI,yBAAJ,CAAqC,MAArC,EAAqC;IACrC,IAAI,cAAJ;;QACE,OAAA,uBAAA,KAAmC,U,EAAwB;MAC5D,cAAA,GAAA,uBAAA;IAAM,C,MACL;MACE,cAAmB,GAAA,SAAA,cAAA,GAAwB;QAC3C,OAAA,uBAAA;MACH,CAFG;IAIJ;;QACE,OAAO,QAAP,KAAmB,U,EAAI;MACxB,OAAA,MAAA,CAAA,IAAA,CAAA,IAAA,iBAAA,CAAA,cAAA,EAAA,QAAA,CAAA,CAAA;IAED;;IACA,IAAA,WAAY,GAAM,MAAG,CAAA,MAAH,CAAU,MAAV,EAAU,+BAAV,CAAlB;IACA,WAAW,CAAC,MAAZ,GAAY,MAAZ;IAEA,WAAkC,CAAA,cAAlC,GAA8C,cAA9C;IACA,OAAA,WAAA;EACH,CAnBG;AAqBJ;;IACE,iBAAA,GAAA,aAAoB,YACA;EADA,SAAA,iBAAA,CAAA,cAAA,EAAgC,QAAhC,EAAgC;IAChC,KAAA,cAAA,GAAA,cAAA;IACnB,KAAA,QAAA,GAAA,QAAA;EACD;;EACU,iBAAA,CAAA,SAAA,CAAA,IAAA,GAAkB,UAAA,UAAA,EAAA,MAAA,EAAA;IAC1B,IAAM,QAAO,GAAG,KAAK,QAArB;IACA,IAAM,OAAA,GAAA,KAAe,cAAf,EAAN;IACA,IAAA,YAAgB,GAAC,QAAO,CAAA,OAAA,CAAP,CAAiB,SAAjB,CAA2B,UAA3B,CAAjB;IACA,YAAO,CAAA,GAAP,CAAO,MAAa,CAAA,SAAb,CAAa,OAAb,CAAP;IACD,OAAA,YAAA;EACH,CANY;;EAMX,OAAA,iBAAA;CAVqB,E","sourcesContent":["/** PURE_IMPORTS_START _observable_ConnectableObservable PURE_IMPORTS_END */\nimport { connectableObservableDescriptor } from '../observable/ConnectableObservable';\nexport function multicast(subjectOrSubjectFactory, selector) {\n    return function multicastOperatorFunction(source) {\n        var subjectFactory;\n        if (typeof subjectOrSubjectFactory === 'function') {\n            subjectFactory = subjectOrSubjectFactory;\n        }\n        else {\n            subjectFactory = function subjectFactory() {\n                return subjectOrSubjectFactory;\n            };\n        }\n        if (typeof selector === 'function') {\n            return source.lift(new MulticastOperator(subjectFactory, selector));\n        }\n        var connectable = Object.create(source, connectableObservableDescriptor);\n        connectable.source = source;\n        connectable.subjectFactory = subjectFactory;\n        return connectable;\n    };\n}\nvar MulticastOperator = /*@__PURE__*/ (function () {\n    function MulticastOperator(subjectFactory, selector) {\n        this.subjectFactory = subjectFactory;\n        this.selector = selector;\n    }\n    MulticastOperator.prototype.call = function (subscriber, source) {\n        var selector = this.selector;\n        var subject = this.subjectFactory();\n        var subscription = selector(subject).subscribe(subscriber);\n        subscription.add(source.subscribe(subject));\n        return subscription;\n    };\n    return MulticastOperator;\n}());\nexport { MulticastOperator };\n//# sourceMappingURL=multicast.js.map\n"]},"metadata":{},"sourceType":"module"}