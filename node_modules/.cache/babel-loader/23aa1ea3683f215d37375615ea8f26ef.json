{"ast":null,"code":"// src/index.ts\nvar hasSetup = false;\nvar modality = null;\nvar hasEventBeforeFocus = false;\nvar handlers = /* @__PURE__ */new Set();\nvar isMac = typeof window !== \"undefined\" && window.navigator != null ? /^Mac/.test(window.navigator.platform) : false;\n\nfunction isValidKey(event) {\n  return !(event.metaKey || !isMac && event.altKey || event.ctrlKey);\n}\n\nfunction trigger(modality2, event) {\n  handlers.forEach(handler => handler(modality2, event));\n}\n\nfunction onKeyboardEvent(event) {\n  hasEventBeforeFocus = true;\n\n  if (isValidKey(event)) {\n    modality = \"keyboard\";\n    trigger(\"keyboard\", event);\n  }\n}\n\nfunction onPointerEvent(event) {\n  modality = \"pointer\";\n\n  if (event.type === \"mousedown\" || event.type === \"pointerdown\") {\n    hasEventBeforeFocus = true;\n    trigger(\"pointer\", event);\n  }\n}\n\nfunction onWindowFocus(event) {\n  if (event.target === window || event.target === document) {\n    return;\n  }\n\n  if (!hasEventBeforeFocus) {\n    modality = \"keyboard\";\n    trigger(\"keyboard\", event);\n  }\n\n  hasEventBeforeFocus = false;\n}\n\nfunction onWindowBlur() {\n  hasEventBeforeFocus = false;\n}\n\nfunction isFocusVisible() {\n  return modality !== \"pointer\";\n}\n\nfunction setupGlobalFocusEvents() {\n  if (typeof window === \"undefined\" || hasSetup) {\n    return;\n  }\n\n  const {\n    focus\n  } = HTMLElement.prototype;\n\n  HTMLElement.prototype.focus = function focusElement() {\n    hasEventBeforeFocus = true;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    focus.apply(this, args);\n  };\n\n  document.addEventListener(\"keydown\", onKeyboardEvent, true);\n  document.addEventListener(\"keyup\", onKeyboardEvent, true);\n  window.addEventListener(\"focus\", onWindowFocus, true);\n  window.addEventListener(\"blur\", onWindowBlur, false);\n\n  if (typeof PointerEvent !== \"undefined\") {\n    document.addEventListener(\"pointerdown\", onPointerEvent, true);\n    document.addEventListener(\"pointermove\", onPointerEvent, true);\n    document.addEventListener(\"pointerup\", onPointerEvent, true);\n  } else {\n    document.addEventListener(\"mousedown\", onPointerEvent, true);\n    document.addEventListener(\"mousemove\", onPointerEvent, true);\n    document.addEventListener(\"mouseup\", onPointerEvent, true);\n  }\n\n  hasSetup = true;\n}\n\nfunction trackFocusVisible(fn) {\n  setupGlobalFocusEvents();\n  fn(isFocusVisible());\n\n  const handler = () => fn(isFocusVisible());\n\n  handlers.add(handler);\n  return () => {\n    handlers.delete(handler);\n  };\n}\n\nexport { trackFocusVisible };","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["type Modality = \"keyboard\" | \"pointer\"\ntype HandlerEvent = PointerEvent | MouseEvent | KeyboardEvent | FocusEvent\ntype Handler = (modality: Modality, e: HandlerEvent) => void\ntype FocusVisibleCallback = (isFocusVisible: boolean) => void\n\nlet hasSetup = false\nlet modality: Modality | null = null\nlet hasEventBeforeFocus = false\n\nconst handlers = new Set<Handler>()\n\nconst isMac = typeof window !== \"undefined\" && window.navigator != null ? /^Mac/.test(window.navigator.platform) : false\n\nfunction isValidKey(event: KeyboardEvent) {\n  return !(event.metaKey || (!isMac && event.altKey) || event.ctrlKey)\n}\n\nfunction trigger(modality: Modality, event: HandlerEvent) {\n  handlers.forEach((handler) => handler(modality, event))\n}\n\nfunction onKeyboardEvent(event: KeyboardEvent) {\n  hasEventBeforeFocus = true\n  if (isValidKey(event)) {\n    modality = \"keyboard\"\n    trigger(\"keyboard\", event)\n  }\n}\n\nfunction onPointerEvent(event: PointerEvent | MouseEvent) {\n  modality = \"pointer\"\n  if (event.type === \"mousedown\" || event.type === \"pointerdown\") {\n    hasEventBeforeFocus = true\n    trigger(\"pointer\", event)\n  }\n}\n\nfunction onWindowFocus(event: FocusEvent) {\n  // Firefox fires two extra focus events when the user first clicks into an iframe:\n  // first on the window, then on the document. We ignore these events so they don't\n  // cause keyboard focus rings to appear.\n  if (event.target === window || event.target === document) {\n    return\n  }\n\n  // If a focus event occurs without a preceding keyboard or pointer event, switch to keyboard modality.\n  // This occurs, for example, when navigating a form with the next/previous buttons on iOS.\n  if (!hasEventBeforeFocus) {\n    modality = \"keyboard\"\n    trigger(\"keyboard\", event)\n  }\n\n  hasEventBeforeFocus = false\n}\n\nfunction onWindowBlur() {\n  // When the window is blurred, reset state. This is necessary when tabbing out of the window,\n  // for example, since a subsequent focus event won't be fired.\n  hasEventBeforeFocus = false\n}\n\nfunction isFocusVisible() {\n  return modality !== \"pointer\"\n}\n\nfunction setupGlobalFocusEvents() {\n  if (typeof window === \"undefined\" || hasSetup) {\n    return\n  }\n\n  // Programmatic focus() calls shouldn't affect the current input modality.\n  // However, we need to detect other cases when a focus event occurs without\n  // a preceding user event (e.g. screen reader focus). Overriding the focus\n  // method on HTMLElement.prototype is a bit hacky, but works.\n  const { focus } = HTMLElement.prototype\n  HTMLElement.prototype.focus = function focusElement(...args) {\n    hasEventBeforeFocus = true\n    focus.apply(this, args)\n  }\n\n  document.addEventListener(\"keydown\", onKeyboardEvent, true)\n  document.addEventListener(\"keyup\", onKeyboardEvent, true)\n\n  // Register focus events on the window so they are sure to happen\n  // before React's event listeners (registered on the document).\n  window.addEventListener(\"focus\", onWindowFocus, true)\n  window.addEventListener(\"blur\", onWindowBlur, false)\n\n  if (typeof PointerEvent !== \"undefined\") {\n    document.addEventListener(\"pointerdown\", onPointerEvent, true)\n    document.addEventListener(\"pointermove\", onPointerEvent, true)\n    document.addEventListener(\"pointerup\", onPointerEvent, true)\n  } else {\n    document.addEventListener(\"mousedown\", onPointerEvent, true)\n    document.addEventListener(\"mousemove\", onPointerEvent, true)\n    document.addEventListener(\"mouseup\", onPointerEvent, true)\n  }\n\n  hasSetup = true\n}\n\nexport function trackFocusVisible(fn: FocusVisibleCallback) {\n  setupGlobalFocusEvents()\n\n  fn(isFocusVisible())\n  const handler = () => fn(isFocusVisible())\n\n  handlers.add(handler)\n  return () => {\n    handlers.delete(handler)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}