{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { StorageManager } from './StorageManager';\n/**\n * @internalapi\n *\n * The PeerManager provides CRUD functionality for peer entities and persists them to the provided storage.\n */\n\nexport class PeerManager {\n  constructor(storage, key) {\n    this.storageManager = new StorageManager(storage, key);\n  }\n\n  hasPeer(publicKey) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return (yield this.getPeer(publicKey)) ? true : false;\n    });\n  }\n\n  getPeers() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storageManager.getAll();\n    });\n  }\n\n  getPeer(publicKey) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storageManager.getOne(peer => peer.publicKey === publicKey);\n    });\n  }\n\n  addPeer(peerInfo) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storageManager.addOne(peerInfo, peer => peer.publicKey === peerInfo.publicKey);\n    });\n  }\n\n  removePeer(publicKey) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storageManager.remove(peer => peer.publicKey === publicKey);\n    });\n  }\n\n  removePeers(publicKeys) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storageManager.remove(peer => publicKeys.includes(peer.publicKey));\n    });\n  }\n\n  removeAllPeers() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storageManager.removeAll();\n    });\n  }\n\n}","map":{"version":3,"sources":["../../../src/managers/PeerManager.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAAS,cAAT,QAA0C,kBAA1C;AAEA;;;;AAIG;;AACH,OAAM,MAAO,WAAP,CAAkB;EAStB,WAAA,CAAY,OAAZ,EAA8B,GAA9B,EAAoC;IAClC,KAAK,cAAL,GAAsB,IAAI,cAAJ,CAAmB,OAAnB,EAA4B,GAA5B,CAAtB;EACD;;EAEY,OAAO,CAAC,SAAD,EAAkB;;MACpC,OAAO,CAAC,MAAM,KAAK,OAAL,CAAa,SAAb,CAAP,IAAkC,IAAlC,GAAyC,KAAhD;IACD,C;EAAA;;EAEY,QAAQ,GAAA;;MACnB,OAAO,KAAK,cAAL,CAAoB,MAApB,EAAP;IACD,C;EAAA;;EAEY,OAAO,CAAC,SAAD,EAAkB;;MACpC,OAAO,KAAK,cAAL,CAAoB,MAApB,CAA4B,IAAD,IAAU,IAAI,CAAC,SAAL,KAAmB,SAAxD,CAAP;IACD,C;EAAA;;EAEY,OAAO,CAAC,QAAD,EAA6C;;MAC/D,OAAO,KAAK,cAAL,CAAoB,MAApB,CAA2B,QAA3B,EAAsC,IAAD,IAAU,IAAI,CAAC,SAAL,KAAmB,QAAQ,CAAC,SAA3E,CAAP;IACD,C;EAAA;;EAEY,UAAU,CAAC,SAAD,EAAkB;;MACvC,OAAO,KAAK,cAAL,CAAoB,MAApB,CAA4B,IAAD,IAAU,IAAI,CAAC,SAAL,KAAmB,SAAxD,CAAP;IACD,C;EAAA;;EAEY,WAAW,CAAC,UAAD,EAAqB;;MAC3C,OAAO,KAAK,cAAL,CAAoB,MAApB,CAA4B,IAAD,IAAU,UAAU,CAAC,QAAX,CAAoB,IAAI,CAAC,SAAzB,CAArC,CAAP;IACD,C;EAAA;;EAEY,cAAc,GAAA;;MACzB,OAAO,KAAK,cAAL,CAAoB,SAApB,EAAP;IACD,C;EAAA;;AAvCqB","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { StorageManager } from './StorageManager';\n/**\n * @internalapi\n *\n * The PeerManager provides CRUD functionality for peer entities and persists them to the provided storage.\n */\nexport class PeerManager {\n    constructor(storage, key) {\n        this.storageManager = new StorageManager(storage, key);\n    }\n    hasPeer(publicKey) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return (yield this.getPeer(publicKey)) ? true : false;\n        });\n    }\n    getPeers() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.storageManager.getAll();\n        });\n    }\n    getPeer(publicKey) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.storageManager.getOne((peer) => peer.publicKey === publicKey);\n        });\n    }\n    addPeer(peerInfo) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.storageManager.addOne(peerInfo, (peer) => peer.publicKey === peerInfo.publicKey);\n        });\n    }\n    removePeer(publicKey) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.storageManager.remove((peer) => peer.publicKey === publicKey);\n        });\n    }\n    removePeers(publicKeys) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.storageManager.remove((peer) => publicKeys.includes(peer.publicKey));\n        });\n    }\n    removeAllPeers() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.storageManager.removeAll();\n        });\n    }\n}\n//# sourceMappingURL=PeerManager.js.map"]},"metadata":{},"sourceType":"module"}