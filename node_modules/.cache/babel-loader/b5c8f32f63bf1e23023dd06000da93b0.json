{"ast":null,"code":"/** PURE_IMPORTS_START _Observable,_AsyncSubject,_operators_map,_util_canReportError,_util_isArray,_util_isScheduler PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { map } from '../operators/map';\nimport { canReportError } from '../util/canReportError';\nimport { isArray } from '../util/isArray';\nimport { isScheduler } from '../util/isScheduler';\nexport function bindCallback(callbackFunc, resultSelector, scheduler) {\n  if (resultSelector) {\n    if (isScheduler(resultSelector)) {\n      scheduler = resultSelector;\n    } else {\n      return function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        return bindCallback(callbackFunc, scheduler).apply(void 0, args).pipe(map(function (args) {\n          return isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args);\n        }));\n      };\n    }\n  }\n\n  return function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var context = this;\n    var subject;\n    var params = {\n      context: context,\n      subject: subject,\n      callbackFunc: callbackFunc,\n      scheduler: scheduler\n    };\n    return new Observable(function (subscriber) {\n      if (!scheduler) {\n        if (!subject) {\n          subject = new AsyncSubject();\n\n          var handler = function () {\n            var innerArgs = [];\n\n            for (var _i = 0; _i < arguments.length; _i++) {\n              innerArgs[_i] = arguments[_i];\n            }\n\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          };\n\n          try {\n            callbackFunc.apply(context, args.concat([handler]));\n          } catch (err) {\n            if (canReportError(subject)) {\n              subject.error(err);\n            } else {\n              console.warn(err);\n            }\n          }\n        }\n\n        return subject.subscribe(subscriber);\n      } else {\n        var state = {\n          args: args,\n          subscriber: subscriber,\n          params: params\n        };\n        return scheduler.schedule(dispatch, 0, state);\n      }\n    });\n  };\n}\n\nfunction dispatch(state) {\n  var _this = this;\n\n  var self = this;\n  var args = state.args,\n      subscriber = state.subscriber,\n      params = state.params;\n  var callbackFunc = params.callbackFunc,\n      context = params.context,\n      scheduler = params.scheduler;\n  var subject = params.subject;\n\n  if (!subject) {\n    subject = params.subject = new AsyncSubject();\n\n    var handler = function () {\n      var innerArgs = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        innerArgs[_i] = arguments[_i];\n      }\n\n      var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n\n      _this.add(scheduler.schedule(dispatchNext, 0, {\n        value: value,\n        subject: subject\n      }));\n    };\n\n    try {\n      callbackFunc.apply(context, args.concat([handler]));\n    } catch (err) {\n      subject.error(err);\n    }\n  }\n\n  this.add(subject.subscribe(subscriber));\n}\n\nfunction dispatchNext(state) {\n  var value = state.value,\n      subject = state.subject;\n  subject.next(value);\n  subject.complete();\n}\n\nfunction dispatchError(state) {\n  var err = state.err,\n      subject = state.subject;\n  subject.error(err);\n}","map":{"version":3,"sources":["../../../src/internal/observable/bindCallback.ts"],"names":[],"mappings":"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","sourcesContent":["/** PURE_IMPORTS_START _Observable,_AsyncSubject,_operators_map,_util_canReportError,_util_isArray,_util_isScheduler PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { map } from '../operators/map';\nimport { canReportError } from '../util/canReportError';\nimport { isArray } from '../util/isArray';\nimport { isScheduler } from '../util/isScheduler';\nexport function bindCallback(callbackFunc, resultSelector, scheduler) {\n    if (resultSelector) {\n        if (isScheduler(resultSelector)) {\n            scheduler = resultSelector;\n        }\n        else {\n            return function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                return bindCallback(callbackFunc, scheduler).apply(void 0, args).pipe(map(function (args) { return isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));\n            };\n        }\n    }\n    return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var context = this;\n        var subject;\n        var params = {\n            context: context,\n            subject: subject,\n            callbackFunc: callbackFunc,\n            scheduler: scheduler,\n        };\n        return new Observable(function (subscriber) {\n            if (!scheduler) {\n                if (!subject) {\n                    subject = new AsyncSubject();\n                    var handler = function () {\n                        var innerArgs = [];\n                        for (var _i = 0; _i < arguments.length; _i++) {\n                            innerArgs[_i] = arguments[_i];\n                        }\n                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n                        subject.complete();\n                    };\n                    try {\n                        callbackFunc.apply(context, args.concat([handler]));\n                    }\n                    catch (err) {\n                        if (canReportError(subject)) {\n                            subject.error(err);\n                        }\n                        else {\n                            console.warn(err);\n                        }\n                    }\n                }\n                return subject.subscribe(subscriber);\n            }\n            else {\n                var state = {\n                    args: args, subscriber: subscriber, params: params,\n                };\n                return scheduler.schedule(dispatch, 0, state);\n            }\n        });\n    };\n}\nfunction dispatch(state) {\n    var _this = this;\n    var self = this;\n    var args = state.args, subscriber = state.subscriber, params = state.params;\n    var callbackFunc = params.callbackFunc, context = params.context, scheduler = params.scheduler;\n    var subject = params.subject;\n    if (!subject) {\n        subject = params.subject = new AsyncSubject();\n        var handler = function () {\n            var innerArgs = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                innerArgs[_i] = arguments[_i];\n            }\n            var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n            _this.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));\n        };\n        try {\n            callbackFunc.apply(context, args.concat([handler]));\n        }\n        catch (err) {\n            subject.error(err);\n        }\n    }\n    this.add(subject.subscribe(subscriber));\n}\nfunction dispatchNext(state) {\n    var value = state.value, subject = state.subject;\n    subject.next(value);\n    subject.complete();\n}\nfunction dispatchError(state) {\n    var err = state.err, subject = state.subject;\n    subject.error(err);\n}\n//# sourceMappingURL=bindCallback.js.map\n"]},"metadata":{},"sourceType":"module"}