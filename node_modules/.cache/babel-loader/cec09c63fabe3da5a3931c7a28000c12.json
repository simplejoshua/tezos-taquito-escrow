{"ast":null,"code":"export var ExposedPromiseStatus;\n\n(function (ExposedPromiseStatus) {\n  ExposedPromiseStatus[\"PENDING\"] = \"pending\";\n  ExposedPromiseStatus[\"RESOLVED\"] = \"resolved\";\n  ExposedPromiseStatus[\"REJECTED\"] = \"rejected\";\n})(ExposedPromiseStatus || (ExposedPromiseStatus = {}));\n\nconst notInitialized = () => {\n  throw new Error('ExposedPromise not initialized yet.');\n};\n/**\n * Exposed promise allow you to create a promise and then resolve it later, from the outside\n */\n\n\nexport class ExposedPromise {\n  constructor() {\n    this._resolve = notInitialized;\n    this._reject = notInitialized;\n    this._status = ExposedPromiseStatus.PENDING;\n    this._promise = new Promise((innerResolve, innerReject) => {\n      this._resolve = value => {\n        if (this.isSettled()) {\n          return;\n        }\n\n        this._promiseResult = value;\n        innerResolve(value);\n        this._status = ExposedPromiseStatus.RESOLVED;\n        return;\n      };\n\n      this._reject = reason => {\n        if (this.isSettled()) {\n          return;\n        }\n\n        this._promiseError = reason;\n        innerReject(reason);\n        this._status = ExposedPromiseStatus.REJECTED;\n        return;\n      };\n    });\n  }\n\n  get promise() {\n    return this._promise;\n  }\n\n  get resolve() {\n    return this._resolve;\n  }\n\n  get reject() {\n    return this._reject;\n  }\n\n  get status() {\n    return this._status;\n  }\n\n  get promiseResult() {\n    return this._promiseResult;\n  }\n\n  get promiseError() {\n    return this._promiseError;\n  }\n\n  static resolve(value) {\n    const promise = new ExposedPromise();\n    promise.resolve(value);\n    return promise;\n  }\n\n  static reject(reason) {\n    const promise = new ExposedPromise();\n    promise.reject(reason);\n    return promise;\n  }\n\n  isPending() {\n    return this.status === ExposedPromiseStatus.PENDING;\n  }\n\n  isResolved() {\n    return this.status === ExposedPromiseStatus.RESOLVED;\n  }\n\n  isRejected() {\n    return this.status === ExposedPromiseStatus.REJECTED;\n  }\n\n  isSettled() {\n    return this.isResolved() || this.isRejected();\n  }\n\n}","map":{"version":3,"sources":["../../../src/utils/exposed-promise.ts"],"names":[],"mappings":"AAAA,OAAA,IAAY,oBAAZ;;AAAA,CAAA,UAAY,oBAAZ,EAAgC;EAC9B,oBAAA,CAAA,SAAA,CAAA,GAAA,SAAA;EACA,oBAAA,CAAA,UAAA,CAAA,GAAA,UAAA;EACA,oBAAA,CAAA,UAAA,CAAA,GAAA,UAAA;AACD,CAJD,EAAY,oBAAoB,KAApB,oBAAoB,GAAA,EAAA,CAAhC;;AASA,MAAM,cAAc,GAAG,MAAY;EACjC,MAAM,IAAI,KAAJ,CAAU,qCAAV,CAAN;AACD,CAFD;AAIA;;AAEG;;;AACH,OAAM,MAAO,cAAP,CAAqB;EA6BzB,WAAA,GAAA;IA1BQ,KAAA,QAAA,GAAuB,cAAvB;IACA,KAAA,OAAA,GAAqB,cAArB;IACA,KAAA,OAAA,GAAgC,oBAAoB,CAAC,OAArD;IAyBN,KAAK,QAAL,GAAgB,IAAI,OAAJ,CAAe,CAAC,YAAD,EAA2B,WAA3B,KAA2D;MACxF,KAAK,QAAL,GAAiB,KAAD,IAAmB;QACjC,IAAI,KAAK,SAAL,EAAJ,EAAsB;UACpB;QACD;;QAED,KAAK,cAAL,GAAsB,KAAtB;QAEA,YAAY,CAAC,KAAD,CAAZ;QAEA,KAAK,OAAL,GAAe,oBAAoB,CAAC,QAApC;QAEA;MACD,CAZD;;MAaA,KAAK,OAAL,GAAgB,MAAD,IAAqB;QAClC,IAAI,KAAK,SAAL,EAAJ,EAAsB;UACpB;QACD;;QAED,KAAK,aAAL,GAAqB,MAArB;QAEA,WAAW,CAAC,MAAD,CAAX;QAEA,KAAK,OAAL,GAAe,oBAAoB,CAAC,QAApC;QAEA;MACD,CAZD;IAaD,CA3Be,CAAhB;EA4BD;;EAjDiB,IAAP,OAAO,GAAA;IAChB,OAAO,KAAK,QAAZ;EACD;;EAEiB,IAAP,OAAO,GAAA;IAChB,OAAO,KAAK,QAAZ;EACD;;EACgB,IAAN,MAAM,GAAA;IACf,OAAO,KAAK,OAAZ;EACD;;EACgB,IAAN,MAAM,GAAA;IACf,OAAO,KAAK,OAAZ;EACD;;EACuB,IAAb,aAAa,GAAA;IACtB,OAAO,KAAK,cAAZ;EACD;;EACsB,IAAZ,YAAY,GAAA;IACrB,OAAO,KAAK,aAAZ;EACD;;EAiCoB,OAAP,OAAO,CAAI,KAAJ,EAAY;IAC/B,MAAM,OAAO,GAAG,IAAI,cAAJ,EAAhB;IACA,OAAO,CAAC,OAAR,CAAgB,KAAhB;IAEA,OAAO,OAAP;EACD;;EAEmB,OAAN,MAAM,CAAyB,MAAzB,EAAmC;IACrD,MAAM,OAAO,GAAG,IAAI,cAAJ,EAAhB;IACA,OAAO,CAAC,MAAR,CAAe,MAAf;IAEA,OAAO,OAAP;EACD;;EAEM,SAAS,GAAA;IACd,OAAO,KAAK,MAAL,KAAgB,oBAAoB,CAAC,OAA5C;EACD;;EAEM,UAAU,GAAA;IACf,OAAO,KAAK,MAAL,KAAgB,oBAAoB,CAAC,QAA5C;EACD;;EAEM,UAAU,GAAA;IACf,OAAO,KAAK,MAAL,KAAgB,oBAAoB,CAAC,QAA5C;EACD;;EAEM,SAAS,GAAA;IACd,OAAO,KAAK,UAAL,MAAqB,KAAK,UAAL,EAA5B;EACD;;AAxFwB","sourceRoot":"","sourcesContent":["export var ExposedPromiseStatus;\n(function (ExposedPromiseStatus) {\n    ExposedPromiseStatus[\"PENDING\"] = \"pending\";\n    ExposedPromiseStatus[\"RESOLVED\"] = \"resolved\";\n    ExposedPromiseStatus[\"REJECTED\"] = \"rejected\";\n})(ExposedPromiseStatus || (ExposedPromiseStatus = {}));\nconst notInitialized = () => {\n    throw new Error('ExposedPromise not initialized yet.');\n};\n/**\n * Exposed promise allow you to create a promise and then resolve it later, from the outside\n */\nexport class ExposedPromise {\n    constructor() {\n        this._resolve = notInitialized;\n        this._reject = notInitialized;\n        this._status = ExposedPromiseStatus.PENDING;\n        this._promise = new Promise((innerResolve, innerReject) => {\n            this._resolve = (value) => {\n                if (this.isSettled()) {\n                    return;\n                }\n                this._promiseResult = value;\n                innerResolve(value);\n                this._status = ExposedPromiseStatus.RESOLVED;\n                return;\n            };\n            this._reject = (reason) => {\n                if (this.isSettled()) {\n                    return;\n                }\n                this._promiseError = reason;\n                innerReject(reason);\n                this._status = ExposedPromiseStatus.REJECTED;\n                return;\n            };\n        });\n    }\n    get promise() {\n        return this._promise;\n    }\n    get resolve() {\n        return this._resolve;\n    }\n    get reject() {\n        return this._reject;\n    }\n    get status() {\n        return this._status;\n    }\n    get promiseResult() {\n        return this._promiseResult;\n    }\n    get promiseError() {\n        return this._promiseError;\n    }\n    static resolve(value) {\n        const promise = new ExposedPromise();\n        promise.resolve(value);\n        return promise;\n    }\n    static reject(reason) {\n        const promise = new ExposedPromise();\n        promise.reject(reason);\n        return promise;\n    }\n    isPending() {\n        return this.status === ExposedPromiseStatus.PENDING;\n    }\n    isResolved() {\n        return this.status === ExposedPromiseStatus.RESOLVED;\n    }\n    isRejected() {\n        return this.status === ExposedPromiseStatus.REJECTED;\n    }\n    isSettled() {\n        return this.isResolved() || this.isRejected();\n    }\n}\n//# sourceMappingURL=exposed-promise.js.map"]},"metadata":{},"sourceType":"module"}