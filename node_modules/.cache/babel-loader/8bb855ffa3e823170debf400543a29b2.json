{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function mergeScan(accumulator, seed, concurrent) {\n  if (concurrent === void 0) {\n    concurrent = Number.POSITIVE_INFINITY;\n  }\n\n  return function (source) {\n    return source.lift(new MergeScanOperator(accumulator, seed, concurrent));\n  };\n}\n\nvar MergeScanOperator = /*@__PURE__*/function () {\n  function MergeScanOperator(accumulator, seed, concurrent) {\n    this.accumulator = accumulator;\n    this.seed = seed;\n    this.concurrent = concurrent;\n  }\n\n  MergeScanOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));\n  };\n\n  return MergeScanOperator;\n}();\n\nexport { MergeScanOperator };\n\nvar MergeScanSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(MergeScanSubscriber, _super);\n\n  function MergeScanSubscriber(destination, accumulator, acc, concurrent) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.accumulator = accumulator;\n    _this.acc = acc;\n    _this.concurrent = concurrent;\n    _this.hasValue = false;\n    _this.hasCompleted = false;\n    _this.buffer = [];\n    _this.active = 0;\n    _this.index = 0;\n    return _this;\n  }\n\n  MergeScanSubscriber.prototype._next = function (value) {\n    if (this.active < this.concurrent) {\n      var index = this.index++;\n      var destination = this.destination;\n      var ish = void 0;\n\n      try {\n        var accumulator = this.accumulator;\n        ish = accumulator(this.acc, value, index);\n      } catch (e) {\n        return destination.error(e);\n      }\n\n      this.active++;\n\n      this._innerSub(ish);\n    } else {\n      this.buffer.push(value);\n    }\n  };\n\n  MergeScanSubscriber.prototype._innerSub = function (ish) {\n    var innerSubscriber = new SimpleInnerSubscriber(this);\n    var destination = this.destination;\n    destination.add(innerSubscriber);\n    var innerSubscription = innerSubscribe(ish, innerSubscriber);\n\n    if (innerSubscription !== innerSubscriber) {\n      destination.add(innerSubscription);\n    }\n  };\n\n  MergeScanSubscriber.prototype._complete = function () {\n    this.hasCompleted = true;\n\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n\n      this.destination.complete();\n    }\n\n    this.unsubscribe();\n  };\n\n  MergeScanSubscriber.prototype.notifyNext = function (innerValue) {\n    var destination = this.destination;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  };\n\n  MergeScanSubscriber.prototype.notifyComplete = function () {\n    var buffer = this.buffer;\n    this.active--;\n\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n\n      this.destination.complete();\n    }\n  };\n\n  return MergeScanSubscriber;\n}(SimpleOuterSubscriber);\n\nexport { MergeScanSubscriber };","map":{"version":3,"sources":["../../../src/internal/operators/mergeScan.ts"],"names":[],"mappings":"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","sourcesContent":["/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function mergeScan(accumulator, seed, concurrent) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    return function (source) { return source.lift(new MergeScanOperator(accumulator, seed, concurrent)); };\n}\nvar MergeScanOperator = /*@__PURE__*/ (function () {\n    function MergeScanOperator(accumulator, seed, concurrent) {\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.concurrent = concurrent;\n    }\n    MergeScanOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));\n    };\n    return MergeScanOperator;\n}());\nexport { MergeScanOperator };\nvar MergeScanSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MergeScanSubscriber, _super);\n    function MergeScanSubscriber(destination, accumulator, acc, concurrent) {\n        var _this = _super.call(this, destination) || this;\n        _this.accumulator = accumulator;\n        _this.acc = acc;\n        _this.concurrent = concurrent;\n        _this.hasValue = false;\n        _this.hasCompleted = false;\n        _this.buffer = [];\n        _this.active = 0;\n        _this.index = 0;\n        return _this;\n    }\n    MergeScanSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            var index = this.index++;\n            var destination = this.destination;\n            var ish = void 0;\n            try {\n                var accumulator = this.accumulator;\n                ish = accumulator(this.acc, value, index);\n            }\n            catch (e) {\n                return destination.error(e);\n            }\n            this.active++;\n            this._innerSub(ish);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeScanSubscriber.prototype._innerSub = function (ish) {\n        var innerSubscriber = new SimpleInnerSubscriber(this);\n        var destination = this.destination;\n        destination.add(innerSubscriber);\n        var innerSubscription = innerSubscribe(ish, innerSubscriber);\n        if (innerSubscription !== innerSubscriber) {\n            destination.add(innerSubscription);\n        }\n    };\n    MergeScanSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n        this.unsubscribe();\n    };\n    MergeScanSubscriber.prototype.notifyNext = function (innerValue) {\n        var destination = this.destination;\n        this.acc = innerValue;\n        this.hasValue = true;\n        destination.next(innerValue);\n    };\n    MergeScanSubscriber.prototype.notifyComplete = function () {\n        var buffer = this.buffer;\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n    };\n    return MergeScanSubscriber;\n}(SimpleOuterSubscriber));\nexport { MergeScanSubscriber };\n//# sourceMappingURL=mergeScan.js.map\n"]},"metadata":{},"sourceType":"module"}