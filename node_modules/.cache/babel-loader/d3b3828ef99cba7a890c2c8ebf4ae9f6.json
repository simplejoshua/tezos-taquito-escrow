{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { ready, crypto_generichash } from 'libsodium-wrappers';\nimport * as bs58check from 'bs58check';\n/**\n * @internalapi\n *\n * Generate a deterministic sender identifier based on a public key\n *\n * @param publicKey\n */\n\nexport const getSenderId = publicKey => __awaiter(void 0, void 0, void 0, function* () {\n  yield ready;\n  const buffer = Buffer.from(crypto_generichash(5, Buffer.from(publicKey, 'hex')));\n  return bs58check.encode(buffer);\n});","map":{"version":3,"sources":["../../../src/utils/get-sender-id.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,KAAT,EAAgB,kBAAhB,QAA0C,oBAA1C;AACA,OAAO,KAAK,SAAZ,MAA2B,WAA3B;AAEA;;;;;;AAMG;;AACH,OAAO,MAAM,WAAW,GAAU,SAAP,IAA6C,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;EACtE,MAAM,KAAN;EAEA,MAAM,MAAM,GAAG,MAAM,CAAC,IAAP,CAAY,kBAAkB,CAAC,CAAD,EAAI,MAAM,CAAC,IAAP,CAAY,SAAZ,EAAuB,KAAvB,CAAJ,CAA9B,CAAf;EAEA,OAAO,SAAS,CAAC,MAAV,CAAiB,MAAjB,CAAP;AACD,CANuE,CAAjE","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ready, crypto_generichash } from 'libsodium-wrappers';\nimport * as bs58check from 'bs58check';\n/**\n * @internalapi\n *\n * Generate a deterministic sender identifier based on a public key\n *\n * @param publicKey\n */\nexport const getSenderId = (publicKey) => __awaiter(void 0, void 0, void 0, function* () {\n    yield ready;\n    const buffer = Buffer.from(crypto_generichash(5, Buffer.from(publicKey, 'hex')));\n    return bs58check.encode(buffer);\n});\n//# sourceMappingURL=get-sender-id.js.map"]},"metadata":{},"sourceType":"module"}