{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { MatrixRoomStatus } from '../models/MatrixRoom';\n/**\n * A service to help with matrix room management\n */\n\nexport class MatrixRoomService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n  }\n  /**\n   * Create a room\n   *\n   * @param accessToken\n   * @param config\n   */\n\n\n  createRoom(accessToken) {\n    let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.httpClient.post('/createRoom', config, {\n        accessToken\n      });\n    });\n  }\n  /**\n   * Invite a user to a room\n   *\n   * @param accessToken\n   * @param user\n   * @param room\n   */\n\n\n  inviteToRoom(accessToken, user, room) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (room.status !== MatrixRoomStatus.JOINED && room.status !== MatrixRoomStatus.UNKNOWN) {\n        return Promise.reject(`User is not a member of room ${room.id}.`);\n      }\n\n      return this.httpClient.post(`/rooms/${encodeURIComponent(room.id)}/invite`, {\n        user_id: user\n      }, {\n        accessToken\n      });\n    });\n  }\n  /**\n   * Join a specific room\n   *\n   * @param accessToken\n   * @param room\n   */\n\n\n  joinRoom(accessToken, room) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (room.status === MatrixRoomStatus.JOINED) {\n        return Promise.resolve({\n          room_id: room.id\n        });\n      }\n\n      return this.httpClient.post(`/rooms/${encodeURIComponent(room.id)}/join`, {}, {\n        accessToken\n      });\n    });\n  }\n  /**\n   * Get all joined rooms\n   *\n   * @param accessToken\n   */\n\n\n  getJoinedRooms(accessToken) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.httpClient.get(`/joined_rooms`, undefined, {\n        accessToken\n      });\n    });\n  }\n\n}","map":{"version":3,"sources":["../../../../src/matrix-client/services/MatrixRoomService.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAAqB,gBAArB,QAA6C,sBAA7C;AAMA;;AAEG;;AACH,OAAM,MAAO,iBAAP,CAAwB;EAC5B,WAAA,CAA6B,UAA7B,EAAyD;IAA5B,KAAA,UAAA,GAAA,UAAA;EAAgC;EAE7D;;;;;AAKG;;;EACU,UAAU,CACrB,WADqB,EAEe;IAAA,IAApC,MAAoC,uEAAF,EAAE;;MAEpC,OAAO,KAAK,UAAL,CAAgB,IAAhB,CAAqB,aAArB,EAAoC,MAApC,EAA4C;QAAE;MAAF,CAA5C,CAAP;IACD,C;EAAA;EAED;;;;;;AAMG;;;EACU,YAAY,CACvB,WADuB,EAEvB,IAFuB,EAGvB,IAHuB,EAGP;;MAEhB,IAAI,IAAI,CAAC,MAAL,KAAgB,gBAAgB,CAAC,MAAjC,IAA2C,IAAI,CAAC,MAAL,KAAgB,gBAAgB,CAAC,OAAhF,EAAyF;QACvF,OAAO,OAAO,CAAC,MAAR,CAAe,gCAAgC,IAAI,CAAC,EAAE,GAAtD,CAAP;MACD;;MAED,OAAO,KAAK,UAAL,CAAgB,IAAhB,CACL,UAAU,kBAAkB,CAAC,IAAI,CAAC,EAAN,CAAS,SADhC,EAEL;QAAE,OAAO,EAAE;MAAX,CAFK,EAGL;QAAE;MAAF,CAHK,CAAP;IAKD,C;EAAA;EAED;;;;;AAKG;;;EACU,QAAQ,CAAC,WAAD,EAAsB,IAAtB,EAAsC;;MACzD,IAAI,IAAI,CAAC,MAAL,KAAgB,gBAAgB,CAAC,MAArC,EAA6C;QAC3C,OAAO,OAAO,CAAC,OAAR,CAAgB;UAAE,OAAO,EAAE,IAAI,CAAC;QAAhB,CAAhB,CAAP;MACD;;MAED,OAAO,KAAK,UAAL,CAAgB,IAAhB,CAAqB,UAAU,kBAAkB,CAAC,IAAI,CAAC,EAAN,CAAS,OAA1D,EAAmE,EAAnE,EAAuE;QAAE;MAAF,CAAvE,CAAP;IACD,C;EAAA;EAED;;;;AAIG;;;EACU,cAAc,CAAC,WAAD,EAAoB;;MAC7C,OAAO,KAAK,UAAL,CAAgB,GAAhB,CAAoB,eAApB,EAAqC,SAArC,EAAgD;QAAE;MAAF,CAAhD,CAAP;IACD,C;EAAA;;AA5D2B","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { MatrixRoomStatus } from '../models/MatrixRoom';\n/**\n * A service to help with matrix room management\n */\nexport class MatrixRoomService {\n    constructor(httpClient) {\n        this.httpClient = httpClient;\n    }\n    /**\n     * Create a room\n     *\n     * @param accessToken\n     * @param config\n     */\n    createRoom(accessToken, config = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.httpClient.post('/createRoom', config, { accessToken });\n        });\n    }\n    /**\n     * Invite a user to a room\n     *\n     * @param accessToken\n     * @param user\n     * @param room\n     */\n    inviteToRoom(accessToken, user, room) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (room.status !== MatrixRoomStatus.JOINED && room.status !== MatrixRoomStatus.UNKNOWN) {\n                return Promise.reject(`User is not a member of room ${room.id}.`);\n            }\n            return this.httpClient.post(`/rooms/${encodeURIComponent(room.id)}/invite`, { user_id: user }, { accessToken });\n        });\n    }\n    /**\n     * Join a specific room\n     *\n     * @param accessToken\n     * @param room\n     */\n    joinRoom(accessToken, room) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (room.status === MatrixRoomStatus.JOINED) {\n                return Promise.resolve({ room_id: room.id });\n            }\n            return this.httpClient.post(`/rooms/${encodeURIComponent(room.id)}/join`, {}, { accessToken });\n        });\n    }\n    /**\n     * Get all joined rooms\n     *\n     * @param accessToken\n     */\n    getJoinedRooms(accessToken) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.httpClient.get(`/joined_rooms`, undefined, { accessToken });\n        });\n    }\n}\n//# sourceMappingURL=MatrixRoomService.js.map"]},"metadata":{},"sourceType":"module"}