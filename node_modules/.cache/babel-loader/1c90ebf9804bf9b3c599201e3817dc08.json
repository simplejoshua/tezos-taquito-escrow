{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { Logger } from '../utils/Logger';\nimport { ChromeStorage, LocalStorage } from '..';\nconst logger = new Logger('STORAGE');\n/**\n * Get a supported storage on this platform\n */\n\nexport const getStorage = () => __awaiter(void 0, void 0, void 0, function* () {\n  if (yield ChromeStorage.isSupported()) {\n    logger.log('getStorage', 'USING CHROME STORAGE');\n    return new ChromeStorage();\n  } else if (yield LocalStorage.isSupported()) {\n    logger.log('getStorage', 'USING LOCAL STORAGE');\n    return new LocalStorage();\n  } else {\n    throw new Error('no storage type supported');\n  }\n});","map":{"version":3,"sources":["../../../src/storage/getStorage.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,MAAT,QAAuB,iBAAvB;AACA,SAAS,aAAT,EAAwB,YAAxB,QAA4C,IAA5C;AAGA,MAAM,MAAM,GAAG,IAAI,MAAJ,CAAW,SAAX,CAAf;AAEA;;AAEG;;AACH,OAAO,MAAM,UAAU,GAA2B,MAA6B,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;EAC7E,IAAI,MAAM,aAAa,CAAC,WAAd,EAAV,EAAuC;IACrC,MAAM,CAAC,GAAP,CAAW,YAAX,EAAyB,sBAAzB;IAEA,OAAO,IAAI,aAAJ,EAAP;EACD,CAJD,MAIO,IAAI,MAAM,YAAY,CAAC,WAAb,EAAV,EAAsC;IAC3C,MAAM,CAAC,GAAP,CAAW,YAAX,EAAyB,qBAAzB;IAEA,OAAO,IAAI,YAAJ,EAAP;EACD,CAJM,MAIA;IACL,MAAM,IAAI,KAAJ,CAAU,2BAAV,CAAN;EACD;AACF,CAZ8E,CAAxE","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Logger } from '../utils/Logger';\nimport { ChromeStorage, LocalStorage } from '..';\nconst logger = new Logger('STORAGE');\n/**\n * Get a supported storage on this platform\n */\nexport const getStorage = () => __awaiter(void 0, void 0, void 0, function* () {\n    if (yield ChromeStorage.isSupported()) {\n        logger.log('getStorage', 'USING CHROME STORAGE');\n        return new ChromeStorage();\n    }\n    else if (yield LocalStorage.isSupported()) {\n        logger.log('getStorage', 'USING LOCAL STORAGE');\n        return new LocalStorage();\n    }\n    else {\n        throw new Error('no storage type supported');\n    }\n});\n//# sourceMappingURL=getStorage.js.map"]},"metadata":{},"sourceType":"module"}