{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscription,_util_subscribeToResult,_OuterSubscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nexport function bufferToggle(openings, closingSelector) {\n  return function bufferToggleOperatorFunction(source) {\n    return source.lift(new BufferToggleOperator(openings, closingSelector));\n  };\n}\n\nvar BufferToggleOperator = /*@__PURE__*/function () {\n  function BufferToggleOperator(openings, closingSelector) {\n    this.openings = openings;\n    this.closingSelector = closingSelector;\n  }\n\n  BufferToggleOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  };\n\n  return BufferToggleOperator;\n}();\n\nvar BufferToggleSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(BufferToggleSubscriber, _super);\n\n  function BufferToggleSubscriber(destination, openings, closingSelector) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.closingSelector = closingSelector;\n    _this.contexts = [];\n\n    _this.add(subscribeToResult(_this, openings));\n\n    return _this;\n  }\n\n  BufferToggleSubscriber.prototype._next = function (value) {\n    var contexts = this.contexts;\n    var len = contexts.length;\n\n    for (var i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  };\n\n  BufferToggleSubscriber.prototype._error = function (err) {\n    var contexts = this.contexts;\n\n    while (contexts.length > 0) {\n      var context_1 = contexts.shift();\n      context_1.subscription.unsubscribe();\n      context_1.buffer = null;\n      context_1.subscription = null;\n    }\n\n    this.contexts = null;\n\n    _super.prototype._error.call(this, err);\n  };\n\n  BufferToggleSubscriber.prototype._complete = function () {\n    var contexts = this.contexts;\n\n    while (contexts.length > 0) {\n      var context_2 = contexts.shift();\n      this.destination.next(context_2.buffer);\n      context_2.subscription.unsubscribe();\n      context_2.buffer = null;\n      context_2.subscription = null;\n    }\n\n    this.contexts = null;\n\n    _super.prototype._complete.call(this);\n  };\n\n  BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue) {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  };\n\n  BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {\n    this.closeBuffer(innerSub.context);\n  };\n\n  BufferToggleSubscriber.prototype.openBuffer = function (value) {\n    try {\n      var closingSelector = this.closingSelector;\n      var closingNotifier = closingSelector.call(this, value);\n\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  };\n\n  BufferToggleSubscriber.prototype.closeBuffer = function (context) {\n    var contexts = this.contexts;\n\n    if (contexts && context) {\n      var buffer = context.buffer,\n          subscription = context.subscription;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  };\n\n  BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {\n    var contexts = this.contexts;\n    var buffer = [];\n    var subscription = new Subscription();\n    var context = {\n      buffer: buffer,\n      subscription: subscription\n    };\n    contexts.push(context);\n    var innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      innerSubscription.context = context;\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  };\n\n  return BufferToggleSubscriber;\n}(OuterSubscriber);","map":{"version":3,"sources":["../../../src/internal/operators/bufferToggle.ts"],"names":[],"mappings":"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","sourcesContent":["/** PURE_IMPORTS_START tslib,_Subscription,_util_subscribeToResult,_OuterSubscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nexport function bufferToggle(openings, closingSelector) {\n    return function bufferToggleOperatorFunction(source) {\n        return source.lift(new BufferToggleOperator(openings, closingSelector));\n    };\n}\nvar BufferToggleOperator = /*@__PURE__*/ (function () {\n    function BufferToggleOperator(openings, closingSelector) {\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n    }\n    BufferToggleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n    };\n    return BufferToggleOperator;\n}());\nvar BufferToggleSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(BufferToggleSubscriber, _super);\n    function BufferToggleSubscriber(destination, openings, closingSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.closingSelector = closingSelector;\n        _this.contexts = [];\n        _this.add(subscribeToResult(_this, openings));\n        return _this;\n    }\n    BufferToggleSubscriber.prototype._next = function (value) {\n        var contexts = this.contexts;\n        var len = contexts.length;\n        for (var i = 0; i < len; i++) {\n            contexts[i].buffer.push(value);\n        }\n    };\n    BufferToggleSubscriber.prototype._error = function (err) {\n        var contexts = this.contexts;\n        while (contexts.length > 0) {\n            var context_1 = contexts.shift();\n            context_1.subscription.unsubscribe();\n            context_1.buffer = null;\n            context_1.subscription = null;\n        }\n        this.contexts = null;\n        _super.prototype._error.call(this, err);\n    };\n    BufferToggleSubscriber.prototype._complete = function () {\n        var contexts = this.contexts;\n        while (contexts.length > 0) {\n            var context_2 = contexts.shift();\n            this.destination.next(context_2.buffer);\n            context_2.subscription.unsubscribe();\n            context_2.buffer = null;\n            context_2.subscription = null;\n        }\n        this.contexts = null;\n        _super.prototype._complete.call(this);\n    };\n    BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue) {\n        outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n    };\n    BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.closeBuffer(innerSub.context);\n    };\n    BufferToggleSubscriber.prototype.openBuffer = function (value) {\n        try {\n            var closingSelector = this.closingSelector;\n            var closingNotifier = closingSelector.call(this, value);\n            if (closingNotifier) {\n                this.trySubscribe(closingNotifier);\n            }\n        }\n        catch (err) {\n            this._error(err);\n        }\n    };\n    BufferToggleSubscriber.prototype.closeBuffer = function (context) {\n        var contexts = this.contexts;\n        if (contexts && context) {\n            var buffer = context.buffer, subscription = context.subscription;\n            this.destination.next(buffer);\n            contexts.splice(contexts.indexOf(context), 1);\n            this.remove(subscription);\n            subscription.unsubscribe();\n        }\n    };\n    BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {\n        var contexts = this.contexts;\n        var buffer = [];\n        var subscription = new Subscription();\n        var context = { buffer: buffer, subscription: subscription };\n        contexts.push(context);\n        var innerSubscription = subscribeToResult(this, closingNotifier, context);\n        if (!innerSubscription || innerSubscription.closed) {\n            this.closeBuffer(context);\n        }\n        else {\n            innerSubscription.context = context;\n            this.add(innerSubscription);\n            subscription.add(innerSubscription);\n        }\n    };\n    return BufferToggleSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=bufferToggle.js.map\n"]},"metadata":{},"sourceType":"module"}