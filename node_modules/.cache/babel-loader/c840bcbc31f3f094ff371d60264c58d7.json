{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subject,_scheduler_async,_Subscriber,_util_isNumeric,_util_isScheduler PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nexport function windowTime(windowTimeSpan) {\n  var scheduler = async;\n  var windowCreationInterval = null;\n  var maxWindowSize = Number.POSITIVE_INFINITY;\n\n  if (isScheduler(arguments[3])) {\n    scheduler = arguments[3];\n  }\n\n  if (isScheduler(arguments[2])) {\n    scheduler = arguments[2];\n  } else if (isNumeric(arguments[2])) {\n    maxWindowSize = Number(arguments[2]);\n  }\n\n  if (isScheduler(arguments[1])) {\n    scheduler = arguments[1];\n  } else if (isNumeric(arguments[1])) {\n    windowCreationInterval = Number(arguments[1]);\n  }\n\n  return function windowTimeOperatorFunction(source) {\n    return source.lift(new WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n  };\n}\n\nvar WindowTimeOperator = /*@__PURE__*/function () {\n  function WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {\n    this.windowTimeSpan = windowTimeSpan;\n    this.windowCreationInterval = windowCreationInterval;\n    this.maxWindowSize = maxWindowSize;\n    this.scheduler = scheduler;\n  }\n\n  WindowTimeOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler));\n  };\n\n  return WindowTimeOperator;\n}();\n\nvar CountedSubject = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(CountedSubject, _super);\n\n  function CountedSubject() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._numberOfNextedValues = 0;\n    return _this;\n  }\n\n  CountedSubject.prototype.next = function (value) {\n    this._numberOfNextedValues++;\n\n    _super.prototype.next.call(this, value);\n  };\n\n  Object.defineProperty(CountedSubject.prototype, \"numberOfNextedValues\", {\n    get: function () {\n      return this._numberOfNextedValues;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return CountedSubject;\n}(Subject);\n\nvar WindowTimeSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(WindowTimeSubscriber, _super);\n\n  function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.destination = destination;\n    _this.windowTimeSpan = windowTimeSpan;\n    _this.windowCreationInterval = windowCreationInterval;\n    _this.maxWindowSize = maxWindowSize;\n    _this.scheduler = scheduler;\n    _this.windows = [];\n\n    var window = _this.openWindow();\n\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      var closeState = {\n        subscriber: _this,\n        window: window,\n        context: null\n      };\n      var creationState = {\n        windowTimeSpan: windowTimeSpan,\n        windowCreationInterval: windowCreationInterval,\n        subscriber: _this,\n        scheduler: scheduler\n      };\n\n      _this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n\n      _this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n    } else {\n      var timeSpanOnlyState = {\n        subscriber: _this,\n        window: window,\n        windowTimeSpan: windowTimeSpan\n      };\n\n      _this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n    }\n\n    return _this;\n  }\n\n  WindowTimeSubscriber.prototype._next = function (value) {\n    var windows = this.windows;\n    var len = windows.length;\n\n    for (var i = 0; i < len; i++) {\n      var window_1 = windows[i];\n\n      if (!window_1.closed) {\n        window_1.next(value);\n\n        if (window_1.numberOfNextedValues >= this.maxWindowSize) {\n          this.closeWindow(window_1);\n        }\n      }\n    }\n  };\n\n  WindowTimeSubscriber.prototype._error = function (err) {\n    var windows = this.windows;\n\n    while (windows.length > 0) {\n      windows.shift().error(err);\n    }\n\n    this.destination.error(err);\n  };\n\n  WindowTimeSubscriber.prototype._complete = function () {\n    var windows = this.windows;\n\n    while (windows.length > 0) {\n      var window_2 = windows.shift();\n\n      if (!window_2.closed) {\n        window_2.complete();\n      }\n    }\n\n    this.destination.complete();\n  };\n\n  WindowTimeSubscriber.prototype.openWindow = function () {\n    var window = new CountedSubject();\n    this.windows.push(window);\n    var destination = this.destination;\n    destination.next(window);\n    return window;\n  };\n\n  WindowTimeSubscriber.prototype.closeWindow = function (window) {\n    window.complete();\n    var windows = this.windows;\n    windows.splice(windows.indexOf(window), 1);\n  };\n\n  return WindowTimeSubscriber;\n}(Subscriber);\n\nfunction dispatchWindowTimeSpanOnly(state) {\n  var subscriber = state.subscriber,\n      windowTimeSpan = state.windowTimeSpan,\n      window = state.window;\n\n  if (window) {\n    subscriber.closeWindow(window);\n  }\n\n  state.window = subscriber.openWindow();\n  this.schedule(state, windowTimeSpan);\n}\n\nfunction dispatchWindowCreation(state) {\n  var windowTimeSpan = state.windowTimeSpan,\n      subscriber = state.subscriber,\n      scheduler = state.scheduler,\n      windowCreationInterval = state.windowCreationInterval;\n  var window = subscriber.openWindow();\n  var action = this;\n  var context = {\n    action: action,\n    subscription: null\n  };\n  var timeSpanState = {\n    subscriber: subscriber,\n    window: window,\n    context: context\n  };\n  context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n  action.add(context.subscription);\n  action.schedule(state, windowCreationInterval);\n}\n\nfunction dispatchWindowClose(state) {\n  var subscriber = state.subscriber,\n      window = state.window,\n      context = state.context;\n\n  if (context && context.action && context.subscription) {\n    context.action.remove(context.subscription);\n  }\n\n  subscriber.closeWindow(window);\n}","map":{"version":3,"sources":["../../../src/internal/operators/windowTime.ts"],"names":[],"mappings":"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","sourcesContent":["/** PURE_IMPORTS_START tslib,_Subject,_scheduler_async,_Subscriber,_util_isNumeric,_util_isScheduler PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nexport function windowTime(windowTimeSpan) {\n    var scheduler = async;\n    var windowCreationInterval = null;\n    var maxWindowSize = Number.POSITIVE_INFINITY;\n    if (isScheduler(arguments[3])) {\n        scheduler = arguments[3];\n    }\n    if (isScheduler(arguments[2])) {\n        scheduler = arguments[2];\n    }\n    else if (isNumeric(arguments[2])) {\n        maxWindowSize = Number(arguments[2]);\n    }\n    if (isScheduler(arguments[1])) {\n        scheduler = arguments[1];\n    }\n    else if (isNumeric(arguments[1])) {\n        windowCreationInterval = Number(arguments[1]);\n    }\n    return function windowTimeOperatorFunction(source) {\n        return source.lift(new WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n    };\n}\nvar WindowTimeOperator = /*@__PURE__*/ (function () {\n    function WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {\n        this.windowTimeSpan = windowTimeSpan;\n        this.windowCreationInterval = windowCreationInterval;\n        this.maxWindowSize = maxWindowSize;\n        this.scheduler = scheduler;\n    }\n    WindowTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler));\n    };\n    return WindowTimeOperator;\n}());\nvar CountedSubject = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(CountedSubject, _super);\n    function CountedSubject() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._numberOfNextedValues = 0;\n        return _this;\n    }\n    CountedSubject.prototype.next = function (value) {\n        this._numberOfNextedValues++;\n        _super.prototype.next.call(this, value);\n    };\n    Object.defineProperty(CountedSubject.prototype, \"numberOfNextedValues\", {\n        get: function () {\n            return this._numberOfNextedValues;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return CountedSubject;\n}(Subject));\nvar WindowTimeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(WindowTimeSubscriber, _super);\n    function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        _this.windowTimeSpan = windowTimeSpan;\n        _this.windowCreationInterval = windowCreationInterval;\n        _this.maxWindowSize = maxWindowSize;\n        _this.scheduler = scheduler;\n        _this.windows = [];\n        var window = _this.openWindow();\n        if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n            var closeState = { subscriber: _this, window: window, context: null };\n            var creationState = { windowTimeSpan: windowTimeSpan, windowCreationInterval: windowCreationInterval, subscriber: _this, scheduler: scheduler };\n            _this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n            _this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n        }\n        else {\n            var timeSpanOnlyState = { subscriber: _this, window: window, windowTimeSpan: windowTimeSpan };\n            _this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n        }\n        return _this;\n    }\n    WindowTimeSubscriber.prototype._next = function (value) {\n        var windows = this.windows;\n        var len = windows.length;\n        for (var i = 0; i < len; i++) {\n            var window_1 = windows[i];\n            if (!window_1.closed) {\n                window_1.next(value);\n                if (window_1.numberOfNextedValues >= this.maxWindowSize) {\n                    this.closeWindow(window_1);\n                }\n            }\n        }\n    };\n    WindowTimeSubscriber.prototype._error = function (err) {\n        var windows = this.windows;\n        while (windows.length > 0) {\n            windows.shift().error(err);\n        }\n        this.destination.error(err);\n    };\n    WindowTimeSubscriber.prototype._complete = function () {\n        var windows = this.windows;\n        while (windows.length > 0) {\n            var window_2 = windows.shift();\n            if (!window_2.closed) {\n                window_2.complete();\n            }\n        }\n        this.destination.complete();\n    };\n    WindowTimeSubscriber.prototype.openWindow = function () {\n        var window = new CountedSubject();\n        this.windows.push(window);\n        var destination = this.destination;\n        destination.next(window);\n        return window;\n    };\n    WindowTimeSubscriber.prototype.closeWindow = function (window) {\n        window.complete();\n        var windows = this.windows;\n        windows.splice(windows.indexOf(window), 1);\n    };\n    return WindowTimeSubscriber;\n}(Subscriber));\nfunction dispatchWindowTimeSpanOnly(state) {\n    var subscriber = state.subscriber, windowTimeSpan = state.windowTimeSpan, window = state.window;\n    if (window) {\n        subscriber.closeWindow(window);\n    }\n    state.window = subscriber.openWindow();\n    this.schedule(state, windowTimeSpan);\n}\nfunction dispatchWindowCreation(state) {\n    var windowTimeSpan = state.windowTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler, windowCreationInterval = state.windowCreationInterval;\n    var window = subscriber.openWindow();\n    var action = this;\n    var context = { action: action, subscription: null };\n    var timeSpanState = { subscriber: subscriber, window: window, context: context };\n    context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n    action.add(context.subscription);\n    action.schedule(state, windowCreationInterval);\n}\nfunction dispatchWindowClose(state) {\n    var subscriber = state.subscriber, window = state.window, context = state.context;\n    if (context && context.action && context.subscription) {\n        context.action.remove(context.subscription);\n    }\n    subscriber.closeWindow(window);\n}\n//# sourceMappingURL=windowTime.js.map\n"]},"metadata":{},"sourceType":"module"}