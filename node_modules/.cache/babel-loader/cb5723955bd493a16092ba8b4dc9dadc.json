{"ast":null,"code":"\"use strict\"; // Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar system_1 = require(\"./source/system\");\n\nvar binary_1 = require(\"@stablelib/binary\");\n\nvar wipe_1 = require(\"@stablelib/wipe\");\n\nexports.defaultRandomSource = new system_1.SystemRandomSource();\n\nfunction randomBytes(length, prng) {\n  if (prng === void 0) {\n    prng = exports.defaultRandomSource;\n  }\n\n  return prng.randomBytes(length);\n}\n\nexports.randomBytes = randomBytes;\n/**\n * Returns a uniformly random unsigned 32-bit integer.\n */\n\nfunction randomUint32(prng) {\n  if (prng === void 0) {\n    prng = exports.defaultRandomSource;\n  } // Generate 4-byte random buffer.\n\n\n  var buf = randomBytes(4, prng); // Convert bytes from buffer into a 32-bit integer.\n  // It's not important which byte order to use, since\n  // the result is random.\n\n  var result = binary_1.readUint32LE(buf); // Clean the buffer.\n\n  wipe_1.wipe(buf);\n  return result;\n}\n\nexports.randomUint32 = randomUint32;\n/** 62 alphanumeric characters for default charset of randomString() */\n\nvar ALPHANUMERIC = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n/**\n * Returns a uniform random string of the given length\n * with characters from the given charset.\n *\n * Charset must not have more than 256 characters.\n *\n * Default charset generates case-sensitive alphanumeric\n * strings (0-9, A-Z, a-z).\n */\n\nfunction randomString(length, charset, prng) {\n  if (charset === void 0) {\n    charset = ALPHANUMERIC;\n  }\n\n  if (prng === void 0) {\n    prng = exports.defaultRandomSource;\n  }\n\n  if (charset.length < 2) {\n    throw new Error(\"randomString charset is too short\");\n  }\n\n  if (charset.length > 256) {\n    throw new Error(\"randomString charset is too long\");\n  }\n\n  var out = '';\n  var charsLen = charset.length;\n  var maxByte = 256 - 256 % charsLen;\n\n  while (length > 0) {\n    var buf = randomBytes(Math.ceil(length * 256 / maxByte), prng);\n\n    for (var i = 0; i < buf.length && length > 0; i++) {\n      var randomByte = buf[i];\n\n      if (randomByte < maxByte) {\n        out += charset.charAt(randomByte % charsLen);\n        length--;\n      }\n    }\n\n    wipe_1.wipe(buf);\n  }\n\n  return out;\n}\n\nexports.randomString = randomString;\n/**\n * Returns uniform random string containing at least the given\n * number of bits of entropy.\n *\n * For example, randomStringForEntropy(128) will return a 22-character\n * alphanumeric string, while randomStringForEntropy(128, \"0123456789\")\n * will return a 39-character numeric string, both will contain at\n * least 128 bits of entropy.\n *\n * Default charset generates case-sensitive alphanumeric\n * strings (0-9, A-Z, a-z).\n */\n\nfunction randomStringForEntropy(bits, charset, prng) {\n  if (charset === void 0) {\n    charset = ALPHANUMERIC;\n  }\n\n  if (prng === void 0) {\n    prng = exports.defaultRandomSource;\n  }\n\n  var length = Math.ceil(bits / (Math.log(charset.length) / Math.LN2));\n  return randomString(length, charset, prng);\n}\n\nexports.randomStringForEntropy = randomStringForEntropy;","map":{"version":3,"sources":["../random.ts"],"names":[],"mappings":"cAAA;AACA;;;;;;AAQA,IAAA,QAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,IAAA,QAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AAIa,OAAA,CAAA,mBAAA,GAAsB,IAAI,QAAA,CAAA,kBAAJ,EAAtB;;AAEb,SAAgB,WAAhB,CAA4B,MAA5B,EAA4C,IAA5C,EAAoF;EAAxC,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA;IAAA,IAAA,GAAqB,OAAA,CAAA,mBAArB;EAAwC;;EAChF,OAAO,IAAI,CAAC,WAAL,CAAiB,MAAjB,CAAP;AACH;;AAFD,OAAA,CAAA,WAAA,GAAA,WAAA;AAIA;;AAEG;;AACH,SAAgB,YAAhB,CAA6B,IAA7B,EAAqE;EAAxC,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA;IAAA,IAAA,GAAqB,OAAA,CAAA,mBAArB;EAAwC,CAAA,CACjE;;;EACA,IAAM,GAAG,GAAG,WAAW,CAAC,CAAD,EAAI,IAAJ,CAAvB,CAFiE,CAIjE;EACA;EACA;;EACA,IAAM,MAAM,GAAG,QAAA,CAAA,YAAA,CAAa,GAAb,CAAf,CAPiE,CASjE;;EACA,MAAA,CAAA,IAAA,CAAK,GAAL;EAEA,OAAO,MAAP;AACH;;AAbD,OAAA,CAAA,YAAA,GAAA,YAAA;AAeA;;AACA,IAAM,YAAY,GAAG,gEAArB;AAEA;;;;;;;;AAQG;;AACH,SAAgB,YAAhB,CACI,MADJ,EAEI,OAFJ,EAGI,IAHJ,EAG4C;EADxC,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA;IAAA,OAAA,GAAA,YAAA;EAAsB;;EACtB,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA;IAAA,IAAA,GAAqB,OAAA,CAAA,mBAArB;EAAwC;;EAExC,IAAI,OAAO,CAAC,MAAR,GAAiB,CAArB,EAAwB;IACpB,MAAM,IAAI,KAAJ,CAAU,mCAAV,CAAN;EACH;;EACD,IAAI,OAAO,CAAC,MAAR,GAAiB,GAArB,EAA0B;IACtB,MAAM,IAAI,KAAJ,CAAU,kCAAV,CAAN;EACH;;EACD,IAAI,GAAG,GAAG,EAAV;EACA,IAAM,QAAQ,GAAG,OAAO,CAAC,MAAzB;EACA,IAAM,OAAO,GAAG,MAAO,MAAM,QAA7B;;EACA,OAAO,MAAM,GAAG,CAAhB,EAAmB;IACf,IAAM,GAAG,GAAG,WAAW,CAAC,IAAI,CAAC,IAAL,CAAU,MAAM,GAAG,GAAT,GAAe,OAAzB,CAAD,EAAoC,IAApC,CAAvB;;IACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,GAAG,CAAC,MAAR,IAAkB,MAAM,GAAG,CAA3C,EAA8C,CAAC,EAA/C,EAAmD;MAC/C,IAAM,UAAU,GAAG,GAAG,CAAC,CAAD,CAAtB;;MACA,IAAI,UAAU,GAAG,OAAjB,EAA0B;QACtB,GAAG,IAAI,OAAO,CAAC,MAAR,CAAe,UAAU,GAAG,QAA5B,CAAP;QACA,MAAM;MACT;IACJ;;IACD,MAAA,CAAA,IAAA,CAAK,GAAL;EACH;;EACD,OAAO,GAAP;AACH;;AA1BD,OAAA,CAAA,YAAA,GAAA,YAAA;AA4BA;;;;;;;;;;;AAWG;;AACH,SAAgB,sBAAhB,CACI,IADJ,EAEI,OAFJ,EAGI,IAHJ,EAG4C;EADxC,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA;IAAA,OAAA,GAAA,YAAA;EAAsB;;EACtB,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA;IAAA,IAAA,GAAqB,OAAA,CAAA,mBAArB;EAAwC;;EAExC,IAAM,MAAM,GAAG,IAAI,CAAC,IAAL,CAAU,IAAI,IAAI,IAAI,CAAC,GAAL,CAAS,OAAO,CAAC,MAAjB,IAA2B,IAAI,CAAC,GAApC,CAAd,CAAf;EACA,OAAO,YAAY,CAAC,MAAD,EAAS,OAAT,EAAkB,IAAlB,CAAnB;AACH;;AAPD,OAAA,CAAA,sBAAA,GAAA,sBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar system_1 = require(\"./source/system\");\nvar binary_1 = require(\"@stablelib/binary\");\nvar wipe_1 = require(\"@stablelib/wipe\");\nexports.defaultRandomSource = new system_1.SystemRandomSource();\nfunction randomBytes(length, prng) {\n    if (prng === void 0) { prng = exports.defaultRandomSource; }\n    return prng.randomBytes(length);\n}\nexports.randomBytes = randomBytes;\n/**\n * Returns a uniformly random unsigned 32-bit integer.\n */\nfunction randomUint32(prng) {\n    if (prng === void 0) { prng = exports.defaultRandomSource; }\n    // Generate 4-byte random buffer.\n    var buf = randomBytes(4, prng);\n    // Convert bytes from buffer into a 32-bit integer.\n    // It's not important which byte order to use, since\n    // the result is random.\n    var result = binary_1.readUint32LE(buf);\n    // Clean the buffer.\n    wipe_1.wipe(buf);\n    return result;\n}\nexports.randomUint32 = randomUint32;\n/** 62 alphanumeric characters for default charset of randomString() */\nvar ALPHANUMERIC = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n/**\n * Returns a uniform random string of the given length\n * with characters from the given charset.\n *\n * Charset must not have more than 256 characters.\n *\n * Default charset generates case-sensitive alphanumeric\n * strings (0-9, A-Z, a-z).\n */\nfunction randomString(length, charset, prng) {\n    if (charset === void 0) { charset = ALPHANUMERIC; }\n    if (prng === void 0) { prng = exports.defaultRandomSource; }\n    if (charset.length < 2) {\n        throw new Error(\"randomString charset is too short\");\n    }\n    if (charset.length > 256) {\n        throw new Error(\"randomString charset is too long\");\n    }\n    var out = '';\n    var charsLen = charset.length;\n    var maxByte = 256 - (256 % charsLen);\n    while (length > 0) {\n        var buf = randomBytes(Math.ceil(length * 256 / maxByte), prng);\n        for (var i = 0; i < buf.length && length > 0; i++) {\n            var randomByte = buf[i];\n            if (randomByte < maxByte) {\n                out += charset.charAt(randomByte % charsLen);\n                length--;\n            }\n        }\n        wipe_1.wipe(buf);\n    }\n    return out;\n}\nexports.randomString = randomString;\n/**\n * Returns uniform random string containing at least the given\n * number of bits of entropy.\n *\n * For example, randomStringForEntropy(128) will return a 22-character\n * alphanumeric string, while randomStringForEntropy(128, \"0123456789\")\n * will return a 39-character numeric string, both will contain at\n * least 128 bits of entropy.\n *\n * Default charset generates case-sensitive alphanumeric\n * strings (0-9, A-Z, a-z).\n */\nfunction randomStringForEntropy(bits, charset, prng) {\n    if (charset === void 0) { charset = ALPHANUMERIC; }\n    if (prng === void 0) { prng = exports.defaultRandomSource; }\n    var length = Math.ceil(bits / (Math.log(charset.length) / Math.LN2));\n    return randomString(length, charset, prng);\n}\nexports.randomStringForEntropy = randomStringForEntropy;\n//# sourceMappingURL=random.js.map"]},"metadata":{},"sourceType":"script"}