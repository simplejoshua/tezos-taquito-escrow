{"ast":null,"code":"import { getArrowOffset } from '../style/placementArrow';\nexport function getOverflowOptions(placement, arrowOffset, arrowWidth, autoAdjustOverflow) {\n  if (autoAdjustOverflow === false) {\n    return {\n      adjustX: false,\n      adjustY: false\n    };\n  }\n\n  const overflow = autoAdjustOverflow && typeof autoAdjustOverflow === 'object' ? autoAdjustOverflow : {};\n  const baseOverflow = {};\n\n  switch (placement) {\n    case 'top':\n    case 'bottom':\n      baseOverflow.shiftX = arrowOffset.dropdownArrowOffset * 2 + arrowWidth;\n      break;\n\n    case 'left':\n    case 'right':\n      baseOverflow.shiftY = arrowOffset.dropdownArrowOffsetVertical * 2 + arrowWidth;\n      break;\n  }\n\n  const mergedOverflow = Object.assign(Object.assign({}, baseOverflow), overflow); // Support auto shift\n\n  if (!mergedOverflow.shiftX) {\n    mergedOverflow.adjustX = true;\n  }\n\n  if (!mergedOverflow.shiftY) {\n    mergedOverflow.adjustY = true;\n  }\n\n  return mergedOverflow;\n}\nconst PlacementAlignMap = {\n  left: {\n    points: ['cr', 'cl']\n  },\n  right: {\n    points: ['cl', 'cr']\n  },\n  top: {\n    points: ['bc', 'tc']\n  },\n  bottom: {\n    points: ['tc', 'bc']\n  },\n  topLeft: {\n    points: ['bl', 'tl']\n  },\n  leftTop: {\n    points: ['tr', 'tl']\n  },\n  topRight: {\n    points: ['br', 'tr']\n  },\n  rightTop: {\n    points: ['tl', 'tr']\n  },\n  bottomRight: {\n    points: ['tr', 'br']\n  },\n  rightBottom: {\n    points: ['bl', 'br']\n  },\n  bottomLeft: {\n    points: ['tl', 'bl']\n  },\n  leftBottom: {\n    points: ['br', 'bl']\n  }\n};\nconst ArrowCenterPlacementAlignMap = {\n  topLeft: {\n    points: ['bl', 'tc']\n  },\n  leftTop: {\n    points: ['tr', 'cl']\n  },\n  topRight: {\n    points: ['br', 'tc']\n  },\n  rightTop: {\n    points: ['tl', 'cr']\n  },\n  bottomRight: {\n    points: ['tr', 'bc']\n  },\n  rightBottom: {\n    points: ['bl', 'cr']\n  },\n  bottomLeft: {\n    points: ['tl', 'bc']\n  },\n  leftBottom: {\n    points: ['br', 'cl']\n  }\n};\nconst DisableAutoArrowList = new Set(['topLeft', 'topRight', 'bottomLeft', 'bottomRight', 'leftTop', 'leftBottom', 'rightTop', 'rightBottom']);\nexport default function getPlacements(config) {\n  const {\n    arrowWidth,\n    autoAdjustOverflow,\n    arrowPointAtCenter,\n    offset,\n    borderRadius\n  } = config;\n  const halfArrowWidth = arrowWidth / 2;\n  const placementMap = {};\n  Object.keys(PlacementAlignMap).forEach(key => {\n    const template = arrowPointAtCenter && ArrowCenterPlacementAlignMap[key] || PlacementAlignMap[key];\n    const placementInfo = Object.assign(Object.assign({}, template), {\n      offset: [0, 0]\n    });\n    placementMap[key] = placementInfo; // Disable autoArrow since design is fixed position\n\n    if (DisableAutoArrowList.has(key)) {\n      placementInfo.autoArrow = false;\n    } // Static offset\n\n\n    switch (key) {\n      case 'top':\n      case 'topLeft':\n      case 'topRight':\n        placementInfo.offset[1] = -halfArrowWidth - offset;\n        break;\n\n      case 'bottom':\n      case 'bottomLeft':\n      case 'bottomRight':\n        placementInfo.offset[1] = halfArrowWidth + offset;\n        break;\n\n      case 'left':\n      case 'leftTop':\n      case 'leftBottom':\n        placementInfo.offset[0] = -halfArrowWidth - offset;\n        break;\n\n      case 'right':\n      case 'rightTop':\n      case 'rightBottom':\n        placementInfo.offset[0] = halfArrowWidth + offset;\n        break;\n    } // Dynamic offset\n\n\n    const arrowOffset = getArrowOffset({\n      contentRadius: borderRadius,\n      limitVerticalRadius: true\n    });\n\n    if (arrowPointAtCenter) {\n      switch (key) {\n        case 'topLeft':\n        case 'bottomLeft':\n          placementInfo.offset[0] = -arrowOffset.dropdownArrowOffset - halfArrowWidth;\n          break;\n\n        case 'topRight':\n        case 'bottomRight':\n          placementInfo.offset[0] = arrowOffset.dropdownArrowOffset + halfArrowWidth;\n          break;\n\n        case 'leftTop':\n        case 'rightTop':\n          placementInfo.offset[1] = -arrowOffset.dropdownArrowOffset - halfArrowWidth;\n          break;\n\n        case 'leftBottom':\n        case 'rightBottom':\n          placementInfo.offset[1] = arrowOffset.dropdownArrowOffset + halfArrowWidth;\n          break;\n      }\n    } // Overflow\n\n\n    placementInfo.overflow = getOverflowOptions(key, arrowOffset, arrowWidth, autoAdjustOverflow);\n  });\n  return placementMap;\n}","map":{"version":3,"names":["getArrowOffset","getOverflowOptions","placement","arrowOffset","arrowWidth","autoAdjustOverflow","adjustX","adjustY","overflow","baseOverflow","shiftX","dropdownArrowOffset","shiftY","dropdownArrowOffsetVertical","mergedOverflow","Object","assign","PlacementAlignMap","left","points","right","top","bottom","topLeft","leftTop","topRight","rightTop","bottomRight","rightBottom","bottomLeft","leftBottom","ArrowCenterPlacementAlignMap","DisableAutoArrowList","Set","getPlacements","config","arrowPointAtCenter","offset","borderRadius","halfArrowWidth","placementMap","keys","forEach","key","template","placementInfo","has","autoArrow","contentRadius","limitVerticalRadius"],"sources":["C:/Users/Joshua Doros/Desktop/Tezos/tezos-taquito-escrow/node_modules/antd/es/_util/placements.js"],"sourcesContent":["import { getArrowOffset } from '../style/placementArrow';\nexport function getOverflowOptions(placement, arrowOffset, arrowWidth, autoAdjustOverflow) {\n  if (autoAdjustOverflow === false) {\n    return {\n      adjustX: false,\n      adjustY: false\n    };\n  }\n  const overflow = autoAdjustOverflow && typeof autoAdjustOverflow === 'object' ? autoAdjustOverflow : {};\n  const baseOverflow = {};\n  switch (placement) {\n    case 'top':\n    case 'bottom':\n      baseOverflow.shiftX = arrowOffset.dropdownArrowOffset * 2 + arrowWidth;\n      break;\n    case 'left':\n    case 'right':\n      baseOverflow.shiftY = arrowOffset.dropdownArrowOffsetVertical * 2 + arrowWidth;\n      break;\n  }\n  const mergedOverflow = Object.assign(Object.assign({}, baseOverflow), overflow);\n  // Support auto shift\n  if (!mergedOverflow.shiftX) {\n    mergedOverflow.adjustX = true;\n  }\n  if (!mergedOverflow.shiftY) {\n    mergedOverflow.adjustY = true;\n  }\n  return mergedOverflow;\n}\nconst PlacementAlignMap = {\n  left: {\n    points: ['cr', 'cl']\n  },\n  right: {\n    points: ['cl', 'cr']\n  },\n  top: {\n    points: ['bc', 'tc']\n  },\n  bottom: {\n    points: ['tc', 'bc']\n  },\n  topLeft: {\n    points: ['bl', 'tl']\n  },\n  leftTop: {\n    points: ['tr', 'tl']\n  },\n  topRight: {\n    points: ['br', 'tr']\n  },\n  rightTop: {\n    points: ['tl', 'tr']\n  },\n  bottomRight: {\n    points: ['tr', 'br']\n  },\n  rightBottom: {\n    points: ['bl', 'br']\n  },\n  bottomLeft: {\n    points: ['tl', 'bl']\n  },\n  leftBottom: {\n    points: ['br', 'bl']\n  }\n};\nconst ArrowCenterPlacementAlignMap = {\n  topLeft: {\n    points: ['bl', 'tc']\n  },\n  leftTop: {\n    points: ['tr', 'cl']\n  },\n  topRight: {\n    points: ['br', 'tc']\n  },\n  rightTop: {\n    points: ['tl', 'cr']\n  },\n  bottomRight: {\n    points: ['tr', 'bc']\n  },\n  rightBottom: {\n    points: ['bl', 'cr']\n  },\n  bottomLeft: {\n    points: ['tl', 'bc']\n  },\n  leftBottom: {\n    points: ['br', 'cl']\n  }\n};\nconst DisableAutoArrowList = new Set(['topLeft', 'topRight', 'bottomLeft', 'bottomRight', 'leftTop', 'leftBottom', 'rightTop', 'rightBottom']);\nexport default function getPlacements(config) {\n  const {\n    arrowWidth,\n    autoAdjustOverflow,\n    arrowPointAtCenter,\n    offset,\n    borderRadius\n  } = config;\n  const halfArrowWidth = arrowWidth / 2;\n  const placementMap = {};\n  Object.keys(PlacementAlignMap).forEach(key => {\n    const template = arrowPointAtCenter && ArrowCenterPlacementAlignMap[key] || PlacementAlignMap[key];\n    const placementInfo = Object.assign(Object.assign({}, template), {\n      offset: [0, 0]\n    });\n    placementMap[key] = placementInfo;\n    // Disable autoArrow since design is fixed position\n    if (DisableAutoArrowList.has(key)) {\n      placementInfo.autoArrow = false;\n    }\n    // Static offset\n    switch (key) {\n      case 'top':\n      case 'topLeft':\n      case 'topRight':\n        placementInfo.offset[1] = -halfArrowWidth - offset;\n        break;\n      case 'bottom':\n      case 'bottomLeft':\n      case 'bottomRight':\n        placementInfo.offset[1] = halfArrowWidth + offset;\n        break;\n      case 'left':\n      case 'leftTop':\n      case 'leftBottom':\n        placementInfo.offset[0] = -halfArrowWidth - offset;\n        break;\n      case 'right':\n      case 'rightTop':\n      case 'rightBottom':\n        placementInfo.offset[0] = halfArrowWidth + offset;\n        break;\n    }\n    // Dynamic offset\n    const arrowOffset = getArrowOffset({\n      contentRadius: borderRadius,\n      limitVerticalRadius: true\n    });\n    if (arrowPointAtCenter) {\n      switch (key) {\n        case 'topLeft':\n        case 'bottomLeft':\n          placementInfo.offset[0] = -arrowOffset.dropdownArrowOffset - halfArrowWidth;\n          break;\n        case 'topRight':\n        case 'bottomRight':\n          placementInfo.offset[0] = arrowOffset.dropdownArrowOffset + halfArrowWidth;\n          break;\n        case 'leftTop':\n        case 'rightTop':\n          placementInfo.offset[1] = -arrowOffset.dropdownArrowOffset - halfArrowWidth;\n          break;\n        case 'leftBottom':\n        case 'rightBottom':\n          placementInfo.offset[1] = arrowOffset.dropdownArrowOffset + halfArrowWidth;\n          break;\n      }\n    }\n    // Overflow\n    placementInfo.overflow = getOverflowOptions(key, arrowOffset, arrowWidth, autoAdjustOverflow);\n  });\n  return placementMap;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}