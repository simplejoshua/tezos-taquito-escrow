{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\nexport function takeLast(count) {\n  return function takeLastOperatorFunction(source) {\n    if (count === 0) {\n      return empty();\n    } else {\n      return source.lift(new TakeLastOperator(count));\n    }\n  };\n}\n\nvar TakeLastOperator = /*@__PURE__*/function () {\n  function TakeLastOperator(total) {\n    this.total = total;\n\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError();\n    }\n  }\n\n  TakeLastOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  };\n\n  return TakeLastOperator;\n}();\n\nvar TakeLastSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(TakeLastSubscriber, _super);\n\n  function TakeLastSubscriber(destination, total) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.total = total;\n    _this.ring = new Array();\n    _this.count = 0;\n    return _this;\n  }\n\n  TakeLastSubscriber.prototype._next = function (value) {\n    var ring = this.ring;\n    var total = this.total;\n    var count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      var index = count % total;\n      ring[index] = value;\n    }\n  };\n\n  TakeLastSubscriber.prototype._complete = function () {\n    var destination = this.destination;\n    var count = this.count;\n\n    if (count > 0) {\n      var total = this.count >= this.total ? this.total : this.count;\n      var ring = this.ring;\n\n      for (var i = 0; i < total; i++) {\n        var idx = count++ % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  };\n\n  return TakeLastSubscriber;\n}(Subscriber);","map":{"version":3,"sources":["../../../src/internal/operators/takeLast.ts"],"names":[],"mappings":";AACA,OAAO,KAAE,OAAT,MAAqB,OAArB;AACA,SAAS,UAAT,QAAS,eAAT;AACA,SAAS,uBAAT,QAAsB,iCAAtB;AA8CA,SAAM,KAAN,QAAgB,qBAAhB;AACE,OAAA,SAAO,QAAP,CAAgB,KAAhB,EAAgB;EACd,OAAA,SAAS,wBAAT,CAAiB,MAAjB,EAAiB;QACf,KAAA,KAAO,C,EAAK;MACb,OAAA,KAAA,EAAA;IAAM,C,MACL;MACD,OAAA,MAAA,CAAA,IAAA,CAAA,IAAA,gBAAA,CAAA,KAAA,CAAA,CAAA;IACD;EACH,CANG;AAQJ;;IACE,gBAAA,GAAA,aAAiC,YAAA;EAAb,SAAA,gBAAA,CAAa,KAAb,EAAa;IAC/B,KAAI,KAAJ,GAAS,KAAT;;QACE,KAAA,KAAA,GAAU,C,EAAA;MACX,MAAA,IAAA,uBAAA,EAAA;IACF;EAED;;EACE,gBAAO,CAAM,SAAb,CAAuB,IAAvB,GAA4B,UAAA,UAAA,EAAmB,MAAnB,EAA+B;IAC5D,OAAA,MAAA,CAAA,SAAA,CAAA,IAAA,kBAAA,CAAA,UAAA,EAAA,KAAA,KAAA,CAAA,CAAA;EACH,CAFI;;EAEH,OAAA,gBAAA;AAOD,CAhBmC,E;;IAgBC,kBAAA,GAAA,aAAA,UAAa,MAAb,EAAa;EAI/C,OAAA,CAAA,SAAA,CAAA,kBAAA,EAAY,MAAZ;;EAAA,SAAA,kBAAA,CACE,WADF,EACQ,KADR,EACoB;IAD4B,IAAA,KAAA,GAAA,MAAA,CAAK,IAAL,CAAa,IAAb,EAAa,WAAb,KAAa,IAAb;;IAHxC,KAAA,CAAA,KAAA,GAAiB,KAAjB;IACA,KAAA,CAAA,IAAA,GAAK,IAAa,KAAb,EAAL;;IAIP,OAAA,KAAA;EAED;;EACE,kBAAa,CAAI,SAAjB,CAAuB,KAAvB,GAAuB,UAAA,KAAA,EAAA;IACvB,IAAM,IAAA,GAAK,KAAO,IAAlB;IACA,IAAM,KAAK,GAAG,KAAK,KAAnB;IAEA,IAAI,KAAK,GAAA,KAAM,KAAN,EAAT;;QACE,IAAI,CAAC,MAAL,GAAU,K,EAAO;MAClB,IAAA,CAAA,IAAA,CAAA,KAAA;IAAM,C,MACL;MACA,IAAI,KAAC,GAAM,KAAG,GAAM,KAApB;MACD,IAAA,CAAA,KAAA,CAAA,GAAA,KAAA;IACF;EAED,CAZE;;EAaA,kBAAM,CAAW,SAAjB,CAAyB,SAAzB,GAAqC,YAAA;IACrC,IAAI,WAAQ,GAAK,KAAM,WAAvB;IAEA,IAAI,KAAK,GAAG,KAAG,KAAf;;QACE,KAAM,GAAA,C,EAAK;MACX,IAAM,KAAI,GAAI,KAAK,KAAL,IAAU,KAAA,KAAV,GAAU,KAAA,KAAV,GAAU,KAAA,KAAxB;MAEA,IAAA,IAAK,GAAK,KAAM,IAAhB;;MACE,KAAA,IAAM,CAAA,GAAG,CAAT,EAAa,CAAA,GAAK,KAAlB,EAAwB,CAAA,EAAxB,EAA8B;QAC9B,IAAA,GAAA,GAAW,KAAK,EAAhB,GAAsB,KAAtB;QACD,WAAA,CAAA,IAAA,CAAA,IAAA,CAAA,GAAA,CAAA;MACF;IAED;;IACD,WAAA,CAAA,QAAA;EACH,CAfI;;EAtBgC,OAAA,kBAAA;CAAA,C,UAAA,C","sourcesContent":["/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\nexport function takeLast(count) {\n    return function takeLastOperatorFunction(source) {\n        if (count === 0) {\n            return empty();\n        }\n        else {\n            return source.lift(new TakeLastOperator(count));\n        }\n    };\n}\nvar TakeLastOperator = /*@__PURE__*/ (function () {\n    function TakeLastOperator(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError;\n        }\n    }\n    TakeLastOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n    };\n    return TakeLastOperator;\n}());\nvar TakeLastSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(TakeLastSubscriber, _super);\n    function TakeLastSubscriber(destination, total) {\n        var _this = _super.call(this, destination) || this;\n        _this.total = total;\n        _this.ring = new Array();\n        _this.count = 0;\n        return _this;\n    }\n    TakeLastSubscriber.prototype._next = function (value) {\n        var ring = this.ring;\n        var total = this.total;\n        var count = this.count++;\n        if (ring.length < total) {\n            ring.push(value);\n        }\n        else {\n            var index = count % total;\n            ring[index] = value;\n        }\n    };\n    TakeLastSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        var count = this.count;\n        if (count > 0) {\n            var total = this.count >= this.total ? this.total : this.count;\n            var ring = this.ring;\n            for (var i = 0; i < total; i++) {\n                var idx = (count++) % total;\n                destination.next(ring[idx]);\n            }\n        }\n        destination.complete();\n    };\n    return TakeLastSubscriber;\n}(Subscriber));\n//# sourceMappingURL=takeLast.js.map\n"]},"metadata":{},"sourceType":"module"}