{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useRef } from 'react';\nimport raf from \"rc-util/es/raf\";\nimport { getClientSize } from \"rc-util/es/Dom/css\";\nimport { MIN_SCALE, MAX_SCALE } from \"../previewConfig\";\nvar initialTransform = {\n  x: 0,\n  y: 0,\n  rotate: 0,\n  scale: 1,\n  flipX: false,\n  flipY: false\n};\nexport default function useImageTransform(imgRef) {\n  var frame = useRef(null);\n  var queue = useRef([]);\n\n  var _useState = useState(initialTransform),\n      _useState2 = _slicedToArray(_useState, 2),\n      transform = _useState2[0],\n      setTransform = _useState2[1];\n\n  var resetTransform = function resetTransform() {\n    setTransform(initialTransform);\n  };\n  /** Direct update transform */\n\n\n  var updateTransform = function updateTransform(newTransform) {\n    if (frame.current === null) {\n      queue.current = [];\n      frame.current = raf(function () {\n        setTransform(function (preState) {\n          var memoState = preState;\n          queue.current.forEach(function (queueState) {\n            memoState = _objectSpread(_objectSpread({}, memoState), queueState);\n          });\n          frame.current = null;\n          return memoState;\n        });\n      });\n    }\n\n    queue.current.push(_objectSpread(_objectSpread({}, transform), newTransform));\n  };\n  /** Scale according to the position of clientX and clientY */\n\n\n  var dispatchZoomChange = function dispatchZoomChange(ratio, clientX, clientY) {\n    var _imgRef$current = imgRef.current,\n        width = _imgRef$current.width,\n        height = _imgRef$current.height,\n        offsetWidth = _imgRef$current.offsetWidth,\n        offsetHeight = _imgRef$current.offsetHeight,\n        offsetLeft = _imgRef$current.offsetLeft,\n        offsetTop = _imgRef$current.offsetTop;\n    var newRatio = ratio;\n    var newScale = transform.scale * ratio;\n\n    if (newScale > MAX_SCALE) {\n      newRatio = MAX_SCALE / transform.scale;\n      newScale = MAX_SCALE;\n    } else if (newScale < MIN_SCALE) {\n      newRatio = MIN_SCALE / transform.scale;\n      newScale = MIN_SCALE;\n    }\n    /** Default center point scaling */\n\n\n    var mergedClientX = clientX !== null && clientX !== void 0 ? clientX : innerWidth / 2;\n    var mergedClientY = clientY !== null && clientY !== void 0 ? clientY : innerHeight / 2;\n    var diffRatio = newRatio - 1;\n    /** Deviation calculated from image size */\n\n    var diffImgX = diffRatio * width * 0.5;\n    var diffImgY = diffRatio * height * 0.5;\n    /** The difference between the click position and the edge of the document */\n\n    var diffOffsetLeft = diffRatio * (mergedClientX - transform.x - offsetLeft);\n    var diffOffsetTop = diffRatio * (mergedClientY - transform.y - offsetTop);\n    /** Final positioning */\n\n    var newX = transform.x - (diffOffsetLeft - diffImgX);\n    var newY = transform.y - (diffOffsetTop - diffImgY);\n    /**\n     * When zooming the image\n     * When the image size is smaller than the width and height of the window, the position is initialized\n     */\n\n    if (ratio < 1 && newScale === 1) {\n      var mergedWidth = offsetWidth * newScale;\n      var mergedHeight = offsetHeight * newScale;\n\n      var _getClientSize = getClientSize(),\n          clientWidth = _getClientSize.width,\n          clientHeight = _getClientSize.height;\n\n      if (mergedWidth <= clientWidth && mergedHeight <= clientHeight) {\n        newX = 0;\n        newY = 0;\n      }\n    }\n\n    updateTransform({\n      x: newX,\n      y: newY,\n      scale: newScale\n    });\n  };\n\n  return {\n    transform: transform,\n    resetTransform: resetTransform,\n    updateTransform: updateTransform,\n    dispatchZoomChange: dispatchZoomChange\n  };\n}\n;","map":{"version":3,"names":["_objectSpread","_slicedToArray","useState","useRef","raf","getClientSize","MIN_SCALE","MAX_SCALE","initialTransform","x","y","rotate","scale","flipX","flipY","useImageTransform","imgRef","frame","queue","_useState","_useState2","transform","setTransform","resetTransform","updateTransform","newTransform","current","preState","memoState","forEach","queueState","push","dispatchZoomChange","ratio","clientX","clientY","_imgRef$current","width","height","offsetWidth","offsetHeight","offsetLeft","offsetTop","newRatio","newScale","mergedClientX","innerWidth","mergedClientY","innerHeight","diffRatio","diffImgX","diffImgY","diffOffsetLeft","diffOffsetTop","newX","newY","mergedWidth","mergedHeight","_getClientSize","clientWidth","clientHeight"],"sources":["C:/Users/Joshua Doros/Desktop/Tezos/tezos-taquito-escrow/node_modules/rc-image/es/hooks/useImageTransform.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useRef } from 'react';\nimport raf from \"rc-util/es/raf\";\nimport { getClientSize } from \"rc-util/es/Dom/css\";\nimport { MIN_SCALE, MAX_SCALE } from \"../previewConfig\";\nvar initialTransform = {\n  x: 0,\n  y: 0,\n  rotate: 0,\n  scale: 1,\n  flipX: false,\n  flipY: false\n};\nexport default function useImageTransform(imgRef) {\n  var frame = useRef(null);\n  var queue = useRef([]);\n  var _useState = useState(initialTransform),\n    _useState2 = _slicedToArray(_useState, 2),\n    transform = _useState2[0],\n    setTransform = _useState2[1];\n  var resetTransform = function resetTransform() {\n    setTransform(initialTransform);\n  };\n\n  /** Direct update transform */\n  var updateTransform = function updateTransform(newTransform) {\n    if (frame.current === null) {\n      queue.current = [];\n      frame.current = raf(function () {\n        setTransform(function (preState) {\n          var memoState = preState;\n          queue.current.forEach(function (queueState) {\n            memoState = _objectSpread(_objectSpread({}, memoState), queueState);\n          });\n          frame.current = null;\n          return memoState;\n        });\n      });\n    }\n    queue.current.push(_objectSpread(_objectSpread({}, transform), newTransform));\n  };\n\n  /** Scale according to the position of clientX and clientY */\n  var dispatchZoomChange = function dispatchZoomChange(ratio, clientX, clientY) {\n    var _imgRef$current = imgRef.current,\n      width = _imgRef$current.width,\n      height = _imgRef$current.height,\n      offsetWidth = _imgRef$current.offsetWidth,\n      offsetHeight = _imgRef$current.offsetHeight,\n      offsetLeft = _imgRef$current.offsetLeft,\n      offsetTop = _imgRef$current.offsetTop;\n    var newRatio = ratio;\n    var newScale = transform.scale * ratio;\n    if (newScale > MAX_SCALE) {\n      newRatio = MAX_SCALE / transform.scale;\n      newScale = MAX_SCALE;\n    } else if (newScale < MIN_SCALE) {\n      newRatio = MIN_SCALE / transform.scale;\n      newScale = MIN_SCALE;\n    }\n\n    /** Default center point scaling */\n    var mergedClientX = clientX !== null && clientX !== void 0 ? clientX : innerWidth / 2;\n    var mergedClientY = clientY !== null && clientY !== void 0 ? clientY : innerHeight / 2;\n    var diffRatio = newRatio - 1;\n    /** Deviation calculated from image size */\n    var diffImgX = diffRatio * width * 0.5;\n    var diffImgY = diffRatio * height * 0.5;\n    /** The difference between the click position and the edge of the document */\n    var diffOffsetLeft = diffRatio * (mergedClientX - transform.x - offsetLeft);\n    var diffOffsetTop = diffRatio * (mergedClientY - transform.y - offsetTop);\n    /** Final positioning */\n    var newX = transform.x - (diffOffsetLeft - diffImgX);\n    var newY = transform.y - (diffOffsetTop - diffImgY);\n\n    /**\n     * When zooming the image\n     * When the image size is smaller than the width and height of the window, the position is initialized\n     */\n    if (ratio < 1 && newScale === 1) {\n      var mergedWidth = offsetWidth * newScale;\n      var mergedHeight = offsetHeight * newScale;\n      var _getClientSize = getClientSize(),\n        clientWidth = _getClientSize.width,\n        clientHeight = _getClientSize.height;\n      if (mergedWidth <= clientWidth && mergedHeight <= clientHeight) {\n        newX = 0;\n        newY = 0;\n      }\n    }\n    updateTransform({\n      x: newX,\n      y: newY,\n      scale: newScale\n    });\n  };\n  return {\n    transform: transform,\n    resetTransform: resetTransform,\n    updateTransform: updateTransform,\n    dispatchZoomChange: dispatchZoomChange\n  };\n}\n;"],"mappings":"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"},"metadata":{},"sourceType":"module"}