{"ast":null,"code":"/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nexport function range(start, count, scheduler) {\n  if (start === void 0) {\n    start = 0;\n  }\n\n  return new Observable(function (subscriber) {\n    if (count === undefined) {\n      count = start;\n      start = 0;\n    }\n\n    var index = 0;\n    var current = start;\n\n    if (scheduler) {\n      return scheduler.schedule(dispatch, 0, {\n        index: index,\n        count: count,\n        start: start,\n        subscriber: subscriber\n      });\n    } else {\n      do {\n        if (index++ >= count) {\n          subscriber.complete();\n          break;\n        }\n\n        subscriber.next(current++);\n\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n\n    return undefined;\n  });\n}\nexport function dispatch(state) {\n  var start = state.start,\n      index = state.index,\n      count = state.count,\n      subscriber = state.subscriber;\n\n  if (index >= count) {\n    subscriber.complete();\n    return;\n  }\n\n  subscriber.next(start);\n\n  if (subscriber.closed) {\n    return;\n  }\n\n  state.index = index + 1;\n  state.start = start + 1;\n  this.schedule(state);\n}","map":{"version":3,"sources":["../../../src/internal/observable/range.ts"],"names":[],"mappings":"AACA;AAoCA,SAAM,UAAN,QAAuC,eAAvC;AAAsB,OAAA,SAAA,KAAA,CAAA,KAAA,EAAA,KAAA,EAAA,SAAA,EAAiB;EAGrC,IAAA,KAAO,KAAI,KAAA,CAAX,EAA8B;IAC5B,KAAI,GAAA,CAAJ;EACE;;SACA,IAAA,UAAA,CAAU,UAAA,UAAA,EAAA;IACX,IAAA,KAAA,KAAA,SAAA,EAAA;MAEG,KAAK,GAAG,KAAR;MACA,KAAA,GAAO,CAAP;IAEJ;;QACE,KAAA,GAAO,C;QACL,OAAA,GAAK,K;;QACN,S,EAAE;MACJ,OAAA,SAAA,CAAA,QAAA,CAAA,QAAA,EAAA,CAAA,EAAA;QAAM,KAAA,EAAA,KAAN;QAAM,KAAA,EAAA,KAAN;QAAM,KAAA,EAAA,KAAN;QAAM,UAAA,EAAA;MAAN,CAAA,CAAA;IAEG,C,MACE;SACA;QACD,IAAA,KAAA,MAAA,KAAA,EAAA;UACD,UAAW,CAAI,QAAf;UACI;QACF;;QACD,UAAA,CAAA,IAAA,CAAA,OAAA,EAAA;;QACF,IAAA,UAAc,CAAA,MAAd,EAAc;UAChB;QAEM;MACN,C,QAAA,I;IACJ;;IAGK,OAAA,SAAA;EACI,CA7BJ,C;AA+BJ;OACE,SAAA,QAAA,CAAW,KAAX,EAAsB;MACtB,KAAA,GAAO,KAAA,CAAA,K;MAAA,KAAA,GAAA,KAAA,CAAA,K;MAAA,KAAA,GAAA,KAAA,CAAA,K;MAAA,UAAA,GAAA,KAAA,CAAA,U;;EACR,IAAA,KAAA,IAAA,KAAA,EAAA;IAED,UAAW,CAAI,QAAf;IAEI;EACF;;EACD,UAAA,CAAA,IAAA,CAAA,KAAA;;EAED,IAAA,UAAc,CAAA,MAAd,EAAuB;IACvB;EAEA;;EACD,KAAA,CAAA,KAAA,GAAA,KAAA,GAAA,CAAA","sourcesContent":["/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nexport function range(start, count, scheduler) {\n    if (start === void 0) {\n        start = 0;\n    }\n    return new Observable(function (subscriber) {\n        if (count === undefined) {\n            count = start;\n            start = 0;\n        }\n        var index = 0;\n        var current = start;\n        if (scheduler) {\n            return scheduler.schedule(dispatch, 0, {\n                index: index, count: count, start: start, subscriber: subscriber\n            });\n        }\n        else {\n            do {\n                if (index++ >= count) {\n                    subscriber.complete();\n                    break;\n                }\n                subscriber.next(current++);\n                if (subscriber.closed) {\n                    break;\n                }\n            } while (true);\n        }\n        return undefined;\n    });\n}\nexport function dispatch(state) {\n    var start = state.start, index = state.index, count = state.count, subscriber = state.subscriber;\n    if (index >= count) {\n        subscriber.complete();\n        return;\n    }\n    subscriber.next(start);\n    if (subscriber.closed) {\n        return;\n    }\n    state.index = index + 1;\n    state.start = start + 1;\n    this.schedule(state);\n}\n//# sourceMappingURL=range.js.map\n"]},"metadata":{},"sourceType":"module"}