{"ast":null,"code":"import { isCreateEvent, isJoinEvent, isMessageEvent } from '../utils/events';\nimport { MatrixMessage } from './MatrixMessage';\nexport var MatrixRoomStatus;\n\n(function (MatrixRoomStatus) {\n  MatrixRoomStatus[MatrixRoomStatus[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  MatrixRoomStatus[MatrixRoomStatus[\"JOINED\"] = 1] = \"JOINED\";\n  MatrixRoomStatus[MatrixRoomStatus[\"INVITED\"] = 2] = \"INVITED\";\n  MatrixRoomStatus[MatrixRoomStatus[\"LEFT\"] = 3] = \"LEFT\";\n})(MatrixRoomStatus || (MatrixRoomStatus = {}));\n\nexport class MatrixRoom {\n  constructor(id) {\n    let status = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : MatrixRoomStatus.UNKNOWN;\n    let members = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    let messages = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    this.id = id;\n    this.status = status;\n    this.members = members;\n    this.messages = messages;\n  }\n  /**\n   * Reconstruct rooms from a sync response\n   *\n   * @param roomSync\n   */\n\n\n  static fromSync(roomSync) {\n    function create(rooms, creator) {\n      return Object.entries(rooms).map(_ref => {\n        let [id, room] = _ref;\n        return creator(id, room);\n      });\n    }\n\n    return [...create(roomSync.join, MatrixRoom.fromJoined), ...create(roomSync.invite, MatrixRoom.fromInvited), ...create(roomSync.leave, MatrixRoom.fromLeft)];\n  }\n  /**\n   * Reconstruct a room from an ID or object\n   *\n   * @param roomOrId\n   * @param status\n   */\n\n\n  static from(roomOrId, status) {\n    return typeof roomOrId === 'string' ? new MatrixRoom(roomOrId, status || MatrixRoomStatus.UNKNOWN) : status !== undefined ? new MatrixRoom(roomOrId.id, status, roomOrId.members, roomOrId.messages) : roomOrId;\n  }\n  /**\n   * Merge new and old state and remove duplicates\n   *\n   * @param newState\n   * @param previousState\n   */\n\n\n  static merge(newState, previousState) {\n    if (!previousState || previousState.id !== newState.id) {\n      return MatrixRoom.from(newState);\n    }\n\n    return new MatrixRoom(newState.id, newState.status, [...previousState.members, ...newState.members].filter((member, index, array) => array.indexOf(member) === index), [...previousState.messages, ...newState.messages]);\n  }\n  /**\n   * Create a room from a join\n   *\n   * @param id\n   * @param joined\n   */\n\n\n  static fromJoined(id, joined) {\n    const events = [...joined.state.events, ...joined.timeline.events];\n    const members = MatrixRoom.getMembersFromEvents(events);\n    const messages = MatrixRoom.getMessagesFromEvents(events);\n    return new MatrixRoom(id, MatrixRoomStatus.JOINED, members, messages);\n  }\n  /**\n   * Create a room from an invite\n   *\n   * @param id\n   * @param invited\n   */\n\n\n  static fromInvited(id, invited) {\n    const members = MatrixRoom.getMembersFromEvents(invited.invite_state.events);\n    return new MatrixRoom(id, MatrixRoomStatus.INVITED, members);\n  }\n  /**\n   * Create a room from a leave\n   *\n   * @param id\n   * @param left\n   */\n\n\n  static fromLeft(id, left) {\n    const events = [...left.state.events, ...left.timeline.events];\n    const members = MatrixRoom.getMembersFromEvents(events);\n    const messages = MatrixRoom.getMessagesFromEvents(events);\n    return new MatrixRoom(id, MatrixRoomStatus.LEFT, members, messages);\n  }\n  /**\n   * Extract members from an event\n   *\n   * @param events\n   */\n\n\n  static getMembersFromEvents(events) {\n    return MatrixRoom.getUniqueEvents(events.filter(event => isCreateEvent(event) || isJoinEvent(event))).map(event => event.sender).filter((member, index, array) => array.indexOf(member) === index);\n  }\n  /**\n   * Extract messages from an event\n   *\n   * @param events\n   */\n\n\n  static getMessagesFromEvents(events) {\n    return MatrixRoom.getUniqueEvents(events.filter(isMessageEvent)).map(event => MatrixMessage.from(event)).filter(Boolean);\n  }\n  /**\n   * Get unique events and remove duplicates\n   *\n   * @param events\n   */\n\n\n  static getUniqueEvents(events) {\n    const eventIds = {};\n    const uniqueEvents = [];\n    events.forEach((event, index) => {\n      const eventId = event.event_id;\n\n      if (eventId === undefined || !(eventId in eventIds)) {\n        if (eventId !== undefined) {\n          eventIds[eventId] = index;\n        }\n\n        uniqueEvents.push(event);\n      }\n    });\n    return uniqueEvents;\n  }\n\n}","map":{"version":3,"sources":["../../../../src/matrix-client/models/MatrixRoom.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { isCreateEvent, isJoinEvent, isMessageEvent } from '../utils/events';\nimport { MatrixMessage } from './MatrixMessage';\nexport var MatrixRoomStatus;\n(function (MatrixRoomStatus) {\n    MatrixRoomStatus[MatrixRoomStatus[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    MatrixRoomStatus[MatrixRoomStatus[\"JOINED\"] = 1] = \"JOINED\";\n    MatrixRoomStatus[MatrixRoomStatus[\"INVITED\"] = 2] = \"INVITED\";\n    MatrixRoomStatus[MatrixRoomStatus[\"LEFT\"] = 3] = \"LEFT\";\n})(MatrixRoomStatus || (MatrixRoomStatus = {}));\nexport class MatrixRoom {\n    constructor(id, status = MatrixRoomStatus.UNKNOWN, members = [], messages = []) {\n        this.id = id;\n        this.status = status;\n        this.members = members;\n        this.messages = messages;\n    }\n    /**\n     * Reconstruct rooms from a sync response\n     *\n     * @param roomSync\n     */\n    static fromSync(roomSync) {\n        function create(rooms, creator) {\n            return Object.entries(rooms).map(([id, room]) => creator(id, room));\n        }\n        return [\n            ...create(roomSync.join, MatrixRoom.fromJoined),\n            ...create(roomSync.invite, MatrixRoom.fromInvited),\n            ...create(roomSync.leave, MatrixRoom.fromLeft)\n        ];\n    }\n    /**\n     * Reconstruct a room from an ID or object\n     *\n     * @param roomOrId\n     * @param status\n     */\n    static from(roomOrId, status) {\n        return typeof roomOrId === 'string'\n            ? new MatrixRoom(roomOrId, status || MatrixRoomStatus.UNKNOWN)\n            : status !== undefined\n                ? new MatrixRoom(roomOrId.id, status, roomOrId.members, roomOrId.messages)\n                : roomOrId;\n    }\n    /**\n     * Merge new and old state and remove duplicates\n     *\n     * @param newState\n     * @param previousState\n     */\n    static merge(newState, previousState) {\n        if (!previousState || previousState.id !== newState.id) {\n            return MatrixRoom.from(newState);\n        }\n        return new MatrixRoom(newState.id, newState.status, [...previousState.members, ...newState.members].filter((member, index, array) => array.indexOf(member) === index), [...previousState.messages, ...newState.messages]);\n    }\n    /**\n     * Create a room from a join\n     *\n     * @param id\n     * @param joined\n     */\n    static fromJoined(id, joined) {\n        const events = [...joined.state.events, ...joined.timeline.events];\n        const members = MatrixRoom.getMembersFromEvents(events);\n        const messages = MatrixRoom.getMessagesFromEvents(events);\n        return new MatrixRoom(id, MatrixRoomStatus.JOINED, members, messages);\n    }\n    /**\n     * Create a room from an invite\n     *\n     * @param id\n     * @param invited\n     */\n    static fromInvited(id, invited) {\n        const members = MatrixRoom.getMembersFromEvents(invited.invite_state.events);\n        return new MatrixRoom(id, MatrixRoomStatus.INVITED, members);\n    }\n    /**\n     * Create a room from a leave\n     *\n     * @param id\n     * @param left\n     */\n    static fromLeft(id, left) {\n        const events = [...left.state.events, ...left.timeline.events];\n        const members = MatrixRoom.getMembersFromEvents(events);\n        const messages = MatrixRoom.getMessagesFromEvents(events);\n        return new MatrixRoom(id, MatrixRoomStatus.LEFT, members, messages);\n    }\n    /**\n     * Extract members from an event\n     *\n     * @param events\n     */\n    static getMembersFromEvents(events) {\n        return MatrixRoom.getUniqueEvents(events.filter((event) => isCreateEvent(event) || isJoinEvent(event)))\n            .map((event) => event.sender)\n            .filter((member, index, array) => array.indexOf(member) === index);\n    }\n    /**\n     * Extract messages from an event\n     *\n     * @param events\n     */\n    static getMessagesFromEvents(events) {\n        return MatrixRoom.getUniqueEvents(events.filter(isMessageEvent))\n            .map((event) => MatrixMessage.from(event))\n            .filter(Boolean);\n    }\n    /**\n     * Get unique events and remove duplicates\n     *\n     * @param events\n     */\n    static getUniqueEvents(events) {\n        const eventIds = {};\n        const uniqueEvents = [];\n        events.forEach((event, index) => {\n            const eventId = event.event_id;\n            if (eventId === undefined || !(eventId in eventIds)) {\n                if (eventId !== undefined) {\n                    eventIds[eventId] = index;\n                }\n                uniqueEvents.push(event);\n            }\n        });\n        return uniqueEvents;\n    }\n}\n//# sourceMappingURL=MatrixRoom.js.map"]},"metadata":{},"sourceType":"module"}