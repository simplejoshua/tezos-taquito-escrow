{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function refCount() {\n  return function refCountOperatorFunction(source) {\n    return source.lift(new RefCountOperator(source));\n  };\n}\n\nvar RefCountOperator = /*@__PURE__*/function () {\n  function RefCountOperator(connectable) {\n    this.connectable = connectable;\n  }\n\n  RefCountOperator.prototype.call = function (subscriber, source) {\n    var connectable = this.connectable;\n    connectable._refCount++;\n    var refCounter = new RefCountSubscriber(subscriber, connectable);\n    var subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      refCounter.connection = connectable.connect();\n    }\n\n    return subscription;\n  };\n\n  return RefCountOperator;\n}();\n\nvar RefCountSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(RefCountSubscriber, _super);\n\n  function RefCountSubscriber(destination, connectable) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.connectable = connectable;\n    return _this;\n  }\n\n  RefCountSubscriber.prototype._unsubscribe = function () {\n    var connectable = this.connectable;\n\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    var refCount = connectable._refCount;\n\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    connectable._refCount = refCount - 1;\n\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    var connection = this.connection;\n    var sharedConnection = connectable._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  };\n\n  return RefCountSubscriber;\n}(Subscriber);","map":{"version":3,"sources":["../../../src/internal/operators/refCount.ts"],"names":[],"mappings":";AACA,OAAO,KAAE,OAAT,MAAqB,OAArB;AA2DA,SAAM,UAAN,QAAwB,eAAxB;AACE,OAAA,SAAO,QAAP,GAAgB;EACd,OAAA,SAAO,wBAAP,CAAuB,MAAvB,EAAwC;IACT,OAAA,MAAA,CAAA,IAAA,CAAA,IAAA,gBAAA,CAAA,MAAA,CAAA,CAAA;EAClC,CAFG;AAIJ;;IACE,gBAAA,GAAA,aAAoB,YAAqC;EAArC,SAAA,gBAAA,CAAA,WAAA,EAAqC;IACxD,KAAA,WAAA,GAAA,WAAA;EACD;;EAEU,gBAAA,CAAA,SAAA,CAAA,IAAA,GAAA,UAAqB,UAArB,EAAqB,MAArB,EAAqB;IACtB,IAAA,WAAa,GAAA,KAAW,WAAxB;IAEP,WAAM,CAAA,SAAN;IACA,IAAM,UAAA,GAAY,IAAG,kBAAH,CAAoB,UAApB,EAAgC,WAAhC,CAAlB;IAEA,IAAI,YAAY,GAAA,MAAQ,CAAA,SAAR,CAAQ,UAAR,CAAhB;;QACS,CAAA,UAAY,CAAA,M,EAAA;MACpB,UAAA,CAAA,UAAA,GAAA,WAAA,CAAA,OAAA,EAAA;IAED;;IACD,OAAA,YAAA;EACH,CAZY;;EAYX,OAAA,gBAAA;AAED,CAlBsB,E;;IAkBc,kBAAA,GAAA,aAAA,UAAa,MAAb,EAAa;EAI/C,OAAA,CAAA,SAAA,CAAA,kBAAA,EAAY,MAAZ;;EAAA,SAAA,kBAAA,CAEE,WAFF,EAEQ,WAFR,EAEoB;IADA,IAAA,KAAA,GAAA,MAAW,CAAX,IAAA,CAAA,IAAA,EAAA,WAAA,KAAqC,IAArC;;;IAEnB,OAAA,KAAA;EAED;;EAEU,kBAAA,CAAA,SAAA,CAAA,YAAA,GAAqB,YAAA;IAC7B,IAAI,WAAC,GAAa,KAAA,WAAlB;;QACE,CAAA,W,EAAK;MACL,KAAA,UAAA,GAAO,IAAP;MACD;IAED;;IACA,KAAM,WAAN,GAAwB,IAAxB;IACA,IAAI,QAAQ,GAAA,WAAO,CAAA,SAAnB;;QACE,QAAK,IAAA,C,EAAU;MACf,KAAA,UAAA,GAAO,IAAP;MACD;IAEM;;IACP,WAAI,CAAQ,SAAZ,GAAkB,QAAA,GAAA,CAAlB;;QACE,QAAK,GAAA,C,EAAA;MACL,KAAA,UAAA,GAAO,IAAP;MACD;IA0BO;;IACR,IAAM,UAAA,GAAA,KAAgB,UAAtB;IACA,IAAI,gBAAc,GAAK,WAAA,CAAA,WAAvB;IAEA,KAAI,UAAJ,GAAI,IAAJ;;QACE,gBAAgB,KAAC,CAAA,UAAA,IAAc,gBAAA,KAAA,UAAf,C,EAAe;MAChC,gBAAA,CAAA,WAAA;IACF;EACH,CAnDY;;EAXwB,OAAA,kBAAA;CAAA,C,UAAA,C","sourcesContent":["/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function refCount() {\n    return function refCountOperatorFunction(source) {\n        return source.lift(new RefCountOperator(source));\n    };\n}\nvar RefCountOperator = /*@__PURE__*/ (function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        var _this = _super.call(this, destination) || this;\n        _this.connectable = connectable;\n        return _this;\n    }\n    RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=refCount.js.map\n"]},"metadata":{},"sourceType":"module"}