{"ast":null,"code":"\"use strict\"; // Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Package int provides helper functions for integerss.\n */\n// Shim using 16-bit pieces.\n\nfunction imulShim(a, b) {\n  var ah = a >>> 16 & 0xffff,\n      al = a & 0xffff;\n  var bh = b >>> 16 & 0xffff,\n      bl = b & 0xffff;\n  return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;\n}\n/** 32-bit integer multiplication.  */\n// Use system Math.imul if available, otherwise use our shim.\n\n\nexports.mul = Math.imul || imulShim;\n/** 32-bit integer addition.  */\n\nfunction add(a, b) {\n  return a + b | 0;\n}\n\nexports.add = add;\n/**  32-bit integer subtraction.  */\n\nfunction sub(a, b) {\n  return a - b | 0;\n}\n\nexports.sub = sub;\n/** 32-bit integer left rotation */\n\nfunction rotl(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nexports.rotl = rotl;\n/** 32-bit integer left rotation */\n\nfunction rotr(x, n) {\n  return x << 32 - n | x >>> n;\n}\n\nexports.rotr = rotr;\n\nfunction isIntegerShim(n) {\n  return typeof n === \"number\" && isFinite(n) && Math.floor(n) === n;\n}\n/**\n * Returns true if the argument is an integer number.\n *\n * In ES2015, Number.isInteger.\n */\n\n\nexports.isInteger = Number.isInteger || isIntegerShim;\n/**\n *  Math.pow(2, 53) - 1\n *\n *  In ES2015 Number.MAX_SAFE_INTEGER.\n */\n\nexports.MAX_SAFE_INTEGER = 9007199254740991;\n/**\n * Returns true if the argument is a safe integer number\n * (-MIN_SAFE_INTEGER < number <= MAX_SAFE_INTEGER)\n *\n * In ES2015, Number.isSafeInteger.\n */\n\nexports.isSafeInteger = function (n) {\n  return exports.isInteger(n) && n >= -exports.MAX_SAFE_INTEGER && n <= exports.MAX_SAFE_INTEGER;\n};","map":{"version":3,"sources":["../int.ts"],"names":[],"mappings":"cAAA;AACA;;;;;AAEA;;AAEG;AAEH;;AACA,SAAS,QAAT,CAAkB,CAAlB,EAA6B,CAA7B,EAAsC;EAClC,IAAM,EAAE,GAAI,CAAC,KAAK,EAAP,GAAa,MAAxB;EAAA,IAAgC,EAAE,GAAG,CAAC,GAAG,MAAzC;EACA,IAAM,EAAE,GAAI,CAAC,KAAK,EAAP,GAAa,MAAxB;EAAA,IAAgC,EAAE,GAAG,CAAC,GAAG,MAAzC;EACA,OAAS,EAAE,GAAG,EAAN,IAAe,EAAE,GAAG,EAAL,GAAU,EAAE,GAAG,EAAhB,IAAuB,EAAxB,KAAgC,CAA7C,IAAkD,CAA1D;AACH;AAED;AACA;;;AACa,OAAA,CAAA,GAAA,GAAO,IAAgD,CAAC,IAAjD,IAAyD,QAAhE;AAEb;;AACA,SAAgB,GAAhB,CAAoB,CAApB,EAA+B,CAA/B,EAAwC;EACpC,OAAQ,CAAC,GAAG,CAAL,GAAU,CAAjB;AACH;;AAFD,OAAA,CAAA,GAAA,GAAA,GAAA;AAIA;;AACA,SAAgB,GAAhB,CAAoB,CAApB,EAA+B,CAA/B,EAAwC;EACpC,OAAQ,CAAC,GAAG,CAAL,GAAU,CAAjB;AACH;;AAFD,OAAA,CAAA,GAAA,GAAA,GAAA;AAIA;;AACA,SAAgB,IAAhB,CAAqB,CAArB,EAAgC,CAAhC,EAAyC;EACrC,OAAO,CAAC,IAAI,CAAL,GAAS,CAAC,KAAM,KAAK,CAA5B;AACH;;AAFD,OAAA,CAAA,IAAA,GAAA,IAAA;AAIA;;AACA,SAAgB,IAAhB,CAAqB,CAArB,EAAgC,CAAhC,EAAyC;EACrC,OAAO,CAAC,IAAK,KAAK,CAAX,GAAgB,CAAC,KAAK,CAA7B;AACH;;AAFD,OAAA,CAAA,IAAA,GAAA,IAAA;;AAIA,SAAS,aAAT,CAAuB,CAAvB,EAAgC;EAC5B,OAAO,OAAO,CAAP,KAAa,QAAb,IAAyB,QAAQ,CAAC,CAAD,CAAjC,IAAwC,IAAI,CAAC,KAAL,CAAW,CAAX,MAAkB,CAAjE;AACH;AAED;;;;AAIG;;;AACU,OAAA,CAAA,SAAA,GAAa,MAA6C,CAAC,SAA9C,IAA2D,aAAxE;AAEb;;;;AAIG;;AACU,OAAA,CAAA,gBAAA,GAAmB,gBAAnB;AAEb;;;;;AAKG;;AACU,OAAA,CAAA,aAAA,GAAgB,UAAC,CAAD,EAAU;EACnC,OAAA,OAAA,CAAA,SAAA,CAAU,CAAV,KAAiB,CAAC,IAAI,CAAC,OAAA,CAAA,gBAAN,IAA0B,CAAC,IAAI,OAAA,CAAA,gBAAhD;AAAiE,CADxD","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Package int provides helper functions for integerss.\n */\n// Shim using 16-bit pieces.\nfunction imulShim(a, b) {\n    var ah = (a >>> 16) & 0xffff, al = a & 0xffff;\n    var bh = (b >>> 16) & 0xffff, bl = b & 0xffff;\n    return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0) | 0);\n}\n/** 32-bit integer multiplication.  */\n// Use system Math.imul if available, otherwise use our shim.\nexports.mul = Math.imul || imulShim;\n/** 32-bit integer addition.  */\nfunction add(a, b) {\n    return (a + b) | 0;\n}\nexports.add = add;\n/**  32-bit integer subtraction.  */\nfunction sub(a, b) {\n    return (a - b) | 0;\n}\nexports.sub = sub;\n/** 32-bit integer left rotation */\nfunction rotl(x, n) {\n    return x << n | x >>> (32 - n);\n}\nexports.rotl = rotl;\n/** 32-bit integer left rotation */\nfunction rotr(x, n) {\n    return x << (32 - n) | x >>> n;\n}\nexports.rotr = rotr;\nfunction isIntegerShim(n) {\n    return typeof n === \"number\" && isFinite(n) && Math.floor(n) === n;\n}\n/**\n * Returns true if the argument is an integer number.\n *\n * In ES2015, Number.isInteger.\n */\nexports.isInteger = Number.isInteger || isIntegerShim;\n/**\n *  Math.pow(2, 53) - 1\n *\n *  In ES2015 Number.MAX_SAFE_INTEGER.\n */\nexports.MAX_SAFE_INTEGER = 9007199254740991;\n/**\n * Returns true if the argument is a safe integer number\n * (-MIN_SAFE_INTEGER < number <= MAX_SAFE_INTEGER)\n *\n * In ES2015, Number.isSafeInteger.\n */\nexports.isSafeInteger = function (n) {\n    return exports.isInteger(n) && (n >= -exports.MAX_SAFE_INTEGER && n <= exports.MAX_SAFE_INTEGER);\n};\n//# sourceMappingURL=int.js.map"]},"metadata":{},"sourceType":"script"}