{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport warning from \"rc-util/es/warning\";\nimport { toArray } from \"./valueUtil\";\n\nfunction warningProps(props) {\n  var searchPlaceholder = props.searchPlaceholder,\n      treeCheckStrictly = props.treeCheckStrictly,\n      treeCheckable = props.treeCheckable,\n      labelInValue = props.labelInValue,\n      value = props.value,\n      multiple = props.multiple;\n  warning(!searchPlaceholder, '`searchPlaceholder` has been removed.');\n\n  if (treeCheckStrictly && labelInValue === false) {\n    warning(false, '`treeCheckStrictly` will force set `labelInValue` to `true`.');\n  }\n\n  if (labelInValue || treeCheckStrictly) {\n    warning(toArray(value).every(function (val) {\n      return val && _typeof(val) === 'object' && 'value' in val;\n    }), 'Invalid prop `value` supplied to `TreeSelect`. You should use { label: string, value: string | number } or [{ label: string, value: string | number }] instead.');\n  }\n\n  if (treeCheckStrictly || multiple || treeCheckable) {\n    warning(!value || Array.isArray(value), '`value` should be an array when `TreeSelect` is checkable or multiple.');\n  } else {\n    warning(!Array.isArray(value), '`value` should not be array when `TreeSelect` is single mode.');\n  }\n}\n\nexport default warningProps;","map":{"version":3,"names":["_typeof","warning","toArray","warningProps","props","searchPlaceholder","treeCheckStrictly","treeCheckable","labelInValue","value","multiple","every","val","Array","isArray"],"sources":["C:/Users/Joshua Doros/Desktop/Tezos/tezos-taquito-escrow/node_modules/rc-tree-select/es/utils/warningPropsUtil.js"],"sourcesContent":["import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport warning from \"rc-util/es/warning\";\nimport { toArray } from \"./valueUtil\";\nfunction warningProps(props) {\n  var searchPlaceholder = props.searchPlaceholder,\n    treeCheckStrictly = props.treeCheckStrictly,\n    treeCheckable = props.treeCheckable,\n    labelInValue = props.labelInValue,\n    value = props.value,\n    multiple = props.multiple;\n  warning(!searchPlaceholder, '`searchPlaceholder` has been removed.');\n  if (treeCheckStrictly && labelInValue === false) {\n    warning(false, '`treeCheckStrictly` will force set `labelInValue` to `true`.');\n  }\n  if (labelInValue || treeCheckStrictly) {\n    warning(toArray(value).every(function (val) {\n      return val && _typeof(val) === 'object' && 'value' in val;\n    }), 'Invalid prop `value` supplied to `TreeSelect`. You should use { label: string, value: string | number } or [{ label: string, value: string | number }] instead.');\n  }\n  if (treeCheckStrictly || multiple || treeCheckable) {\n    warning(!value || Array.isArray(value), '`value` should be an array when `TreeSelect` is checkable or multiple.');\n  } else {\n    warning(!Array.isArray(value), '`value` should not be array when `TreeSelect` is single mode.');\n  }\n}\nexport default warningProps;"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,mCAApB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,SAASC,OAAT,QAAwB,aAAxB;;AACA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;EAC3B,IAAIC,iBAAiB,GAAGD,KAAK,CAACC,iBAA9B;EAAA,IACEC,iBAAiB,GAAGF,KAAK,CAACE,iBAD5B;EAAA,IAEEC,aAAa,GAAGH,KAAK,CAACG,aAFxB;EAAA,IAGEC,YAAY,GAAGJ,KAAK,CAACI,YAHvB;EAAA,IAIEC,KAAK,GAAGL,KAAK,CAACK,KAJhB;EAAA,IAKEC,QAAQ,GAAGN,KAAK,CAACM,QALnB;EAMAT,OAAO,CAAC,CAACI,iBAAF,EAAqB,uCAArB,CAAP;;EACA,IAAIC,iBAAiB,IAAIE,YAAY,KAAK,KAA1C,EAAiD;IAC/CP,OAAO,CAAC,KAAD,EAAQ,8DAAR,CAAP;EACD;;EACD,IAAIO,YAAY,IAAIF,iBAApB,EAAuC;IACrCL,OAAO,CAACC,OAAO,CAACO,KAAD,CAAP,CAAeE,KAAf,CAAqB,UAAUC,GAAV,EAAe;MAC1C,OAAOA,GAAG,IAAIZ,OAAO,CAACY,GAAD,CAAP,KAAiB,QAAxB,IAAoC,WAAWA,GAAtD;IACD,CAFO,CAAD,EAEH,iKAFG,CAAP;EAGD;;EACD,IAAIN,iBAAiB,IAAII,QAArB,IAAiCH,aAArC,EAAoD;IAClDN,OAAO,CAAC,CAACQ,KAAD,IAAUI,KAAK,CAACC,OAAN,CAAcL,KAAd,CAAX,EAAiC,wEAAjC,CAAP;EACD,CAFD,MAEO;IACLR,OAAO,CAAC,CAACY,KAAK,CAACC,OAAN,CAAcL,KAAd,CAAF,EAAwB,+DAAxB,CAAP;EACD;AACF;;AACD,eAAeN,YAAf"},"metadata":{},"sourceType":"module"}