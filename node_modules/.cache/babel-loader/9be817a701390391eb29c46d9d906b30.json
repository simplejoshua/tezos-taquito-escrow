{"ast":null,"code":"/** PURE_IMPORTS_START _Observable,_util_isArray,_operators_map,_util_isObject,_from PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { map } from '../operators/map';\nimport { isObject } from '../util/isObject';\nimport { from } from './from';\nexport function forkJoin() {\n  var sources = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    sources[_i] = arguments[_i];\n  }\n\n  if (sources.length === 1) {\n    var first_1 = sources[0];\n\n    if (isArray(first_1)) {\n      return forkJoinInternal(first_1, null);\n    }\n\n    if (isObject(first_1) && Object.getPrototypeOf(first_1) === Object.prototype) {\n      var keys = Object.keys(first_1);\n      return forkJoinInternal(keys.map(function (key) {\n        return first_1[key];\n      }), keys);\n    }\n  }\n\n  if (typeof sources[sources.length - 1] === 'function') {\n    var resultSelector_1 = sources.pop();\n    sources = sources.length === 1 && isArray(sources[0]) ? sources[0] : sources;\n    return forkJoinInternal(sources, null).pipe(map(function (args) {\n      return resultSelector_1.apply(void 0, args);\n    }));\n  }\n\n  return forkJoinInternal(sources, null);\n}\n\nfunction forkJoinInternal(sources, keys) {\n  return new Observable(function (subscriber) {\n    var len = sources.length;\n\n    if (len === 0) {\n      subscriber.complete();\n      return;\n    }\n\n    var values = new Array(len);\n    var completed = 0;\n    var emitted = 0;\n\n    var _loop_1 = function (i) {\n      var source = from(sources[i]);\n      var hasValue = false;\n      subscriber.add(source.subscribe({\n        next: function (value) {\n          if (!hasValue) {\n            hasValue = true;\n            emitted++;\n          }\n\n          values[i] = value;\n        },\n        error: function (err) {\n          return subscriber.error(err);\n        },\n        complete: function () {\n          completed++;\n\n          if (completed === len || !hasValue) {\n            if (emitted === len) {\n              subscriber.next(keys ? keys.reduce(function (result, key, i) {\n                return result[key] = values[i], result;\n              }, {}) : values);\n            }\n\n            subscriber.complete();\n          }\n        }\n      }));\n    };\n\n    for (var i = 0; i < len; i++) {\n      _loop_1(i);\n    }\n  });\n}","map":{"version":3,"sources":["../../../src/internal/observable/forkJoin.ts"],"names":[],"mappings":"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","sourcesContent":["/** PURE_IMPORTS_START _Observable,_util_isArray,_operators_map,_util_isObject,_from PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { map } from '../operators/map';\nimport { isObject } from '../util/isObject';\nimport { from } from './from';\nexport function forkJoin() {\n    var sources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        sources[_i] = arguments[_i];\n    }\n    if (sources.length === 1) {\n        var first_1 = sources[0];\n        if (isArray(first_1)) {\n            return forkJoinInternal(first_1, null);\n        }\n        if (isObject(first_1) && Object.getPrototypeOf(first_1) === Object.prototype) {\n            var keys = Object.keys(first_1);\n            return forkJoinInternal(keys.map(function (key) { return first_1[key]; }), keys);\n        }\n    }\n    if (typeof sources[sources.length - 1] === 'function') {\n        var resultSelector_1 = sources.pop();\n        sources = (sources.length === 1 && isArray(sources[0])) ? sources[0] : sources;\n        return forkJoinInternal(sources, null).pipe(map(function (args) { return resultSelector_1.apply(void 0, args); }));\n    }\n    return forkJoinInternal(sources, null);\n}\nfunction forkJoinInternal(sources, keys) {\n    return new Observable(function (subscriber) {\n        var len = sources.length;\n        if (len === 0) {\n            subscriber.complete();\n            return;\n        }\n        var values = new Array(len);\n        var completed = 0;\n        var emitted = 0;\n        var _loop_1 = function (i) {\n            var source = from(sources[i]);\n            var hasValue = false;\n            subscriber.add(source.subscribe({\n                next: function (value) {\n                    if (!hasValue) {\n                        hasValue = true;\n                        emitted++;\n                    }\n                    values[i] = value;\n                },\n                error: function (err) { return subscriber.error(err); },\n                complete: function () {\n                    completed++;\n                    if (completed === len || !hasValue) {\n                        if (emitted === len) {\n                            subscriber.next(keys ?\n                                keys.reduce(function (result, key, i) { return (result[key] = values[i], result); }, {}) :\n                                values);\n                        }\n                        subscriber.complete();\n                    }\n                }\n            }));\n        };\n        for (var i = 0; i < len; i++) {\n            _loop_1(i);\n        }\n    });\n}\n//# sourceMappingURL=forkJoin.js.map\n"]},"metadata":{},"sourceType":"module"}