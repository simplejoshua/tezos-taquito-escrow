{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_map,_observable_from,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { map } from './map';\nimport { from } from '../observable/from';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function mergeMap(project, resultSelector, concurrent) {\n  if (concurrent === void 0) {\n    concurrent = Number.POSITIVE_INFINITY;\n  }\n\n  if (typeof resultSelector === 'function') {\n    return function (source) {\n      return source.pipe(mergeMap(function (a, i) {\n        return from(project(a, i)).pipe(map(function (b, ii) {\n          return resultSelector(a, b, i, ii);\n        }));\n      }, concurrent));\n    };\n  } else if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n\n  return function (source) {\n    return source.lift(new MergeMapOperator(project, concurrent));\n  };\n}\n\nvar MergeMapOperator = /*@__PURE__*/function () {\n  function MergeMapOperator(project, concurrent) {\n    if (concurrent === void 0) {\n      concurrent = Number.POSITIVE_INFINITY;\n    }\n\n    this.project = project;\n    this.concurrent = concurrent;\n  }\n\n  MergeMapOperator.prototype.call = function (observer, source) {\n    return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));\n  };\n\n  return MergeMapOperator;\n}();\n\nexport { MergeMapOperator };\n\nvar MergeMapSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(MergeMapSubscriber, _super);\n\n  function MergeMapSubscriber(destination, project, concurrent) {\n    if (concurrent === void 0) {\n      concurrent = Number.POSITIVE_INFINITY;\n    }\n\n    var _this = _super.call(this, destination) || this;\n\n    _this.project = project;\n    _this.concurrent = concurrent;\n    _this.hasCompleted = false;\n    _this.buffer = [];\n    _this.active = 0;\n    _this.index = 0;\n    return _this;\n  }\n\n  MergeMapSubscriber.prototype._next = function (value) {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  };\n\n  MergeMapSubscriber.prototype._tryNext = function (value) {\n    var result;\n    var index = this.index++;\n\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    this.active++;\n\n    this._innerSub(result);\n  };\n\n  MergeMapSubscriber.prototype._innerSub = function (ish) {\n    var innerSubscriber = new SimpleInnerSubscriber(this);\n    var destination = this.destination;\n    destination.add(innerSubscriber);\n    var innerSubscription = innerSubscribe(ish, innerSubscriber);\n\n    if (innerSubscription !== innerSubscriber) {\n      destination.add(innerSubscription);\n    }\n  };\n\n  MergeMapSubscriber.prototype._complete = function () {\n    this.hasCompleted = true;\n\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n\n    this.unsubscribe();\n  };\n\n  MergeMapSubscriber.prototype.notifyNext = function (innerValue) {\n    this.destination.next(innerValue);\n  };\n\n  MergeMapSubscriber.prototype.notifyComplete = function () {\n    var buffer = this.buffer;\n    this.active--;\n\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  };\n\n  return MergeMapSubscriber;\n}(SimpleOuterSubscriber);\n\nexport { MergeMapSubscriber };\nexport var flatMap = mergeMap;","map":{"version":3,"sources":["../../../src/internal/operators/mergeMap.ts"],"names":[],"mappings":"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","sourcesContent":["/** PURE_IMPORTS_START tslib,_map,_observable_from,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { map } from './map';\nimport { from } from '../observable/from';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function mergeMap(project, resultSelector, concurrent) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    if (typeof resultSelector === 'function') {\n        return function (source) { return source.pipe(mergeMap(function (a, i) { return from(project(a, i)).pipe(map(function (b, ii) { return resultSelector(a, b, i, ii); })); }, concurrent)); };\n    }\n    else if (typeof resultSelector === 'number') {\n        concurrent = resultSelector;\n    }\n    return function (source) { return source.lift(new MergeMapOperator(project, concurrent)); };\n}\nvar MergeMapOperator = /*@__PURE__*/ (function () {\n    function MergeMapOperator(project, concurrent) {\n        if (concurrent === void 0) {\n            concurrent = Number.POSITIVE_INFINITY;\n        }\n        this.project = project;\n        this.concurrent = concurrent;\n    }\n    MergeMapOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));\n    };\n    return MergeMapOperator;\n}());\nexport { MergeMapOperator };\nvar MergeMapSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MergeMapSubscriber, _super);\n    function MergeMapSubscriber(destination, project, concurrent) {\n        if (concurrent === void 0) {\n            concurrent = Number.POSITIVE_INFINITY;\n        }\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.concurrent = concurrent;\n        _this.hasCompleted = false;\n        _this.buffer = [];\n        _this.active = 0;\n        _this.index = 0;\n        return _this;\n    }\n    MergeMapSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            this._tryNext(value);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeMapSubscriber.prototype._tryNext = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.active++;\n        this._innerSub(result);\n    };\n    MergeMapSubscriber.prototype._innerSub = function (ish) {\n        var innerSubscriber = new SimpleInnerSubscriber(this);\n        var destination = this.destination;\n        destination.add(innerSubscriber);\n        var innerSubscription = innerSubscribe(ish, innerSubscriber);\n        if (innerSubscription !== innerSubscriber) {\n            destination.add(innerSubscription);\n        }\n    };\n    MergeMapSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n        this.unsubscribe();\n    };\n    MergeMapSubscriber.prototype.notifyNext = function (innerValue) {\n        this.destination.next(innerValue);\n    };\n    MergeMapSubscriber.prototype.notifyComplete = function () {\n        var buffer = this.buffer;\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return MergeMapSubscriber;\n}(SimpleOuterSubscriber));\nexport { MergeMapSubscriber };\nexport var flatMap = mergeMap;\n//# sourceMappingURL=mergeMap.js.map\n"]},"metadata":{},"sourceType":"module"}