{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { TransportType, ExtensionMessageTarget, TransportStatus, Origin } from '@airgap/beacon-types';\nimport { Transport, PeerManager, Logger, windowRef } from '@airgap/beacon-core';\nimport { PostMessageClient } from './PostMessageClient';\nconst logger = new Logger('PostMessageTransport');\nlet listeningForExtensions = false;\nlet extensionsPromise;\nlet extensions;\n\nconst addExtension = extension => {\n  if (!extensions) {\n    extensions = [];\n  }\n\n  if (!extensions.some(ext => ext.id === extension.id)) {\n    extensions.push(extension);\n    windowRef.postMessage('extensionsUpdated', windowRef.location.origin);\n  }\n};\n/**\n * @internalapi\n *\n *\n */\n\n\nexport class PostMessageTransport extends Transport {\n  constructor(name, keyPair, storage, storageKey) {\n    super(name, new PostMessageClient(name, keyPair), new PeerManager(storage, storageKey));\n    this.type = TransportType.POST_MESSAGE;\n  }\n\n  static isAvailable() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return new Promise(resolve => {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const fn = event => {\n          const data = event.data;\n\n          if (data && data.payload === 'pong') {\n            resolve(true);\n            windowRef.removeEventListener('message', fn);\n          }\n        };\n\n        windowRef.addEventListener('message', fn);\n        const message = {\n          target: ExtensionMessageTarget.EXTENSION,\n          payload: 'ping'\n        }; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n        windowRef.postMessage(message, windowRef.location.origin);\n      });\n    });\n  }\n\n  static getAvailableExtensions() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (extensionsPromise) {\n        return extensionsPromise;\n      }\n\n      if (extensions) {\n        return extensions;\n      }\n\n      extensions = [];\n      extensionsPromise = new Promise(resolve => {\n        PostMessageTransport.listenForExtensions();\n        setTimeout(() => {\n          resolve(extensions !== null && extensions !== void 0 ? extensions : []);\n        }, 1000);\n      }).finally(() => {\n        extensionsPromise = undefined;\n      });\n      return extensionsPromise;\n    });\n  }\n\n  static listenForExtensions() {\n    if (listeningForExtensions) {\n      return;\n    } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n    const fn = event => {\n      if (event.source !== windowRef || event.origin !== windowRef.location.origin) {\n        // TODO: Add to error handler: console.debug('[Beacon]: Event received from untrusted origin')\n        return;\n      }\n\n      const data = event.data;\n      const sender = data.sender;\n\n      if (data && data.payload === 'pong' && sender) {\n        logger.log('getAvailableExtensions', `extension \"${sender.name}\" is available`, sender);\n        addExtension(sender);\n      }\n    };\n\n    windowRef.addEventListener('message', fn);\n    const message = {\n      target: ExtensionMessageTarget.EXTENSION,\n      payload: 'ping'\n    }; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    windowRef.postMessage(message, windowRef.location.origin);\n    listeningForExtensions = true;\n  }\n\n  connect() {\n    const _super = Object.create(null, {\n      connect: {\n        get: () => super.connect\n      }\n    });\n\n    return __awaiter(this, void 0, void 0, function* () {\n      logger.log('connect');\n\n      if (this._isConnected !== TransportStatus.NOT_CONNECTED) {\n        return;\n      }\n\n      this._isConnected = TransportStatus.CONNECTING;\n      const knownPeers = yield this.getPeers();\n\n      if (knownPeers.length > 0) {\n        logger.log('connect', `connecting to ${knownPeers.length} peers`);\n        const connectionPromises = knownPeers.map(peer => __awaiter(this, void 0, void 0, function* () {\n          return this.listen(peer.publicKey);\n        }));\n        Promise.all(connectionPromises).catch(error => logger.error('connect', error));\n      }\n\n      yield this.startOpenChannelListener();\n      yield _super.connect.call(this);\n    });\n  }\n\n  startOpenChannelListener() {\n    return __awaiter(this, void 0, void 0, function* () {//\n    });\n  }\n\n  getPairingRequestInfo() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.client.getPairingRequestInfo();\n    });\n  }\n\n  listen(publicKey) {\n    return __awaiter(this, void 0, void 0, function* () {\n      logger.log('listen', publicKey);\n      yield this.client.listenForEncryptedMessage(publicKey, (message, context) => {\n        const connectionContext = {\n          origin: Origin.EXTENSION,\n          id: context.id\n        };\n        this.notifyListeners(message, connectionContext).catch(error => {\n          throw error;\n        });\n      }).catch(error => {\n        throw error;\n      });\n    });\n  }\n\n}","map":{"version":3,"sources":["../../src/PostMessageTransport.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { TransportType, ExtensionMessageTarget, TransportStatus, Origin } from '@airgap/beacon-types';\nimport { Transport, PeerManager, Logger, windowRef } from '@airgap/beacon-core';\nimport { PostMessageClient } from './PostMessageClient';\nconst logger = new Logger('PostMessageTransport');\nlet listeningForExtensions = false;\nlet extensionsPromise;\nlet extensions;\nconst addExtension = (extension) => {\n    if (!extensions) {\n        extensions = [];\n    }\n    if (!extensions.some((ext) => ext.id === extension.id)) {\n        extensions.push(extension);\n        windowRef.postMessage('extensionsUpdated', windowRef.location.origin);\n    }\n};\n/**\n * @internalapi\n *\n *\n */\nexport class PostMessageTransport extends Transport {\n    constructor(name, keyPair, storage, storageKey) {\n        super(name, new PostMessageClient(name, keyPair), new PeerManager(storage, storageKey));\n        this.type = TransportType.POST_MESSAGE;\n    }\n    static isAvailable() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve) => {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                const fn = (event) => {\n                    const data = event.data;\n                    if (data && data.payload === 'pong') {\n                        resolve(true);\n                        windowRef.removeEventListener('message', fn);\n                    }\n                };\n                windowRef.addEventListener('message', fn);\n                const message = {\n                    target: ExtensionMessageTarget.EXTENSION,\n                    payload: 'ping'\n                };\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                windowRef.postMessage(message, windowRef.location.origin);\n            });\n        });\n    }\n    static getAvailableExtensions() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (extensionsPromise) {\n                return extensionsPromise;\n            }\n            if (extensions) {\n                return extensions;\n            }\n            extensions = [];\n            extensionsPromise = new Promise((resolve) => {\n                PostMessageTransport.listenForExtensions();\n                setTimeout(() => {\n                    resolve(extensions !== null && extensions !== void 0 ? extensions : []);\n                }, 1000);\n            }).finally(() => {\n                extensionsPromise = undefined;\n            });\n            return extensionsPromise;\n        });\n    }\n    static listenForExtensions() {\n        if (listeningForExtensions) {\n            return;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const fn = (event) => {\n            if (event.source !== windowRef || event.origin !== windowRef.location.origin) {\n                // TODO: Add to error handler: console.debug('[Beacon]: Event received from untrusted origin')\n                return;\n            }\n            const data = event.data;\n            const sender = data.sender;\n            if (data && data.payload === 'pong' && sender) {\n                logger.log('getAvailableExtensions', `extension \"${sender.name}\" is available`, sender);\n                addExtension(sender);\n            }\n        };\n        windowRef.addEventListener('message', fn);\n        const message = {\n            target: ExtensionMessageTarget.EXTENSION,\n            payload: 'ping'\n        };\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        windowRef.postMessage(message, windowRef.location.origin);\n        listeningForExtensions = true;\n    }\n    connect() {\n        const _super = Object.create(null, {\n            connect: { get: () => super.connect }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            logger.log('connect');\n            if (this._isConnected !== TransportStatus.NOT_CONNECTED) {\n                return;\n            }\n            this._isConnected = TransportStatus.CONNECTING;\n            const knownPeers = yield this.getPeers();\n            if (knownPeers.length > 0) {\n                logger.log('connect', `connecting to ${knownPeers.length} peers`);\n                const connectionPromises = knownPeers.map((peer) => __awaiter(this, void 0, void 0, function* () { return this.listen(peer.publicKey); }));\n                Promise.all(connectionPromises).catch((error) => logger.error('connect', error));\n            }\n            yield this.startOpenChannelListener();\n            yield _super.connect.call(this);\n        });\n    }\n    startOpenChannelListener() {\n        return __awaiter(this, void 0, void 0, function* () {\n            //\n        });\n    }\n    getPairingRequestInfo() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.client.getPairingRequestInfo();\n        });\n    }\n    listen(publicKey) {\n        return __awaiter(this, void 0, void 0, function* () {\n            logger.log('listen', publicKey);\n            yield this.client\n                .listenForEncryptedMessage(publicKey, (message, context) => {\n                const connectionContext = {\n                    origin: Origin.EXTENSION,\n                    id: context.id\n                };\n                this.notifyListeners(message, connectionContext).catch((error) => {\n                    throw error;\n                });\n            })\n                .catch((error) => {\n                throw error;\n            });\n        });\n    }\n}\n//# sourceMappingURL=PostMessageTransport.js.map"]},"metadata":{},"sourceType":"module"}