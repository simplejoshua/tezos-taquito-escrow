{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { Serializer } from '@airgap/beacon-core';\nimport { ExtensionMessageTarget, NetworkType } from '@airgap/beacon-types';\nimport { windowRef } from '@airgap/beacon-core';\nimport { getTzip10Link } from '../../utils/get-tzip10-link';\nimport { isAndroid, isIOS } from '../../utils/platform';\nimport { PostMessageTransport } from '@airgap/beacon-transport-postmessage';\nimport { desktopList, extensionList, iOSList, webList } from './wallet-lists';\n/**\n * Initialize with tezos wallets for backwards compatibility\n */\n\nlet localDesktopList = desktopList;\nlet localExtensionList = extensionList;\nlet localWebList = webList;\nlet localiOSList = iOSList;\nexport const getDesktopList = () => {\n  return localDesktopList;\n};\nexport const setDesktopList = desktopList => {\n  localDesktopList = desktopList;\n};\nexport const getExtensionList = () => {\n  return localExtensionList;\n};\nexport const setExtensionList = extensionList => {\n  localExtensionList = extensionList;\n};\nexport const getWebList = () => {\n  return localWebList;\n};\nexport const setWebList = webList => {\n  localWebList = webList;\n};\nexport const getiOSList = () => {\n  return localiOSList;\n};\nexport const setiOSList = iosList => {\n  localiOSList = iosList;\n};\nconst serializer = new Serializer();\nconst defaultExtensions = ['ookjlbkiijinhpmnjffcofjonbfbgaoc', 'gpfndedineagiepkpinficbcbbgjoenn' // Spire\n];\nexport var Platform;\n\n(function (Platform) {\n  Platform[Platform[\"DESKTOP\"] = 0] = \"DESKTOP\";\n  Platform[Platform[\"IOS\"] = 1] = \"IOS\";\n  Platform[Platform[\"ANDROID\"] = 2] = \"ANDROID\";\n})(Platform || (Platform = {}));\n\nexport var WalletType;\n\n(function (WalletType) {\n  WalletType[\"IOS\"] = \"ios\";\n  WalletType[\"ANDROID\"] = \"android\";\n  WalletType[\"EXTENSION\"] = \"extension\";\n  WalletType[\"DESKTOP\"] = \"desktop\";\n  WalletType[\"WEB\"] = \"web\";\n})(WalletType || (WalletType = {}));\n/**\n * @internalapi\n *\n */\n\n\nexport class Pairing {\n  static getPlatfrom() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return isAndroid(window) ? Platform.ANDROID : isIOS(window) ? Platform.IOS : Platform.DESKTOP;\n    });\n  }\n\n  static getPairingInfo(pairingPayload, statusUpdateHandler, mobileWalletHandler, platform) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const activePlatform = platform !== null && platform !== void 0 ? platform : yield Pairing.getPlatfrom();\n      const pairingCode = pairingPayload.p2pSyncCode;\n      const postmessageSyncCode = pairingPayload.postmessageSyncCode;\n      const preferredNetwork = pairingPayload.preferredNetwork;\n\n      switch (activePlatform) {\n        case Platform.DESKTOP:\n          return Pairing.getDesktopPairingAlert(pairingCode, statusUpdateHandler, postmessageSyncCode, mobileWalletHandler, preferredNetwork);\n\n        case Platform.IOS:\n          return Pairing.getIOSPairingAlert(pairingCode, statusUpdateHandler, preferredNetwork);\n\n        case Platform.ANDROID:\n          return Pairing.getAndroidPairingAlert(pairingCode, statusUpdateHandler, preferredNetwork);\n\n        default:\n          throw new Error('platform unknown');\n      }\n    });\n  }\n\n  static getDesktopPairingAlert(pairingCode, statusUpdateHandler, postmessageSyncCode, mobileWalletHandler, network) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const availableExtensions = yield PostMessageTransport.getAvailableExtensions();\n      availableExtensions.forEach(ext => {\n        const index = defaultExtensions.indexOf(ext.id);\n\n        if (index >= 0) {\n          defaultExtensions.splice(index, 1);\n        }\n      });\n      const walletLists = [];\n\n      if (getExtensionList().length > 0) {\n        walletLists.push({\n          title: 'Browser Extensions',\n          type: WalletType.EXTENSION,\n          wallets: [...availableExtensions.map(app => {\n            var _a, _b, _c, _d, _e;\n\n            const ext = getExtensionList().find(extEl => extEl.id === app.id);\n            return {\n              key: (_a = ext === null || ext === void 0 ? void 0 : ext.key) !== null && _a !== void 0 ? _a : app.id,\n              name: (_b = app.name) !== null && _b !== void 0 ? _b : ext === null || ext === void 0 ? void 0 : ext.name,\n              logo: (_c = app.iconUrl) !== null && _c !== void 0 ? _c : ext === null || ext === void 0 ? void 0 : ext.logo,\n              shortName: (_d = app.shortName) !== null && _d !== void 0 ? _d : ext === null || ext === void 0 ? void 0 : ext.shortName,\n              color: (_e = app.color) !== null && _e !== void 0 ? _e : ext === null || ext === void 0 ? void 0 : ext.color,\n              enabled: true,\n              clicked: false,\n\n              clickHandler() {\n                return __awaiter(this, void 0, void 0, function* () {\n                  if (this.clicked) {\n                    return;\n                  }\n\n                  this.clicked = true;\n\n                  if (postmessageSyncCode) {\n                    const postmessageCode = yield serializer.serialize(yield postmessageSyncCode());\n                    const message = {\n                      target: ExtensionMessageTarget.EXTENSION,\n                      payload: postmessageCode,\n                      targetId: app.id\n                    }; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n                    windowRef.postMessage(message, windowRef.location.origin);\n                  }\n\n                  statusUpdateHandler(WalletType.EXTENSION, this);\n                });\n              }\n\n            };\n          }), ...getExtensionList().filter(app => defaultExtensions.some(extId => extId === app.id)).map(app => ({\n            key: app.key,\n            name: app.name,\n            shortName: app.shortName,\n            color: app.color,\n            logo: app.logo,\n            enabled: false,\n            clickHandler: () => {// Don't do anything\n            }\n          }))].sort((a, b) => a.key.localeCompare(b.key))\n        });\n      }\n\n      if (getDesktopList().length > 0) {\n        walletLists.push({\n          title: 'Desktop & Web Wallets',\n          type: WalletType.DESKTOP,\n          wallets: [...getDesktopList().map(app => ({\n            key: app.key,\n            name: app.name,\n            shortName: app.shortName,\n            color: app.color,\n            logo: app.logo,\n            enabled: true,\n            clicked: false,\n\n            clickHandler() {\n              return __awaiter(this, void 0, void 0, function* () {\n                if (this.clicked) {\n                  return;\n                }\n\n                this.clicked = true;\n                const code = yield serializer.serialize(yield pairingCode());\n                const link = getTzip10Link(app.deepLink, code);\n                window.open(link, '_blank');\n                statusUpdateHandler(WalletType.DESKTOP, this, true);\n              });\n            }\n\n          })), ...(yield Pairing.getWebList(pairingCode, statusUpdateHandler, network))].sort((a, b) => a.key.localeCompare(b.key))\n        });\n      }\n\n      if (getiOSList().length > 0) {\n        walletLists.push({\n          title: 'Mobile Wallets',\n          type: WalletType.IOS,\n          wallets: [...getiOSList().map(app => ({\n            key: app.key,\n            name: app.name,\n            shortName: app.shortName,\n            color: app.color,\n            logo: app.logo,\n            enabled: true,\n            clicked: false,\n\n            clickHandler() {\n              return __awaiter(this, void 0, void 0, function* () {\n                if (this.clicked) {\n                  return;\n                }\n\n                this.clicked = true;\n                const code = yield serializer.serialize(yield pairingCode());\n                mobileWalletHandler(code);\n                statusUpdateHandler(WalletType.IOS, this, true);\n              });\n            }\n\n          }))].sort((a, b) => a.key.localeCompare(b.key))\n        });\n      }\n\n      return {\n        walletLists,\n        buttons: []\n      };\n    });\n  }\n\n  static getIOSPairingAlert(pairingCode, statusUpdateHandler, network) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return {\n        walletLists: [{\n          title: 'Mobile Wallets',\n          type: WalletType.IOS,\n          wallets: getiOSList().map(app => ({\n            key: app.key,\n            name: app.name,\n            shortName: app.shortName,\n            color: app.color,\n            logo: app.logo,\n            enabled: true,\n            clicked: false,\n\n            clickHandler() {\n              var _a;\n\n              return __awaiter(this, void 0, void 0, function* () {\n                if (this.clicked) {\n                  return;\n                }\n\n                this.clicked = true;\n                const code = yield serializer.serialize(yield pairingCode());\n                const link = getTzip10Link((_a = app.deepLink) !== null && _a !== void 0 ? _a : app.universalLink, code); // iOS does not trigger deeplinks with `window.open(...)`. The only way is using a normal link. So we have to work around that.\n\n                const a = document.createElement('a');\n                a.setAttribute('href', link);\n                a.dispatchEvent(new MouseEvent('click', {\n                  view: window,\n                  bubbles: true,\n                  cancelable: true\n                }));\n                statusUpdateHandler(WalletType.IOS, this, true);\n              });\n            }\n\n          })).sort((a, b) => a.key.localeCompare(b.key))\n        }, {\n          title: 'Web Wallets',\n          type: WalletType.WEB,\n          wallets: [...(yield Pairing.getWebList(pairingCode, statusUpdateHandler, network))].sort((a, b) => a.key.localeCompare(b.key))\n        }],\n        buttons: []\n      };\n    });\n  }\n\n  static getAndroidPairingAlert(pairingCode, statusUpdateHandler, network) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return {\n        walletLists: [{\n          title: 'Web Wallets',\n          type: WalletType.WEB,\n          wallets: [...(yield Pairing.getWebList(pairingCode, statusUpdateHandler, network))].sort((a, b) => a.key.localeCompare(b.key))\n        }],\n        buttons: [{\n          title: 'Mobile Wallets',\n          text: 'Connect Wallet',\n          clickHandler: () => __awaiter(this, void 0, void 0, function* () {\n            const code = yield serializer.serialize(yield pairingCode());\n            const qrLink = getTzip10Link('tezos://', code);\n            window.open(qrLink, '_blank');\n            statusUpdateHandler(WalletType.ANDROID);\n          })\n        }]\n      };\n    });\n  }\n\n  static getWebList(pairingCode, statusUpdateHandler, network) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return getWebList().map(app => ({\n        key: app.key,\n        name: app.name,\n        shortName: app.shortName,\n        color: app.color,\n        logo: app.logo,\n        enabled: true,\n        clicked: false,\n\n        clickHandler() {\n          if (this.clicked) {\n            return;\n          }\n\n          this.clicked = true;\n          const newTab = window.open('', '_blank');\n          pairingCode().then(code => serializer.serialize(code)).then(code => {\n            var _a;\n\n            const link = getTzip10Link((_a = app.links[network]) !== null && _a !== void 0 ? _a : app.links[NetworkType.MAINNET], code);\n\n            if (newTab) {\n              newTab.location.href = link;\n            } else {\n              window.open(link, '_blank');\n            }\n\n            statusUpdateHandler(WalletType.WEB, this, true);\n          }).catch(error => {\n            // eslint-disable-next-line no-console\n            console.error(error);\n          });\n        }\n\n      })).sort((a, b) => a.key.localeCompare(b.key));\n    });\n  }\n\n}","map":{"version":3,"sources":["../../../../src/ui/alert/Pairing.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Serializer } from '@airgap/beacon-core';\nimport { ExtensionMessageTarget, NetworkType } from '@airgap/beacon-types';\nimport { windowRef } from '@airgap/beacon-core';\nimport { getTzip10Link } from '../../utils/get-tzip10-link';\nimport { isAndroid, isIOS } from '../../utils/platform';\nimport { PostMessageTransport } from '@airgap/beacon-transport-postmessage';\nimport { desktopList, extensionList, iOSList, webList } from './wallet-lists';\n/**\n * Initialize with tezos wallets for backwards compatibility\n */\nlet localDesktopList = desktopList;\nlet localExtensionList = extensionList;\nlet localWebList = webList;\nlet localiOSList = iOSList;\nexport const getDesktopList = () => {\n    return localDesktopList;\n};\nexport const setDesktopList = (desktopList) => {\n    localDesktopList = desktopList;\n};\nexport const getExtensionList = () => {\n    return localExtensionList;\n};\nexport const setExtensionList = (extensionList) => {\n    localExtensionList = extensionList;\n};\nexport const getWebList = () => {\n    return localWebList;\n};\nexport const setWebList = (webList) => {\n    localWebList = webList;\n};\nexport const getiOSList = () => {\n    return localiOSList;\n};\nexport const setiOSList = (iosList) => {\n    localiOSList = iosList;\n};\nconst serializer = new Serializer();\nconst defaultExtensions = [\n    'ookjlbkiijinhpmnjffcofjonbfbgaoc',\n    'gpfndedineagiepkpinficbcbbgjoenn' // Spire\n];\nexport var Platform;\n(function (Platform) {\n    Platform[Platform[\"DESKTOP\"] = 0] = \"DESKTOP\";\n    Platform[Platform[\"IOS\"] = 1] = \"IOS\";\n    Platform[Platform[\"ANDROID\"] = 2] = \"ANDROID\";\n})(Platform || (Platform = {}));\nexport var WalletType;\n(function (WalletType) {\n    WalletType[\"IOS\"] = \"ios\";\n    WalletType[\"ANDROID\"] = \"android\";\n    WalletType[\"EXTENSION\"] = \"extension\";\n    WalletType[\"DESKTOP\"] = \"desktop\";\n    WalletType[\"WEB\"] = \"web\";\n})(WalletType || (WalletType = {}));\n/**\n * @internalapi\n *\n */\nexport class Pairing {\n    static getPlatfrom() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return isAndroid(window) ? Platform.ANDROID : isIOS(window) ? Platform.IOS : Platform.DESKTOP;\n        });\n    }\n    static getPairingInfo(pairingPayload, statusUpdateHandler, mobileWalletHandler, platform) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const activePlatform = platform !== null && platform !== void 0 ? platform : (yield Pairing.getPlatfrom());\n            const pairingCode = pairingPayload.p2pSyncCode;\n            const postmessageSyncCode = pairingPayload.postmessageSyncCode;\n            const preferredNetwork = pairingPayload.preferredNetwork;\n            switch (activePlatform) {\n                case Platform.DESKTOP:\n                    return Pairing.getDesktopPairingAlert(pairingCode, statusUpdateHandler, postmessageSyncCode, mobileWalletHandler, preferredNetwork);\n                case Platform.IOS:\n                    return Pairing.getIOSPairingAlert(pairingCode, statusUpdateHandler, preferredNetwork);\n                case Platform.ANDROID:\n                    return Pairing.getAndroidPairingAlert(pairingCode, statusUpdateHandler, preferredNetwork);\n                default:\n                    throw new Error('platform unknown');\n            }\n        });\n    }\n    static getDesktopPairingAlert(pairingCode, statusUpdateHandler, postmessageSyncCode, mobileWalletHandler, network) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const availableExtensions = yield PostMessageTransport.getAvailableExtensions();\n            availableExtensions.forEach((ext) => {\n                const index = defaultExtensions.indexOf(ext.id);\n                if (index >= 0) {\n                    defaultExtensions.splice(index, 1);\n                }\n            });\n            const walletLists = [];\n            if (getExtensionList().length > 0) {\n                walletLists.push({\n                    title: 'Browser Extensions',\n                    type: WalletType.EXTENSION,\n                    wallets: [\n                        ...availableExtensions.map((app) => {\n                            var _a, _b, _c, _d, _e;\n                            const ext = getExtensionList().find((extEl) => extEl.id === app.id);\n                            return {\n                                key: (_a = ext === null || ext === void 0 ? void 0 : ext.key) !== null && _a !== void 0 ? _a : app.id,\n                                name: (_b = app.name) !== null && _b !== void 0 ? _b : ext === null || ext === void 0 ? void 0 : ext.name,\n                                logo: (_c = app.iconUrl) !== null && _c !== void 0 ? _c : ext === null || ext === void 0 ? void 0 : ext.logo,\n                                shortName: (_d = app.shortName) !== null && _d !== void 0 ? _d : ext === null || ext === void 0 ? void 0 : ext.shortName,\n                                color: (_e = app.color) !== null && _e !== void 0 ? _e : ext === null || ext === void 0 ? void 0 : ext.color,\n                                enabled: true,\n                                clicked: false,\n                                clickHandler() {\n                                    return __awaiter(this, void 0, void 0, function* () {\n                                        if (this.clicked) {\n                                            return;\n                                        }\n                                        this.clicked = true;\n                                        if (postmessageSyncCode) {\n                                            const postmessageCode = yield serializer.serialize(yield postmessageSyncCode());\n                                            const message = {\n                                                target: ExtensionMessageTarget.EXTENSION,\n                                                payload: postmessageCode,\n                                                targetId: app.id\n                                            };\n                                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                                            windowRef.postMessage(message, windowRef.location.origin);\n                                        }\n                                        statusUpdateHandler(WalletType.EXTENSION, this);\n                                    });\n                                }\n                            };\n                        }),\n                        ...getExtensionList()\n                            .filter((app) => defaultExtensions.some((extId) => extId === app.id))\n                            .map((app) => ({\n                            key: app.key,\n                            name: app.name,\n                            shortName: app.shortName,\n                            color: app.color,\n                            logo: app.logo,\n                            enabled: false,\n                            clickHandler: () => {\n                                // Don't do anything\n                            }\n                        }))\n                    ].sort((a, b) => a.key.localeCompare(b.key))\n                });\n            }\n            if (getDesktopList().length > 0) {\n                walletLists.push({\n                    title: 'Desktop & Web Wallets',\n                    type: WalletType.DESKTOP,\n                    wallets: [\n                        ...getDesktopList().map((app) => ({\n                            key: app.key,\n                            name: app.name,\n                            shortName: app.shortName,\n                            color: app.color,\n                            logo: app.logo,\n                            enabled: true,\n                            clicked: false,\n                            clickHandler() {\n                                return __awaiter(this, void 0, void 0, function* () {\n                                    if (this.clicked) {\n                                        return;\n                                    }\n                                    this.clicked = true;\n                                    const code = yield serializer.serialize(yield pairingCode());\n                                    const link = getTzip10Link(app.deepLink, code);\n                                    window.open(link, '_blank');\n                                    statusUpdateHandler(WalletType.DESKTOP, this, true);\n                                });\n                            }\n                        })),\n                        ...(yield Pairing.getWebList(pairingCode, statusUpdateHandler, network))\n                    ].sort((a, b) => a.key.localeCompare(b.key))\n                });\n            }\n            if (getiOSList().length > 0) {\n                walletLists.push({\n                    title: 'Mobile Wallets',\n                    type: WalletType.IOS,\n                    wallets: [\n                        ...getiOSList().map((app) => ({\n                            key: app.key,\n                            name: app.name,\n                            shortName: app.shortName,\n                            color: app.color,\n                            logo: app.logo,\n                            enabled: true,\n                            clicked: false,\n                            clickHandler() {\n                                return __awaiter(this, void 0, void 0, function* () {\n                                    if (this.clicked) {\n                                        return;\n                                    }\n                                    this.clicked = true;\n                                    const code = yield serializer.serialize(yield pairingCode());\n                                    mobileWalletHandler(code);\n                                    statusUpdateHandler(WalletType.IOS, this, true);\n                                });\n                            }\n                        }))\n                    ].sort((a, b) => a.key.localeCompare(b.key))\n                });\n            }\n            return {\n                walletLists,\n                buttons: []\n            };\n        });\n    }\n    static getIOSPairingAlert(pairingCode, statusUpdateHandler, network) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return {\n                walletLists: [\n                    {\n                        title: 'Mobile Wallets',\n                        type: WalletType.IOS,\n                        wallets: getiOSList()\n                            .map((app) => ({\n                            key: app.key,\n                            name: app.name,\n                            shortName: app.shortName,\n                            color: app.color,\n                            logo: app.logo,\n                            enabled: true,\n                            clicked: false,\n                            clickHandler() {\n                                var _a;\n                                return __awaiter(this, void 0, void 0, function* () {\n                                    if (this.clicked) {\n                                        return;\n                                    }\n                                    this.clicked = true;\n                                    const code = yield serializer.serialize(yield pairingCode());\n                                    const link = getTzip10Link((_a = app.deepLink) !== null && _a !== void 0 ? _a : app.universalLink, code);\n                                    // iOS does not trigger deeplinks with `window.open(...)`. The only way is using a normal link. So we have to work around that.\n                                    const a = document.createElement('a');\n                                    a.setAttribute('href', link);\n                                    a.dispatchEvent(new MouseEvent('click', { view: window, bubbles: true, cancelable: true }));\n                                    statusUpdateHandler(WalletType.IOS, this, true);\n                                });\n                            }\n                        }))\n                            .sort((a, b) => a.key.localeCompare(b.key))\n                    },\n                    {\n                        title: 'Web Wallets',\n                        type: WalletType.WEB,\n                        wallets: [...(yield Pairing.getWebList(pairingCode, statusUpdateHandler, network))].sort((a, b) => a.key.localeCompare(b.key))\n                    }\n                ],\n                buttons: []\n            };\n        });\n    }\n    static getAndroidPairingAlert(pairingCode, statusUpdateHandler, network) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return {\n                walletLists: [\n                    {\n                        title: 'Web Wallets',\n                        type: WalletType.WEB,\n                        wallets: [...(yield Pairing.getWebList(pairingCode, statusUpdateHandler, network))].sort((a, b) => a.key.localeCompare(b.key))\n                    }\n                ],\n                buttons: [\n                    {\n                        title: 'Mobile Wallets',\n                        text: 'Connect Wallet',\n                        clickHandler: () => __awaiter(this, void 0, void 0, function* () {\n                            const code = yield serializer.serialize(yield pairingCode());\n                            const qrLink = getTzip10Link('tezos://', code);\n                            window.open(qrLink, '_blank');\n                            statusUpdateHandler(WalletType.ANDROID);\n                        })\n                    }\n                ]\n            };\n        });\n    }\n    static getWebList(pairingCode, statusUpdateHandler, network) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return getWebList()\n                .map((app) => ({\n                key: app.key,\n                name: app.name,\n                shortName: app.shortName,\n                color: app.color,\n                logo: app.logo,\n                enabled: true,\n                clicked: false,\n                clickHandler() {\n                    if (this.clicked) {\n                        return;\n                    }\n                    this.clicked = true;\n                    const newTab = window.open('', '_blank');\n                    pairingCode()\n                        .then((code) => serializer.serialize(code))\n                        .then((code) => {\n                        var _a;\n                        const link = getTzip10Link((_a = app.links[network]) !== null && _a !== void 0 ? _a : app.links[NetworkType.MAINNET], code);\n                        if (newTab) {\n                            newTab.location.href = link;\n                        }\n                        else {\n                            window.open(link, '_blank');\n                        }\n                        statusUpdateHandler(WalletType.WEB, this, true);\n                    })\n                        .catch((error) => {\n                        // eslint-disable-next-line no-console\n                        console.error(error);\n                    });\n                }\n            }))\n                .sort((a, b) => a.key.localeCompare(b.key));\n        });\n    }\n}\n//# sourceMappingURL=Pairing.js.map"]},"metadata":{},"sourceType":"module"}