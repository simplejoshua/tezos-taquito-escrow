{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subject,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function repeatWhen(notifier) {\n  return function (source) {\n    return source.lift(new RepeatWhenOperator(notifier));\n  };\n}\n\nvar RepeatWhenOperator = /*@__PURE__*/function () {\n  function RepeatWhenOperator(notifier) {\n    this.notifier = notifier;\n  }\n\n  RepeatWhenOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  };\n\n  return RepeatWhenOperator;\n}();\n\nvar RepeatWhenSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(RepeatWhenSubscriber, _super);\n\n  function RepeatWhenSubscriber(destination, notifier, source) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.notifier = notifier;\n    _this.source = source;\n    _this.sourceIsBeingSubscribedTo = true;\n    return _this;\n  }\n\n  RepeatWhenSubscriber.prototype.notifyNext = function () {\n    this.sourceIsBeingSubscribedTo = true;\n    this.source.subscribe(this);\n  };\n\n  RepeatWhenSubscriber.prototype.notifyComplete = function () {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return _super.prototype.complete.call(this);\n    }\n  };\n\n  RepeatWhenSubscriber.prototype.complete = function () {\n    this.sourceIsBeingSubscribedTo = false;\n\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      }\n\n      if (!this.retriesSubscription || this.retriesSubscription.closed) {\n        return _super.prototype.complete.call(this);\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.notifications.next(undefined);\n    }\n  };\n\n  RepeatWhenSubscriber.prototype._unsubscribe = function () {\n    var _a = this,\n        notifications = _a.notifications,\n        retriesSubscription = _a.retriesSubscription;\n\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = undefined;\n    }\n\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = undefined;\n    }\n\n    this.retries = undefined;\n  };\n\n  RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {\n    var _unsubscribe = this._unsubscribe;\n    this._unsubscribe = null;\n\n    _super.prototype._unsubscribeAndRecycle.call(this);\n\n    this._unsubscribe = _unsubscribe;\n    return this;\n  };\n\n  RepeatWhenSubscriber.prototype.subscribeToRetries = function () {\n    this.notifications = new Subject();\n    var retries;\n\n    try {\n      var notifier = this.notifier;\n      retries = notifier(this.notifications);\n    } catch (e) {\n      return _super.prototype.complete.call(this);\n    }\n\n    this.retries = retries;\n    this.retriesSubscription = innerSubscribe(retries, new SimpleInnerSubscriber(this));\n  };\n\n  return RepeatWhenSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"sources":["../../../src/internal/operators/repeatWhen.ts"],"names":[],"mappings":";AAGA,OAAO,KAAE,OAAT,MAAwB,OAAxB;AAIA,SAAS,OAAT,QAAS,YAAT;AAgCA,SAAM,qBAAN,EAA8B,cAA9B,EAA2F,qBAA3F,QAA2F,mBAA3F;AACE,OAAA,SAAO,UAAP,CAA6B,QAA7B,EAAkC;EACnC,OAAA,UAAA,MAAA,EAAA;IAAA,OAAA,MAAA,CAAA,IAAA,CAAA,IAAA,kBAAA,CAAA,QAAA,CAAA,CAAA;EAAA,CAAA;AAED;;IACE,kBAAA,GAAA,aAAmF,YAAA;EAA7D,SAAA,kBAAA,CAAQ,QAAR,EAA6D;IAClF,KAAA,QAAA,GAAA,QAAA;EAED;;EACE,kBAAc,CAAA,SAAd,CAAwB,IAAxB,GAA4B,UAAA,UAAA,EAAqB,MAArB,EAAiC;IAC9D,OAAA,MAAA,CAAA,SAAA,CAAA,IAAA,oBAAA,CAAA,UAAA,EAAA,KAAA,QAAA,EAAA,MAAA,CAAA,CAAA;EACH,CAFI;;EAEH,OAAA,kBAAA;AAOD,CAbqF,E;;IAa5C,oBAAA,GAAA,aAAA,UAA2B,MAA3B,EAA2B;EAOlE,OAAA,CAAA,SAAA,CAAA,oBAAA,EAAY,MAAZ;;EAAA,SAAA,oBAAA,CAGE,WAHF,EAGQ,QAHR,EAGoB,MAHpB,EAIC;IAHmB,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAA6D,WAA7D,KAA6D,IAA7D;;IACA,KAAA,CAAA,QAAA,GAAA,QAAA;IAJZ,KAAA,CAAA,MAAA,GAAA,MAAA;;IAMP,OAAA,KAAA;EAED;;EACE,oBAAK,CAAA,SAAL,CAAK,UAAL,GAAsC,YAAA;IACtC,KAAK,yBAAL,GAA4B,IAA5B;IACD,KAAA,MAAA,CAAA,SAAA,CAAA,IAAA;EAED,CAJE;;EAKA,oBAAS,CAAA,SAAT,CAAS,cAAT,GAA4C,YAAE;QAC5C,KAAA,yBAAA,KAAqB,K,EAAA;MACtB,OAAA,MAAA,CAAA,SAAA,CAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA;IACF;EAED,CALE;;EAMA,oBAAK,CAAA,SAAL,CAAK,QAAL,GAAsC,YAAC;IAEvC,KAAK,yBAAL,GAAqB,KAArB;;QACE,CAAA,KAAK,S,EAAY;UACf,CAAA,KAAK,O,EAAA;QACN,KAAA,kBAAA;MACD;;UACE,CAAA,KAAA,mBAAA,IAAa,KAAQ,mBAAR,CAAW,M,EAAA;QACzB,OAAA,MAAA,CAAA,SAAA,CAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA;MAED;;MACA,KAAK,sBAAL;;MACD,KAAA,aAAA,CAAA,IAAA,CAAA,SAAA;IACF;EAGD,CAhBE;;EAiBM,oBAAE,CAAA,SAAF,CAAE,YAAF,GAAE,YAAe;IACvB,IAAI,EAAA,GAAA,IAAJ;IAAA,IAAI,aAAe,GAAA,EAAA,CAAA,aAAnB;IAAA,IAAmB,mBAAA,GAAA,EAAA,CAAA,mBAAnB;;QACE,a,EAAc;MACd,aAAK,CAAA,WAAL;MACD,KAAA,aAAA,GAAA,SAAA;IACD;;QACE,mB,EAAoB;MACpB,mBAAK,CAAA,WAAL;MACD,KAAA,mBAAA,GAAA,SAAA;IACD;;IACD,KAAA,OAAA,GAAA,SAAA;EAGD,CAbQ;;EAcE,oBAAA,CAAA,SAAA,CAAA,sBAAA,GAAsB,YAAA;IAE9B,IAAI,YAAC,GAAY,KAAQ,YAAzB;IACA,KAAA,YAAA,GAAM,IAAN;;IACA,MAAK,CAAA,SAAL,CAAiB,sBAAjB,CAAiC,IAAjC,CAAiC,IAAjC;;IAEA,KAAA,YAAA,GAAY,YAAZ;IACD,OAAA,IAAA;EAED,CATU;;EAUR,oBAAK,CAAA,SAAL,CAAyB,kBAAzB,GAAmC,YAAA;IACnC,KAAI,aAAJ,GAAY,IAAA,OAAA,EAAZ;IACA,IAAI,OAAJ;;QACU;MACR,IAAA,QAAU,GAAA,KAAS,QAAnB;MACD,OAAA,GAAA,QAAA,CAAA,KAAA,aAAA,CAAA;IAAC,C,CACA,OAAA,CAAA,EAAA;MACD,OAAA,MAAA,CAAA,SAAA,CAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA;IACD;;IACA,KAAK,OAAL,GAAK,OAAL;IACD,KAAA,mBAAA,GAAA,cAAA,CAAA,OAAA,EAAA,IAAA,qBAAA,CAAA,IAAA,CAAA,CAAA;EACH,CAXI;;EAlEqC,OAAA,oBAAA;CAAA,C,qBAAA,C","sourcesContent":["/** PURE_IMPORTS_START tslib,_Subject,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function repeatWhen(notifier) {\n    return function (source) { return source.lift(new RepeatWhenOperator(notifier)); };\n}\nvar RepeatWhenOperator = /*@__PURE__*/ (function () {\n    function RepeatWhenOperator(notifier) {\n        this.notifier = notifier;\n    }\n    RepeatWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n    };\n    return RepeatWhenOperator;\n}());\nvar RepeatWhenSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RepeatWhenSubscriber, _super);\n    function RepeatWhenSubscriber(destination, notifier, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.notifier = notifier;\n        _this.source = source;\n        _this.sourceIsBeingSubscribedTo = true;\n        return _this;\n    }\n    RepeatWhenSubscriber.prototype.notifyNext = function () {\n        this.sourceIsBeingSubscribedTo = true;\n        this.source.subscribe(this);\n    };\n    RepeatWhenSubscriber.prototype.notifyComplete = function () {\n        if (this.sourceIsBeingSubscribedTo === false) {\n            return _super.prototype.complete.call(this);\n        }\n    };\n    RepeatWhenSubscriber.prototype.complete = function () {\n        this.sourceIsBeingSubscribedTo = false;\n        if (!this.isStopped) {\n            if (!this.retries) {\n                this.subscribeToRetries();\n            }\n            if (!this.retriesSubscription || this.retriesSubscription.closed) {\n                return _super.prototype.complete.call(this);\n            }\n            this._unsubscribeAndRecycle();\n            this.notifications.next(undefined);\n        }\n    };\n    RepeatWhenSubscriber.prototype._unsubscribe = function () {\n        var _a = this, notifications = _a.notifications, retriesSubscription = _a.retriesSubscription;\n        if (notifications) {\n            notifications.unsubscribe();\n            this.notifications = undefined;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = undefined;\n        }\n        this.retries = undefined;\n    };\n    RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {\n        var _unsubscribe = this._unsubscribe;\n        this._unsubscribe = null;\n        _super.prototype._unsubscribeAndRecycle.call(this);\n        this._unsubscribe = _unsubscribe;\n        return this;\n    };\n    RepeatWhenSubscriber.prototype.subscribeToRetries = function () {\n        this.notifications = new Subject();\n        var retries;\n        try {\n            var notifier = this.notifier;\n            retries = notifier(this.notifications);\n        }\n        catch (e) {\n            return _super.prototype.complete.call(this);\n        }\n        this.retries = retries;\n        this.retriesSubscription = innerSubscribe(retries, new SimpleInnerSubscriber(this));\n    };\n    return RepeatWhenSubscriber;\n}(SimpleOuterSubscriber));\n//# sourceMappingURL=repeatWhen.js.map\n"]},"metadata":{},"sourceType":"module"}