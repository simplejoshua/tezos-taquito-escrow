{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subject,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function retryWhen(notifier) {\n  return function (source) {\n    return source.lift(new RetryWhenOperator(notifier, source));\n  };\n}\n\nvar RetryWhenOperator = /*@__PURE__*/function () {\n  function RetryWhenOperator(notifier, source) {\n    this.notifier = notifier;\n    this.source = source;\n  }\n\n  RetryWhenOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  };\n\n  return RetryWhenOperator;\n}();\n\nvar RetryWhenSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(RetryWhenSubscriber, _super);\n\n  function RetryWhenSubscriber(destination, notifier, source) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.notifier = notifier;\n    _this.source = source;\n    return _this;\n  }\n\n  RetryWhenSubscriber.prototype.error = function (err) {\n    if (!this.isStopped) {\n      var errors = this.errors;\n      var retries = this.retries;\n      var retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n\n        try {\n          var notifier = this.notifier;\n          retries = notifier(errors);\n        } catch (e) {\n          return _super.prototype.error.call(this, e);\n        }\n\n        retriesSubscription = innerSubscribe(retries, new SimpleInnerSubscriber(this));\n      } else {\n        this.errors = undefined;\n        this.retriesSubscription = undefined;\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n      errors.next(err);\n    }\n  };\n\n  RetryWhenSubscriber.prototype._unsubscribe = function () {\n    var _a = this,\n        errors = _a.errors,\n        retriesSubscription = _a.retriesSubscription;\n\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = undefined;\n    }\n\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = undefined;\n    }\n\n    this.retries = undefined;\n  };\n\n  RetryWhenSubscriber.prototype.notifyNext = function () {\n    var _unsubscribe = this._unsubscribe;\n    this._unsubscribe = null;\n\n    this._unsubscribeAndRecycle();\n\n    this._unsubscribe = _unsubscribe;\n    this.source.subscribe(this);\n  };\n\n  return RetryWhenSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"sources":["../../../src/internal/operators/retryWhen.ts"],"names":[],"mappings":"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","sourcesContent":["/** PURE_IMPORTS_START tslib,_Subject,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function retryWhen(notifier) {\n    return function (source) { return source.lift(new RetryWhenOperator(notifier, source)); };\n}\nvar RetryWhenOperator = /*@__PURE__*/ (function () {\n    function RetryWhenOperator(notifier, source) {\n        this.notifier = notifier;\n        this.source = source;\n    }\n    RetryWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n    };\n    return RetryWhenOperator;\n}());\nvar RetryWhenSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RetryWhenSubscriber, _super);\n    function RetryWhenSubscriber(destination, notifier, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.notifier = notifier;\n        _this.source = source;\n        return _this;\n    }\n    RetryWhenSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var errors = this.errors;\n            var retries = this.retries;\n            var retriesSubscription = this.retriesSubscription;\n            if (!retries) {\n                errors = new Subject();\n                try {\n                    var notifier = this.notifier;\n                    retries = notifier(errors);\n                }\n                catch (e) {\n                    return _super.prototype.error.call(this, e);\n                }\n                retriesSubscription = innerSubscribe(retries, new SimpleInnerSubscriber(this));\n            }\n            else {\n                this.errors = undefined;\n                this.retriesSubscription = undefined;\n            }\n            this._unsubscribeAndRecycle();\n            this.errors = errors;\n            this.retries = retries;\n            this.retriesSubscription = retriesSubscription;\n            errors.next(err);\n        }\n    };\n    RetryWhenSubscriber.prototype._unsubscribe = function () {\n        var _a = this, errors = _a.errors, retriesSubscription = _a.retriesSubscription;\n        if (errors) {\n            errors.unsubscribe();\n            this.errors = undefined;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = undefined;\n        }\n        this.retries = undefined;\n    };\n    RetryWhenSubscriber.prototype.notifyNext = function () {\n        var _unsubscribe = this._unsubscribe;\n        this._unsubscribe = null;\n        this._unsubscribeAndRecycle();\n        this._unsubscribe = _unsubscribe;\n        this.source.subscribe(this);\n    };\n    return RetryWhenSubscriber;\n}(SimpleOuterSubscriber));\n//# sourceMappingURL=retryWhen.js.map\n"]},"metadata":{},"sourceType":"module"}