{"ast":null,"code":"/** PURE_IMPORTS_START _ReplaySubject PURE_IMPORTS_END */\nimport { ReplaySubject } from '../ReplaySubject';\nexport function shareReplay(configOrBufferSize, windowTime, scheduler) {\n  var config;\n\n  if (configOrBufferSize && typeof configOrBufferSize === 'object') {\n    config = configOrBufferSize;\n  } else {\n    config = {\n      bufferSize: configOrBufferSize,\n      windowTime: windowTime,\n      refCount: false,\n      scheduler: scheduler\n    };\n  }\n\n  return function (source) {\n    return source.lift(shareReplayOperator(config));\n  };\n}\n\nfunction shareReplayOperator(_a) {\n  var _b = _a.bufferSize,\n      bufferSize = _b === void 0 ? Number.POSITIVE_INFINITY : _b,\n      _c = _a.windowTime,\n      windowTime = _c === void 0 ? Number.POSITIVE_INFINITY : _c,\n      useRefCount = _a.refCount,\n      scheduler = _a.scheduler;\n  var subject;\n  var refCount = 0;\n  var subscription;\n  var hasError = false;\n  var isComplete = false;\n  return function shareReplayOperation(source) {\n    refCount++;\n    var innerSub;\n\n    if (!subject || hasError) {\n      hasError = false;\n      subject = new ReplaySubject(bufferSize, windowTime, scheduler);\n      innerSub = subject.subscribe(this);\n      subscription = source.subscribe({\n        next: function (value) {\n          subject.next(value);\n        },\n        error: function (err) {\n          hasError = true;\n          subject.error(err);\n        },\n        complete: function () {\n          isComplete = true;\n          subscription = undefined;\n          subject.complete();\n        }\n      });\n\n      if (isComplete) {\n        subscription = undefined;\n      }\n    } else {\n      innerSub = subject.subscribe(this);\n    }\n\n    this.add(function () {\n      refCount--;\n      innerSub.unsubscribe();\n      innerSub = undefined;\n\n      if (subscription && !isComplete && useRefCount && refCount === 0) {\n        subscription.unsubscribe();\n        subscription = undefined;\n        subject = undefined;\n      }\n    });\n  };\n}","map":{"version":3,"sources":["../../../src/internal/operators/shareReplay.ts"],"names":[],"mappings":"AACA;AAiEA,SAAM,aAAN,QACE,kBADF;AAKE,OAAA,SAA8B,WAA9B,CAA8B,kBAA9B,EAA8B,UAA9B,EAA8B,SAA9B,EAA8B;EAC9B,IAAI,MAAJ;;MACE,kBAAS,IAAA,OAAwC,kBAAxC,KAAwC,Q,EAAA;IAClD,MAAA,GAAA,kBAAA;EAAM,C,MACL;IACE,MAAA,GAAA;MACA,UAAU,EAAA,kBADV;MAEA,UAAU,EAAA,UAFV;MAGA,QAAA,EAAS,KAHT;MAIA,SAAA,EAAA;IAJA,CAAA;EAMJ;;EACD,OAAA,UAAA,MAAA,EAAA;IAAA,OAAA,MAAA,CAAA,IAAA,CAAA,mBAAA,CAAA,MAAA,CAAA,CAAA;EAAA,CAAA;AAED;;AACE,SAAA,mBAAA,CAAA,EAAA,EAAA;EAKA,IAAI,EAAA,GAAA,EAAqC,CAAC,UAA1C;EAAA,IAA0C,UAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,MAAA,CAAA,iBAAA,GAAA,EAA1C;EAAA,IAA0C,EAAA,GAAA,EAAA,CAAA,UAA1C;EAAA,IAA0C,UAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,MAAA,CAAA,iBAAA,GAAA,EAA1C;EAAA,IAA0C,WAAA,GAAA,EAAA,CAAA,QAA1C;EAAA,IAA0C,SAAA,GAAA,EAAA,CAAA,SAA1C;EACA,IAAI,OAAJ;EACA,IAAI,QAAA,GAAA,CAAJ;EACA,IAAI,YAAJ;EACA,IAAI,QAAA,GAAU,KAAd;EAEA,IAAA,UAAO,GAAS,KAAhB;EAIE,OAAA,SAAW,oBAAX,CAAW,MAAX,EAAW;IACX,QAAI;IACJ,IAAI,QAAJ;;QACE,CAAA,OAAA,IAAW,Q,EAAM;MACjB,QAAO,GAAG,KAAV;MACA,OAAA,GAAQ,IAAG,aAAH,CAAoB,UAApB,EAA2B,UAA3B,EAA2B,SAA3B,CAAR;MACA,QAAA,GAAA,OAAe,CAAA,SAAf,CAAsB,IAAtB,CAAA;MACE,YAAI,GAAA,MAAC,CAAA,SAAD,CAAM;YACR,EAAA,UAAY,KAAZ,EAAmB;UACpB,OAAA,CAAA,IAAA,CAAA,KAAA;QACD,CAHU;QAIR,KAAA,EAAA,UAAW,GAAX,EAAgB;UAChB,QAAQ,GAAA,IAAR;UACD,OAAA,CAAA,KAAA,CAAA,GAAA;QACD,CAPU;QAQR,QAAA,EAAA,YAAkB;UAClB,UAAA,GAAY,IAAZ;UACA,YAAQ,GAAA,SAAR;UACD,OAAA,CAAA,QAAA;QACA;MAZS,CAAN,CAAJ;;UAmBA,U,EAAY;QACb,YAAA,GAAA,SAAA;MACF;IAAM,C,MACL;MACD,QAAA,GAAA,OAAA,CAAA,SAAA,CAAA,IAAA,CAAA;IAED;;IACE,KAAA,GAAA,CAAA,YAAW;MACX,QAAQ;MACR,QAAQ,CAAA,WAAR;MACA,QAAI,GAAA,SAAJ;;UACE,YAAY,IAAC,CAAA,UAAb,IAA2B,WAA3B,IAA2B,QAAA,KAAA,C,EAAA;QAC3B,YAAY,CAAA,WAAZ;QACA,YAAU,GAAA,SAAV;QACD,OAAA,GAAA,SAAA;MACA;IACH,CATE;EAUL,CA3CG","sourcesContent":["/** PURE_IMPORTS_START _ReplaySubject PURE_IMPORTS_END */\nimport { ReplaySubject } from '../ReplaySubject';\nexport function shareReplay(configOrBufferSize, windowTime, scheduler) {\n    var config;\n    if (configOrBufferSize && typeof configOrBufferSize === 'object') {\n        config = configOrBufferSize;\n    }\n    else {\n        config = {\n            bufferSize: configOrBufferSize,\n            windowTime: windowTime,\n            refCount: false,\n            scheduler: scheduler,\n        };\n    }\n    return function (source) { return source.lift(shareReplayOperator(config)); };\n}\nfunction shareReplayOperator(_a) {\n    var _b = _a.bufferSize, bufferSize = _b === void 0 ? Number.POSITIVE_INFINITY : _b, _c = _a.windowTime, windowTime = _c === void 0 ? Number.POSITIVE_INFINITY : _c, useRefCount = _a.refCount, scheduler = _a.scheduler;\n    var subject;\n    var refCount = 0;\n    var subscription;\n    var hasError = false;\n    var isComplete = false;\n    return function shareReplayOperation(source) {\n        refCount++;\n        var innerSub;\n        if (!subject || hasError) {\n            hasError = false;\n            subject = new ReplaySubject(bufferSize, windowTime, scheduler);\n            innerSub = subject.subscribe(this);\n            subscription = source.subscribe({\n                next: function (value) {\n                    subject.next(value);\n                },\n                error: function (err) {\n                    hasError = true;\n                    subject.error(err);\n                },\n                complete: function () {\n                    isComplete = true;\n                    subscription = undefined;\n                    subject.complete();\n                },\n            });\n            if (isComplete) {\n                subscription = undefined;\n            }\n        }\n        else {\n            innerSub = subject.subscribe(this);\n        }\n        this.add(function () {\n            refCount--;\n            innerSub.unsubscribe();\n            innerSub = undefined;\n            if (subscription && !isComplete && useRefCount && refCount === 0) {\n                subscription.unsubscribe();\n                subscription = undefined;\n                subject = undefined;\n            }\n        });\n    };\n}\n//# sourceMappingURL=shareReplay.js.map\n"]},"metadata":{},"sourceType":"module"}